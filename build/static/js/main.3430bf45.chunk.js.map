{"version":3,"sources":["hooks.ts","components/Clock.tsx","static/defaultLayouts.ts","components/IFrameView.tsx","enums.ts","components/Shared/Pulsar.tsx","components/IXDrop.tsx","components/Shared/Button.tsx","components/CardLayout/ViewCard/CardInfo.tsx","components/CardLayout/ViewCard/DeleteButton.tsx","components/CardLayout/ViewCard/SettingsButton.tsx","components/CardLayout/ViewCard/SettingsMenu.tsx","static/appConfig.ts","components/CardLayout/ViewCard/ViewCard.tsx","components/CardLayout/GuideGrid.tsx","components/CardLayout/CardLayout.tsx","components/Background/TestShader1.js","utils.ts","components/Background/BackgroundShader.js","components/Background.tsx","components/XDrag.tsx","components/EditorPanel/TableHeader.tsx","IFrameValidator.ts","components/EditorPanel/EditorTabs/ContentsTab/ContentsTab.tsx","components/EditorPanel/EditorTabs/LayoutTab/LayoutTable.tsx","components/Shared/Modal.tsx","components/EditorPanel/EditorTabs/LayoutTab/GoogleFormPopup.tsx","static/formEmbedUrl.ts","components/Shared/Panel.tsx","components/EditorPanel/EditorTabs/LayoutTab/LayoutTab.tsx","components/EditorPanel/Editor.tsx","components/EditorPanel/EditorPanel.tsx","components/HowToUse.tsx","components/ModeChangeButton.tsx","App.tsx","data_structs/CardData.ts","model/appModel.ts","data_structs/LayoutData.ts","model/layoutsModel.ts","static/cardDataSheetKey.ts","static/layoutsGoogleSheetKey.ts","data_structs/GoogleSheetData.ts","model/googleSheetsModel.ts","model/index.ts","store.ts","index.tsx"],"names":["typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","useToggle","initialValue","useState","value","setValue","useKeyboardShortcut","keyCode","action","disabled","React","useEffect","enable","disable","document","addEventListener","handleAction","removeEventListener","e","preventDefault","useOnClickOutside","ref","handler","listener","event","el","current","contains","target","Clock","Date","date","setDate","timerID","setInterval","clearInterval","style","height","padding","width","fontSize","fontWeight","color","boxSizing","toLocaleTimeString","hour12","timeStyle","defaultGridLayoutArray","i","x","y","w","h","static","minW","defaultLayouts","lg","md","sm","xs","xxs","console","log","JSON","stringify","IFrameView","card","src","scale","active","setActive","valid","isLoaded","setIsLoaded","isYouTubeVideo","RegExp","test","iframeOverlayClass","classNames","iFrameContainerClass","iframeStyle","border","transform","transformOrigin","onDoubleClick","className","type","onReady","onLoad","memo","AppMode","CardView","DragType","InteractionType","DndTypes","DragSource","SheetNames","ResponsivePlayer","url","PureComponent","Pulsar","AddIcon","size","IXDrop","children","properties","cardType","provided","snapshot","innerRef","isDraggingOver","placeholder","Button","onClick","text","appearance","iconBefore","containerClass","onMouseUp","cursor","undefined","CardInfo","data","title","DeleteButton","display","DeleteIcon","SettingsButton","useRef","CogIcon","InputRow","ScaleControls","setScale","ChevronLeftIcon","toString","slice","ChevronRightIcon","SettingsMenu","isShown","setBackgroundColor","setShowMenu","menuRef","handleClickOutside","menuStyle","onChange","appConfig","idleTime","sheetLink","formLink","defaultIframeScale","defaultEmbedScale","showModeSwitchButton","defaultLayoutName","ViewCard","cardId","activeKey","cardContainerRef","appModeState","state","appModel","appMode","GRID","oldCardView","setCardView","deleteCardAction","actions","layoutsModel","deleteCard","useLocalStore","cardView","includes","cardBackgroundColor","computed","PREVIEW","boundingBox","getBoundingClientRect","setGpZindex","calculateTransform","show","showMenu","toggleMenu","cardClass","EDIT","DISPLAY","FULL_SCREEN","CLOCK","failed","cardInfoClass","handleCardPress","thunk","_","getState","s","devTools","settingsMenuProperties","cardModalBackdrop","cardChildContainer","showDeleteButton","renderCardInfo","containerRef","qrContainerStyle","position","bottom","zIndex","right","willChange","backgroundColor","errors","validator","errorMessages","renderQrCode","renderReturnButton","windowWidth","window","innerWidth","windowHeight","innerHeight","centeredX","centeredY","currentX","currentY","differenceX","differenceY","refdiv","index","cardGrandParent","parentElement","FailureNotice","map","error","key","InlineAlert","intent","ReturnButton","GuideGrid","cards","gridSettings","layout","ResponsiveGridLayout","WidthProvider","Responsive","top","left","layouts","resizeHandles","preventCollision","isDraggable","isResizable","p","droppableId","PLACEHOLDER","CardGrid","viewModeState","setBufferLayoutAction","setBufferLayout","currentLayoutState","activeLayout","isEditMode","useMemo","activeCards","placeholderCards","setPlaceholderCards","filledLayout","setFilledLayout","realLayout","setRealLayout","localLayout","activeKeyReference","allBlank","rows","cols","allGridSpots","push","emptyCards","rr","maxW","minH","maxH","shift","generateFilledLayout","justPlaceholders","filter","l","startsWith","sharedGridSettings","breakpoints","rowHeight","margin","compactType","verticalCompact","isBounded","onDragStart","oldItem","newItem","element","onDragStop","onLayoutChange","newLayout","sourceId","draggable","cardContainerClass","IFRAME","isFailed","TestShader1","uniforms","time","vertexShader","fragmentShader","formatDate","d","month","getMonth","day","getDate","year","getFullYear","length","join","randomIntFromInterval","min","max","Math","floor","random","randomisePosition","THREE","rgb","r","g","b","baseColors","pink","brightPink","darkPurple","orange","darkgrey","lightgrey","red","u_bg","u_bgMain","u_color1","u_color2","u_time","u_randomisePosition","ShadedGeometry1","shaderMaterialRef","t","j","vCheck","useFrame","clock","cos","R","sin","G","B","rotation","degToRad","attach","args","BackgroundShader","cam","gl","antialias","alpha","PerspectiveCamera","fov","aspect","near","far","faceResolution","OrbitControls","Background","viewMode","backgroundStyle","setBackgroundStyle","transition","backgroundClass","ReactDOM","createPortal","querySelector","XDrag","dndType","dragAll","isValidElement","dragHandleProperties","dragHandleProps","draggableProps","cloneElement","isDragging","defaultProps","SortState","TableHeader","propName","setFilter","setFilterDirection","activeFilter","sortDirection","setSortDirection","sortVisibility","setSortVisibility","str","split","regex","toLowerCase","match","forEach","char","replace","toUpperCase","titleCapitilization","toTitleCase","IFrameLoadError","IFrameLoadWarning","TitleWithIcon","isActive","marginTop","marginBottom","textAlign","ContentsTab","availableCards","filterKey","setFilterKey","filterDirection","cardItems","setCardItems","searchTerm","setSearchTerm","filteredCards","setFilteredCards","aboveThreshholdCardTitles","fuzzysort","go","c","filtered","sortedItems","sort","a","aText","bText","reverse","SearchInput","currentTarget","CARD_TABLE","isDropDisabled","autoHeight","autoHeightMin","autoHeightMax","onScrollFrame","v","added","author","interaction","CARD_ROW","draggableId","isDragDisabled","LayoutTable","externalLayoutsState","externalLayouts","activeLayoutState","LAYOUT_TABLE","id","LAYOUT","StatusIndicator","Modal","containerClassName","onClose","backdropOpacity","MyBackdrop","opacity","GoogleFormPopup","visible","onCloseComplete","layoutState","isCopiedJSON","setIsCopiedJson","layoutString","copyFieldContainerClass","ReactDom","Heading","onCopy","CopyField","isCurrentClipBoardContent","isClipBoardCorrect","setIsClipBoardCorrect","isCopied","setIsCopied","copyFieldClass","navigator","clipboard","readText","then","clipboardText","catch","flexDirection","justifyContent","paddingTop","ClipboardIcon","writeText","CrossIcon","GoogleFormIframe","frameBorder","marginHeight","marginWidth","Panel","panelStyle","LayoutTab","bufferState","bufferLayout","setIsShown","fetchCardDataGoogleSheetThunk","googleSheetsModel","fetchAppGoogleSheet","setLayoutString","DocumentIcon","Editor","EditorPanel","minimized","setMinimized","editorPanelClass","hidden","editorBodyClass","editorClass","handle","defaultClassName","defaultPosition","icon","PlusIcon","MinusIcon","PanelHeader","WindowButton","HowToUse","toggleVisible","howToPopupContainerClass","buttonContainerClass","container","HandUpIcon","HowToPopup","Text","process","ModeChangeButton","toggleModeAction","toggleAppMode","longPressEvent","useLongPress","modeChangeButtonStyle","App","isIdle","useIdle","toggleAppModeThunk","swapCardDataAction","swapCardContent","cardAddAction","addCard","setActiveLayoutAction","setActiveLayout","isDraggingLayout","setIsDraggingLayout","tabIndex","onBeforeDragStart","source","onDragEnd","response","destination","cardPos","posString","Number","parseInt","charAt","stringToGridPos","targetPosition","targetId","LayoutOverlay","IFrameValidator","warnings","this","malformedUrlCheckArray","warningsArray","MALFORMED_URL","validURL","CROSS_ORIGIN","CardData","row","currentLayout","defaultGridLayout","manageViewModeChange","viewModeEnum","setAppMode","CYCLE","setCurrentLayout","layoutArray","setAvailableCards","cardDataArray","setActiveCards","onCardSheetLoadSuccess","thunkOn","storeActions","setAppGoogleSheetData","payload","getSheetRows","CARDS","sourceid","onSetActiveLayout","activeSources","sources","availableCardsUpdated","registerCardLoadFailure","failedCard","getStoreState","failedId","newCards","fail","onSwapCardContent","newSource","find","debug","LayoutData","timestamp","startLayout","parse","swapInfo","Object","entries","k","toRemove","toAdd","pos","toFail","newGridLayout","tempLayout","onSetAppGoogleSheetData","LAYOUTS","defaultLayout","setExternalLayouts","onToggleViewModeListener","buf","newActiveLayout","newLayoutArray","getStoreActions","swapCard","cardToDelete","removeCard","cardAddEvent","cardToAdd","setGridLayout","failCard","setTempLayout","updateLayout","swap","old","cardDataSheetKey","gid","layoutsGoogleSheetKey","GoogleSheetData","sheetId","sheets","Map","Promise","resolve","reject","rowArray","get","set","layoutDataGoogleSheet","cardDataGoogleSheet","appGoogleSheet","parseData","getCardDataResponse","sheetTitle","csvUrl","Papa","download","header","delimiter","dynamicTyping","complete","results","getLayoutDataResponse","allSettled","sheetData","goodValues","result","num","status","addSheet","setCardDataGoogleSheet","setLayoutDataGoogleSheet","googleSheet","sheet","model","appData","store","createStore","name","render"],"mappings":"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","file":"static/js/main.3430bf45.chunk.js","sourcesContent":["import { createTypedHooks } from \"easy-peasy\";\r\nimport { StoreModel } from \"./model\";\r\nimport React, {MouseEventHandler, RefObject, useEffect, useState} from 'react'\r\n\r\nconst typedHooks = createTypedHooks<StoreModel>();\r\n\r\n// We export the hooks from our store as they will contain the\r\n// type information on them\r\n// see https://easy-peasy.vercel.app/docs/api/use-store-actions.html for more on store hooks\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n\r\n\r\nexport function useToggle(initialValue: boolean): [boolean, () => void] {\r\n    const [value, setValue] = useState<boolean>(initialValue);\r\n  \r\n    const toggleValue = () => setValue(!value);\r\n  \r\n    return [value, toggleValue];\r\n  }\r\n\r\nexport const useKeyboardShortcut = ({keyCode, action, disabled}:{keyCode: number, action: (e: KeyboardEvent)=>void, disabled: boolean}) => {\r\n  React.useEffect(() => {\r\n    if(!disabled){\r\n      enable()\r\n    }\r\n    return () => {\r\n      disable()\r\n    }\r\n  })\r\n\r\n  const enable = () => {\r\n    document.addEventListener('keydown', handleAction)\r\n  }\r\n\r\n  const disable = () => {\r\n    document.removeEventListener('keydown', handleAction)\r\n  }\r\n\r\n  const handleAction = (e: KeyboardEvent) => {\r\n    if(e.keyCode === keyCode){\r\n      e.preventDefault()\r\n      action(e)\r\n    }\r\n  }\r\n\r\n  return {enable, disable}\r\n}\r\n\r\ntype AnyEvent = MouseEvent | TouchEvent\r\n\r\nexport function useOnClickOutside<T extends HTMLElement = HTMLElement>(\r\n  ref: RefObject<T>,\r\n  handler: (event: AnyEvent) => void,\r\n): void {\r\n  useEffect(() => {\r\n    const listener = (event: AnyEvent) => {\r\n      const el = ref?.current\r\n\r\n      // Do nothing if clicking ref's element or descendent elements\r\n      if (!el || el.contains(event.target as Node)) {\r\n        return\r\n      }\r\n\r\n      handler(event)\r\n    }\r\n\r\n    document.addEventListener(`mousedown`, listener)\r\n    document.addEventListener(`touchstart`, listener)\r\n\r\n    return () => {\r\n      document.removeEventListener(`mousedown`, listener)\r\n      document.removeEventListener(`touchstart`, listener)\r\n    }\r\n\r\n    // Reload only if ref or handler changes\r\n  }, [ref, handler])\r\n}\r\n","import \"../css/clock.css\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * Simple clock widget for displaying the current time.\r\n * @component\r\n */\r\nconst Clock = (): JSX.Element => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const containerStyle = {\r\n    height: \"100%\",\r\n    padding: \".25em\",\r\n    width: \"100%\",\r\n    fontSize: \"4vw\",\r\n    fontWeight: 600,\r\n    color: \"white\",\r\n    boxSizing: \"border-box\",\r\n  } as React.CSSProperties;\r\n\r\n\r\n  useEffect(() => {\r\n    const timerID = setInterval(() => tick(), 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerID);\r\n    };\r\n  });\r\n\r\n  function tick(): void {\r\n    setDate(new Date());\r\n  }\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <div>Data Experience Lab</div>\r\n      <div>\r\n        {date.toLocaleTimeString(\"en-IT\", { hour12: true, timeStyle: \"short\" })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n","import { Layout, Layouts } from \"react-grid-layout\";\n// const availableHandles: ResizeHandle[] = [\n//   \"s\",\n//   \"w\",\n//   \"e\",\n//   \"n\",\n//   \"sw\",\n//   \"nw\",\n//   \"se\",\n//   \"ne\",\n// ];\nconst defaultGridLayoutArray: Layout[] = [\n  { i: \"clock\", x: 0, y: 0, w: 2, h: 1, static: true },\n  {\n    i: \"https://codepen.io/rcyou/embed/QEObEk?height=265&theme-id=light&default-tab=css,result\",\n    x: 2,\n    y: 2,\n    w: 1,\n    h: 1,\n    static: false,\n  },\n  {\n    i: \"https://sketchfab.com/models/e55956fee6444011b574bad021a03eae/embed?autostart=1\",\n    x: 3,\n    y: 0,\n    w: 1,\n    h: 1,\n    minW: 1,\n  },\n  {\n    i: \"https://www.lib.ncsu.edu/huntlibrary\",\n    x: 3,\n    y: 1,\n    w: 1,\n    h: 1,\n    minW: 1,\n  },\n];\n\n// const defaultGridLayoutArr: Layout[] = [\n//   { i: \"clock\", x: 0, y: 0, w: 2, h: 1, static: true },\n//   {\n//     i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_1\",\n//     x: 0,\n//     y: 1,\n//     w: 1,\n//     h: 1,\n//     static: true,\n//   },\n//   {\n//     i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_3\",\n//     x: 2,\n//     y: 0,\n//     w: 1,\n//     h: 1,\n//     minW: 2,\n//     maxW: 4,\n//   },\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_3\", x: 2, y: 0, w: 1, h: 1 },\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_3\", x: 3, y: 0, w: 1, h: 1 },\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_5\", x: 0, y: 1, w: 1, h: 1 },\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_6\", x: 1, y: 1, w: 1, h: 1 },\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_7\", x: 2, y: 1, w: 1, h: 1 },\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_8\", x: 3, y: 1, w: 1, h: 1 },\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_9\", x: 0, y: 3, w: 1, h: 1 },\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_10\", x: 1, y: 3, w: 1, h: 1 },\n// ];\n\nconst defaultLayouts: Layouts = {\n  lg: defaultGridLayoutArray,\n  md: defaultGridLayoutArray,\n  sm: defaultGridLayoutArray,\n  xs: defaultGridLayoutArray,\n  xxs: defaultGridLayoutArray,\n};\n\nconsole.log(JSON.stringify(defaultLayouts));\nexport default defaultLayouts;\n","import React, { useState, FC, PropsWithChildren, PureComponent } from \"react\";\r\n// import { Spinner, Pane } from \"evergreen-ui\";\r\nimport classNames from \"classnames\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"../css/iframeView.css\";\r\nimport IFrameValidator from \"../IFrameValidator\";\r\nimport { useStoreState, useStoreActions } from \"../hooks\";\r\nimport CardData from \"../data_structs/CardData\";\r\nimport ReactPlayer from \"react-player\";\r\nimport QRCode from \"react-qr-code\";\r\nimport CardLayout from \"./CardLayout/CardLayout\";\r\n\r\ninterface IFrameViewProperties {\r\n  card: CardData;\r\n  src: string;\r\n  scale: number;\r\n}\r\n/**\r\n * Minimal warpper for an <iframe>. Can be toggled between a full screen, active view, and a regular card view.\r\n * @component\r\n * @example\r\n * const my_url = \"https://www.youtube.com/embed/tgbNymZ7vqY\";\r\n * return(\r\n *  <IFrameView src = {my_url}/>\r\n * )\r\n */\r\nconst IFrameView: FC<IFrameViewProperties> = ({ card, src, scale }) => {\r\n  const [active, setActive] = useState(false);\r\n  const [valid, setIsValid] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const isYouTubeVideo = new RegExp(\"youtube\").test(src);\r\n\r\n  const iframeOverlayClass = classNames(\"iframe-view-overlay\", {\r\n    \"iframe-view-overlay-hidden\": isLoaded,\r\n    \"iframe-view-overlay-loading\": !isLoaded,\r\n  });\r\n\r\n  const iFrameContainerClass = classNames(\"iframe-container\", {\r\n    \"iframe-container-hidden\": !valid,\r\n  });\r\n  //TODO: Fix or remove card error handling\r\n\r\n  const iframeStyle = {\r\n    // width: \"100%\",\r\n    // height: \"100%\",\r\n    border: \"none\",\r\n    transform: `scale(${scale})`,\r\n    width: `${100 * (1 / scale)}%`,\r\n    height: `${100 * (1 / scale)}%`,\r\n    transformOrigin: \"top left\",\r\n  } as React.CSSProperties;\r\n\r\n  const iframeActive = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    border: \"5px blue\",\r\n  } as React.CSSProperties;\r\n  const qrContainerStyle = {\r\n    width: \"100%\",\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    zIndex: 10,\r\n  } as React.CSSProperties;\r\n\r\n  return (\r\n    <div\r\n      onDoubleClick={() => {\r\n        setActive(!active);\r\n      }}\r\n      className={iFrameContainerClass}\r\n    >\r\n      <div className={iframeOverlayClass}>\r\n        <Loader type=\"Grid\" color=\"white\" height={80} width={80} />\r\n      </div>\r\n      {/* <div style={qrContainerStyle}>\r\n        <QRCode value={card?.src ?? \"\"} />\r\n      </div> */}\r\n      {isYouTubeVideo ? (\r\n        <ResponsivePlayer\r\n          src={src}\r\n          onReady={(event) => {\r\n            setIsLoaded(true);\r\n          }}\r\n        />\r\n      ) : (\r\n        <iframe\r\n          onLoad={(event) => {\r\n            setIsLoaded(true);\r\n          }}\r\n          src={src}\r\n          style={active ? iframeActive : iframeStyle}\r\n        ></iframe>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// function determineoOutput(src: string, onLoad: (e)): JSX.Element{\r\n//   const out = (new RegExp('youtube')).test(src)\r\n//   console.log(out);\r\n\r\n//   return (\r\n//     out?<ReactPlayer url='https://www.youtube.com/watch?v=ysz5S6PUM-U' />:<div>b</div>\r\n//   )\r\n// }\r\n\r\nexport default React.memo(IFrameView);\r\nfunction propertiesAreEqual(\r\n  previousProperties: Readonly<PropsWithChildren<IFrameViewProperties>>,\r\n  nextProperties: Readonly<PropsWithChildren<IFrameViewProperties>>\r\n): boolean {\r\n  if (previousProperties.src == nextProperties.src) {\r\n    console.log(previousProperties.src);\r\n    console.log(nextProperties.src);\r\n    return false;\r\n  }\r\n  console.log(previousProperties.src);\r\n  console.log(nextProperties.src);\r\n  return true;\r\n}\r\n\r\nconst ResponsivePlayer = ({\r\n  src,\r\n  onReady,\r\n}: {\r\n  src: string;\r\n  onReady: (e: ReactPlayer) => void;\r\n}): JSX.Element => {\r\n  return (\r\n    <div className=\"player-wrapper\">\r\n      <ReactPlayer\r\n        className=\"react-player\"\r\n        url={src}\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        onReady={onReady}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nclass Content extends React.PureComponent<{ src: string }> {\r\n  renderCount = 0;\r\n  render() {\r\n    this.renderCount++;\r\n    return (\r\n      <div\r\n        style={{\r\n          background: \"#afa\",\r\n          padding: 8,\r\n          borderRadius: 8,\r\n          display: \"inline-block\",\r\n        }}\r\n      >\r\n        {this.props.src}\r\n        Hello from{\" \"}\r\n        <span style={{ fontFamily: \"monospace\" }}>{\"<Content />\"}</span> ! I've\r\n        rendered {this.renderCount} times.\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export enum AppMode {\r\n  DISPLAY = \"DISPLAY\",\r\n  EDIT = \"EDIT\",\r\n  CYCLE = \"CYCLE\",\r\n}\r\n\r\nexport enum CardView {\r\n  GRID = \"GRID\",\r\n  PREVIEW = \"PREVIEW\",\r\n  FULL_SCREEN = \"FULL_SCREEN\",\r\n}\r\n\r\nexport enum DragType {\r\n  CARD_TABLE_DATA = \"CARD_TABLE_DATA\",\r\n  DISPLAY_CARD = \"DISPLAY_CARD\",\r\n}\r\n\r\nexport enum InteractionType {\r\n  ACTIVE = \"ACTIVE\",\r\n  STATIC = \"STATIC\",\r\n  FIXED = \"FIXED\",\r\n  IMAGE = \"IMAGE\",\r\n}\r\n\r\nexport enum DndTypes {\r\n  PLACEHOLDER = \"PLACEHOLDER\",\r\n  CLOCK = \"CLOCK\",\r\n  IFRAME = \"IFRAME\",\r\n  CARD_ROW = \"CARD_ROW\",\r\n  LAYOUT = \"LAYOUT\",\r\n}\r\n\r\nexport enum DragSource {\r\n  LAYOUT_TABLE = \"LAYOUT_TABLE\",\r\n  CARD_TABLE = \"CARD_TABLE\",\r\n  CARD_GRID = \"CARD_GRID\",\r\n}\r\n\r\n\r\nexport enum SheetNames{\r\n  CARDS = \"CARDS\",\r\n  LAYOUTS = \"LAYOUTS\",\r\n}\r\n\r\n","import React from \"react\";\nimport \"../../css/pulsar.css\";\nimport { AddIcon } from \"evergreen-ui\";\ninterface PulsarProperties {}\n\nconst Pulsar = () => {\n  return (\n    <div className=\"pulsar\">\n      <AddIcon size={200}></AddIcon>\n      {/* <div className={\"ring\"}></div> */}\n      {/* <div className={\"ring\"}></div>\n      <div className={\"ring\"}></div>\n      <div className={\"ring\"}></div>\n      <div className={\"ring\"}></div> */}\n    </div>\n  );\n};\n\nexport default Pulsar;\n","import React, { FC, ReactNode, useEffect } from \"react\";\nimport { Droppable, DroppableProps } from \"react-beautiful-dnd\";\nimport { AddIcon } from \"evergreen-ui\";\nimport \"../css/droppable.css\";\nimport Pulsar from \"./Shared/Pulsar\";\nimport { DndTypes } from \"../enums\";\ninterface IXDrop extends Omit<DroppableProps, \"children\"> {\n  children: ReactNode;\n  cardType: DndTypes;\n  className?: string;\n}\n\n/**A droppable container. Wraps child widgets in a react-beautiful-dnd Droppable component, and renders a \"+\" if a draggable is dragging over the container */\nconst IXDrop: FC<IXDrop> = ({\n  children,\n  className,\n  cardType,\n  ...properties\n}) => {\n  // const droppableContainert className = {\"droppable \" + className}\n  return (\n    <Droppable {...properties} type={\"DEFAULT\"}>\n      {(provided, snapshot) => {\n        return (\n          <div\n            {...provided.innerRef}\n            ref={provided.innerRef}\n            className={\n              snapshot.isDraggingOver\n                ? \"droppable-hovered\" + \" \" + className\n                : \"droppable\" + \" \" + className\n            }\n          >\n            <div\n              className={\n                snapshot.isDraggingOver\n                  ? \"droppable-overlay droppable-overlay-visible\"\n                  : \"droppable-overlay droppable-overlay-hidden\"\n              }\n            >\n              <Pulsar />\n            </div>\n            {children}\n            {provided.placeholder}\n          </div>\n        );\n      }}\n    </Droppable>\n  );\n};\n\nexport default IXDrop;\n","import React, { useState } from \"react\";\r\nimport { Button as EverGreenButton, ButtonAppearance } from \"evergreen-ui\";\r\n\r\n/**\r\n * Wraps an Evergreen UI Button, providing it with an onClick property.\r\n * @component\r\n */\r\n\r\ninterface ButtonProperties {\r\n  onClick: React.MouseEventHandler<HTMLDivElement>;\r\n  text?: string;\r\n  appearance?: ButtonAppearance;\r\n  className?: string;\r\n  iconBefore?: JSX.Element;\r\n  width?: number | string;\r\n  height?: number | string;\r\n  containerClass?: string;\r\n  style?: React.CSSProperties;\r\n}\r\nconst Button = ({\r\n  onClick,\r\n  text,\r\n  appearance,\r\n  className,\r\n  iconBefore,\r\n  width,\r\n  height,\r\n  style,\r\n  containerClass,\r\n}: ButtonProperties): JSX.Element => {\r\n  return (\r\n    <div onMouseUp={onClick} className={containerClass}>\r\n      <EverGreenButton\r\n        cursor=\"pointer\"\r\n        //use evergreen's default button with if no width is provided\r\n        width={width ?? undefined}\r\n        height={height ?? undefined}\r\n        iconBefore={iconBefore ?? undefined}\r\n        className={className}\r\n        appearance={appearance ?? \"default\"}\r\n        style={style}\r\n      >\r\n        {text}\r\n      </EverGreenButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from \"react\";\r\nimport CardData from \"../../../data_structs/CardData\";\r\nimport \"../../../css/cardInfo.css\"\r\n/**\r\n * Formats text from a CardData object, including it's title and source url.\r\n * @component\r\n */\r\nconst CardInfo = ({\r\n  data,\r\n  className,\r\n}: {\r\n  data: CardData;\r\n  className: string;\r\n}): JSX.Element => {\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const titleStyle = {\r\n    // fontSize: \"large\",\r\n  };\r\n  return (\r\n    <>\r\n      <div className={\"card-footer\"}>\r\n        <h2 style={titleStyle}>{data.title}</h2>\r\n        {/* <a>{data.src}</a> */}\r\n        <p>\r\n          Lorem Ipsum is simply dummy text of the printing and typesetting\r\n          industry. Lorem Ipsum has been the industry&apos standard dummy text\r\n          ever since the 1500s, when an unknown printer took a galley of type\r\n          and scrambled it to make a type specimen book{\" \"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardInfo;\r\n","import React from \"react\";\nimport \"../../../css/deleteButton.css\";\nimport { DeleteIcon } from \"evergreen-ui\";\n\ninterface DeleteButtonProperties {\n    onClick: React.MouseEventHandler<HTMLDivElement>;\n  }\n  \n\nconst DeleteButton = ({ onClick }: DeleteButtonProperties): JSX.Element => {\n    return (\n      <div\n        className=\"delete-button-container\"\n        onMouseUp={onClick}\n      >\n        <div\n          onClick={onClick}\n        style={{display: \"flex\"}}>\n          <DeleteIcon size={30} />\n        </div>\n      </div>\n    );\n  };\n  \n\n  export default DeleteButton","import React, { useRef } from \"react\";\nimport \"../../../css/card/settingsButton.css\";\nimport { CogIcon, Popover } from \"evergreen-ui\";\nimport SettingsMenu from \"./SettingsMenu\";\n\nconst SettingsButton = ({\n  onClick,\n}: {\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n}): JSX.Element => {\n  const target = useRef();\n  return (\n    <div className=\"settings-button-container\" onMouseUp={onClick}>\n      <div\n        //   onClick={onClick}\n        style={{ display: \"flex\" }}\n      >\n        <CogIcon size={15} />\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsButton;\n","import Button from '../../Shared/Button';\nimport React, { useRef } from 'react';\nimport SettingsButton from './SettingsButton';\nimport { ActionCreator, Actions } from 'easy-peasy';\nimport { CardModel } from './ViewCard';\nimport '../../../css/card/settingsMenu.css';\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  TextInput,\n} from \"evergreen-ui\";\n// import {useOnClickOutside } from \"crooks\"\nimport {useOnClickOutside} from \"../../../hooks\"\n\ninterface SettingsMenuProperties extends Pick<Actions<CardModel>, \"setScale\" | \"setBackgroundColor\" | \"setShowMenu\"> {\n  isShown: boolean;\n  scale: number;\n}\n\nconst SettingsMenu = ({\n  isShown,\n  setScale,\n  setBackgroundColor,\n  setShowMenu,\n  scale,\n  \n}: SettingsMenuProperties): JSX.Element => {\n  const onOutside = () =>{console.log(\"got click outisde\");}\n  const menuRef = useRef(null)\n  const handleClickOutside = useOnClickOutside(menuRef, ()=>{setShowMenu(false)})\n  const menuStyle = {\n    display: isShown ? \"flex\" : \"none\",\n  } as React.CSSProperties;\n\n  return (\n    <div ref = {menuRef} className ={\"menu-container\"} style={menuStyle} {...handleClickOutside}>\n        <InputRow title = {\"Background Color:\"\n        }>\n       <input\n        className=\"nodrag\"\n        type=\"color\"\n        onChange={(e)=>{setBackgroundColor(e.target.value)}}\n      />\n        </InputRow>\n\n        <InputRow title = {\"Scale: \"}>\n        <ScaleControls setScale={setScale} scale={scale} />\n        </InputRow>\n    </div>\n  );\n};\n\nconst InputRow = ({title, children}:{title: string, children: JSX.Element | JSX.Element[]}): JSX.Element=>{\n    return (\n        <>\n        <div className={\"menu-input-row\"}>\n            {title}\n            {children}\n        </div>\n        </>\n    )\n}\n\nconst ScaleControls = ({\n  setScale,\n  scale,\n}: {\n  setScale: ActionCreator<number>;\n  scale: number;\n}): JSX.Element => {\n  return (\n    <div className={\"scale-controls-grid\"}>\n      <Button\n        width={20}\n        height = {20}\n        containerClass={\"scale-controls-left\"}\n        // className={\"scale-controls-left\"}\n        iconBefore={<ChevronLeftIcon size={30} />}\n        onClick={() => {\n          setScale(-0.1);\n        }}\n        // style={{ width: \"fill-available\" }}\n      />\n      {/* <TextInput\n        // width = {20}\n        // className={\"scale-controls-input\"}\n\n        placeholder={scale.toString()}\n      /> */}\n      <input type=\"text\" style ={{width: 30}}value = {scale.toString().slice(0, 3)}/>\n      <Button\n        width={20}\n        height = {20}\n        containerClass={\"scale-controls-right\"}\n        // className={\"scale-controls-right\"}\n        iconBefore={<ChevronRightIcon size={30} />}\n        // style={{ width: \"-webkit-fill-available\" }}\n        onClick={() => {\n          setScale(0.1);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SettingsMenu;\n","interface AppConfig {\n  //time for the app to return to display mode after no interactions in edit mode\n  idleTime: number;\n  //link to the sheet containing the list of different card content\n  sheetLink: string;\n  //google sheets form link for saving new layouts\n  formLink: string;\n  //scale for regular web pages\n  defaultIframeScale: number;\n  //scale of content which meant for embedding, i.e. includes \"embed\" in the url\n  defaultEmbedScale: number;\n  //the default layout from your \"layouts\" google sheet to display\n  defaultLayoutName: string;\n  //\n  showModeSwitchButton: boolean; \n}\n\nconst appConfig: AppConfig = {\n  idleTime: process.env.NODE_ENV === \"development\" ? 100000000 : 10000000,\n  sheetLink:\n    \"https://docs.google.com/spreadsheets/d/1BR1AQ5Zmt_o_0dOm9AvDht0G3Q6RXQUhX71Vi4H7tTU/edit#gid=0\",\n  formLink: \"https://forms.gle/nc3UQFtFUtSaF5mu6\",\n  defaultIframeScale: 0.5,\n  defaultEmbedScale: 1.0,\n  showModeSwitchButton: false,\n  defaultLayoutName: \"Data Charts\",\n};\n\nexport default appConfig;\n","import \"../../../css/viewCard.css\";\r\n\r\nimport { AppMode, CardView, DndTypes, InteractionType } from \"../../../enums\";\r\nimport { InlineAlert } from \"evergreen-ui\";\r\n\r\nimport React, {\r\n  FC,\r\n  MouseEventHandler,\r\n  PropsWithChildren,\r\n  ReactNode,\r\n  RefObject,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  useKeyboardShortcut,\r\n  useStoreActions,\r\n  useStoreState,\r\n  useToggle,\r\n  useOnClickOutside,\r\n} from \"../../../hooks\";\r\n\r\nimport Button from \"../../Shared/Button\";\r\nimport CardData from \"../../../data_structs/CardData\";\r\nimport CardInfo from \"./CardInfo\";\r\nimport DeleteButton from \"./DeleteButton\";\r\nimport { Layouts } from \"react-grid-layout\";\r\nimport SettingsButton from \"./SettingsButton\";\r\nimport SettingsMenu from \"./SettingsMenu\";\r\nimport classNames from \"classnames\";\r\nimport {\r\n  Action,\r\n  action,\r\n  Computed,\r\n  computed,\r\n  Thunk,\r\n  thunk,\r\n  useLocalStore,\r\n} from \"easy-peasy\";\r\nimport appConfig from \"../../../static/appConfig\";\r\nimport QRCode from \"react-qr-code\";\r\n/**\r\n * Wraps each of the cards in the card layouts.\r\n * Click/Touch => Change the cards view mode\r\n * @component\r\n */\r\nexport interface CardModel {\r\n  cardBackgroundColor: string;\r\n  cardClass: Computed<CardModel, string>;\r\n  cardInfoClass: Computed<CardModel, string>;\r\n  cardType: DndTypes;\r\n  cardView: CardView;\r\n  handleCardPress: Thunk<CardModel>;\r\n  scale: number;\r\n  setBackgroundColor: Action<CardModel, string>;\r\n  setCardView: Action<CardModel, CardView>;\r\n  setScale: Action<CardModel, number>;\r\n  setShowMenu: Action<CardModel, boolean>;\r\n  showMenu: boolean;\r\n  toggleMenu: Action<CardModel>;\r\n  transform: Computed<CardModel, string>;\r\n}\r\n\r\ninterface ViewCardProperties {\r\n  activeKey?: React.MutableRefObject<string>;\r\n  cardId?: string;\r\n  cardType: DndTypes;\r\n  children?: (scale: number) => ReactNode;\r\n  data?: CardData;\r\n  dataGrid?: Layouts;\r\n  layoutRef?: React.MutableRefObject<Layouts | null>;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst ViewCard: FC<ViewCardProperties> = ({\r\n  cardType,\r\n  children,\r\n  activeKey,\r\n  cardId,\r\n  data,\r\n  onClick,\r\n}: ViewCardProperties) => {\r\n  const cardContainerRef = useRef<HTMLDivElement>(null);\r\n  const appModeState = useStoreState((state) => state.appModel.appMode);\r\n  const [oldCardView, setCardView] = useState(CardView.GRID);\r\n  const [showMenu, toggleMenu] = useToggle(false);\r\n  const deleteCardAction = useStoreActions(\r\n    (actions) => actions.layoutsModel.deleteCard\r\n  );\r\n\r\n  const [state, actions, store] = useLocalStore<CardModel>(\r\n    () => ({\r\n      cardView: CardView.GRID,\r\n      setCardView: action((state, cardView) => {\r\n        state.cardView = cardView;\r\n      }),\r\n      scale: data?.src.includes(\"embed\")\r\n        ? appConfig.defaultEmbedScale\r\n        : appConfig.defaultIframeScale,\r\n      setScale: action((state, scale) => {\r\n        state.scale += scale;\r\n      }),\r\n      cardBackgroundColor: \"\",\r\n      setBackgroundColor: action((state, color) => {\r\n        state.cardBackgroundColor = color;\r\n      }),\r\n      transform: computed([(state) => state.cardView], (cardView) => {\r\n        if (cardView == CardView.PREVIEW) {\r\n          const boundingBox = cardContainerRef.current?.getBoundingClientRect();\r\n          setGpZindex(cardContainerRef, 1);\r\n          if (boundingBox) {\r\n            return calculateTransform(boundingBox);\r\n          }\r\n        }\r\n        if (cardView === CardView.GRID) {\r\n          setGpZindex(cardContainerRef, 0);\r\n        }\r\n        return `translate(${0}px, ${0}px)`;\r\n      }),\r\n      setShowMenu: action((state, show) => {\r\n        state.showMenu = show;\r\n      }),\r\n      toggleMenu: action((state) => {\r\n        state.showMenu = !state.showMenu;\r\n      }),\r\n      showMenu: false,\r\n      cardType: cardType,\r\n      cardClass: computed([(state) => state.cardView], (cardView) => {\r\n        const test = classNames(\"card\", {\r\n          \"card-edit\": appModeState === AppMode.EDIT,\r\n          \"card-display\":\r\n            appModeState === AppMode.DISPLAY && cardView == CardView.GRID,\r\n          \"card-preview\": cardView === CardView.PREVIEW,\r\n          \"card-fullscreen\": cardView === CardView.FULL_SCREEN,\r\n          \"card-empty\": appModeState === AppMode.EDIT && !children,\r\n          \"card-empty-hidden\": !children && appModeState == AppMode.DISPLAY,\r\n          \"card-locked\":\r\n            state.cardType === DndTypes.CLOCK && appModeState === AppMode.EDIT,\r\n          \"card-error\": data?.failed,\r\n        });\r\n        console.log(test);\r\n        return test;\r\n      }),\r\n      cardInfoClass: computed((state) => {\r\n        return classNames(\"info\", {\r\n          \"info-hidden\": appModeState === AppMode.EDIT,\r\n          \"info-display\": appModeState === AppMode.DISPLAY,\r\n          \"info-preview\": state.cardView === CardView.PREVIEW,\r\n        });\r\n      }),\r\n      handleCardPress: thunk((actions, _, { getState }) => {\r\n        // console.log(\"HANDLED PRESS\");\r\n        console.log(getState().cardClass);\r\n        // console.log(appModeState);\r\n        if (appModeState === AppMode.DISPLAY && cardId != undefined) {\r\n          switch (getState().cardView) {\r\n            case CardView.GRID:\r\n              actions.setCardView(CardView.PREVIEW);\r\n              console.log(\"SETTING CARD VIEW TO PREVIEW\");\r\n              break;\r\n            case CardView.PREVIEW:\r\n              actions.setCardView(CardView.GRID);\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      }),\r\n    }),\r\n    [appModeState],\r\n    (s) => {\r\n      return { devTools: false };\r\n    }\r\n  );\r\n\r\n  const settingsMenuProperties = {\r\n    scale: state.scale,\r\n    setScale: actions.setScale,\r\n    setBackgroundColor: actions.setBackgroundColor,\r\n    setShowMenu: actions.setShowMenu,\r\n  };\r\n\r\n  const cardModalBackdrop = classNames(\"card-modal-backdrop\", {\r\n    \"card-modal-backdrop-active\":\r\n      oldCardView === CardView.PREVIEW || oldCardView === CardView.FULL_SCREEN,\r\n    \"card-modal-backdrop-inactive\": oldCardView === CardView.GRID,\r\n  });\r\n\r\n  const cardChildContainer = classNames(\"card-child-container\", {\r\n    \"card-child-container-preview\": state.cardView === CardView.PREVIEW,\r\n    \"card-child-container-fullscreen\": state.cardView === CardView.FULL_SCREEN,\r\n    \"card-child-container-grid\": state.cardView === CardView.GRID,\r\n  });\r\n\r\n  const { enable, disable } = useKeyboardShortcut({\r\n    keyCode: 27, //escape\r\n    action: () => {\r\n      if (\r\n        oldCardView === CardView.FULL_SCREEN ||\r\n        oldCardView === CardView.PREVIEW\r\n      ) {\r\n        setCardView(CardView.GRID);\r\n      }\r\n    },\r\n    disabled: false,\r\n  });\r\n\r\n  const showDeleteButton = (): JSX.Element | undefined => {\r\n    if (appModeState == AppMode.EDIT && data) {\r\n      return (\r\n        <>\r\n          <DeleteButton\r\n            onClick={() => {\r\n              console.log(\"got delete button click\");\r\n              deleteCardAction(data);\r\n            }}\r\n          />\r\n          <SettingsButton\r\n            onClick={(e) => {\r\n              // toggleMenu();\r\n              actions.toggleMenu();\r\n            }}\r\n          />\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderCardInfo = (): JSX.Element | undefined => {\r\n    if (oldCardView === CardView.PREVIEW && data) {\r\n      return <CardInfo data={data} className={state.cardInfoClass} />;\r\n    }\r\n  };\r\n\r\n  const renderInternals = () => {\r\n    return [showDeleteButton(), renderCardInfo()];\r\n  };\r\n\r\n  const renderReturnButton = (): JSX.Element | undefined => {\r\n    if (oldCardView === CardView.FULL_SCREEN) {\r\n      return (\r\n        <ReturnButton\r\n          onClick={() => {\r\n            setCardView(CardView.GRID);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  const containerRef = useRef(null);\r\n  useOnClickOutside(containerRef, () => {\r\n    if (state.cardView == CardView.PREVIEW) {\r\n      actions.setCardView(CardView.GRID);\r\n    }\r\n  });\r\n\r\n  const qrContainerStyle = {\r\n    width: \"fit-content\",\r\n    position: \"absolute\",\r\n    // top: 0,\r\n    bottom: 0,\r\n    // left: 0,\r\n    zIndex: 1,\r\n    right: 0,\r\n    transform: \"translate(50%, 50%)\",\r\n  } as React.CSSProperties;\r\n\r\n  const renderQrCode = (): JSX.Element | undefined => {\r\n    if (state.cardView === CardView.PREVIEW && data?.src) {\r\n      return (\r\n        <div style={qrContainerStyle}>\r\n          <QRCode value={data?.src ?? \"\"} size={128} />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    //receives a drag objects\r\n    <div\r\n      className={state.cardClass}\r\n      style={{\r\n        willChange: \"transform\",\r\n        height: \"100%\",\r\n        transform: state.transform,\r\n        backgroundColor: state.cardBackgroundColor,\r\n      }}\r\n      ref={cardContainerRef}\r\n    >\r\n      {data?.failed ? (\r\n        <FailureNotice errors={data.validator.errorMessages()} />\r\n      ) : children ? (\r\n        <div className={cardModalBackdrop}>\r\n          <div\r\n            className={cardChildContainer}\r\n            ref={containerRef}\r\n            onMouseUp={() => {\r\n              actions.handleCardPress();\r\n              // onCardPress();\r\n              if (onClick) {\r\n                onClick();\r\n              }\r\n            }}\r\n          >\r\n            {renderQrCode()}\r\n            {renderInternals()}\r\n            {children(state.scale)}\r\n            <SettingsMenu\r\n              {...settingsMenuProperties}\r\n              isShown={state.showMenu}\r\n            />\r\n          </div>\r\n          {renderReturnButton()}\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n// class App extends React.Component<{ message: string }, { count: number }> {\r\nconst calculateTransform = (boundingBox: DOMRect): string => {\r\n  const windowWidth = window.innerWidth;\r\n  const windowHeight = window.innerHeight;\r\n  const vw = window.innerWidth / 100;\r\n  const vh = window.innerWidth / 100;\r\n  const futureWidth = vw * 60;\r\n  const futureHeight = vh * 40;\r\n\r\n  const centeredX = windowWidth / 2 - futureWidth / 2;\r\n  const centeredY = windowHeight / 2 - futureHeight / 2;\r\n\r\n  const currentX = boundingBox.x;\r\n  const currentY = boundingBox.y;\r\n  let differenceX = centeredX - currentX;\r\n  let differenceY = centeredY - currentY;\r\n\r\n  if (currentX > centeredX) {\r\n    differenceX = currentX - centeredX;\r\n    differenceX *= -1;\r\n  }\r\n  if (currentY > centeredY) {\r\n    differenceY = currentY - centeredY;\r\n    differenceY *= -1;\r\n  }\r\n\r\n  return `translate(${differenceX}px, ${differenceY}px)`;\r\n};\r\n\r\nconst setGpZindex = (\r\n  refdiv: RefObject<HTMLDivElement> | null,\r\n  index: number\r\n): void => {\r\n  if (refdiv) {\r\n    const cardGrandParent = refdiv.current?.parentElement?.parentElement;\r\n    if (cardGrandParent) {\r\n      cardGrandParent.style.zIndex = index.toString();\r\n    }\r\n  }\r\n};\r\n//depending on the view state of the card, change its html output node\r\n\r\nconst FailureNotice = ({ errors }: { errors: string[] }): JSX.Element => {\r\n  return (\r\n    <div className={\"failure-notice-container\"}>\r\n      {errors.map((error, index) => (\r\n        <div key={index} className={\"failure-message\"}>\r\n          <InlineAlert key={index} intent=\"danger\">\r\n            {error}\r\n          </InlineAlert>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ReturnButton = ({\r\n  onClick,\r\n}: {\r\n  onClick: MouseEventHandler<HTMLDivElement>;\r\n}): JSX.Element => {\r\n  return (\r\n    <div className={\"return-button-container\"}>\r\n      <Button text={\"Return\"} width={300} onClick={onClick} />\r\n    </div>\r\n  );\r\n};\r\nfunction propertiesAreEqual(\r\n  previousProperties: Readonly<PropsWithChildren<ViewCardProperties>>,\r\n  nextProperties: Readonly<PropsWithChildren<ViewCardProperties>>\r\n): boolean {\r\n  return true;\r\n}\r\n\r\nexport default React.memo(ViewCard);\r\n","import IXDrop from '../IXDrop';\nimport React, { useState } from 'react';\nimport ViewCard from './ViewCard/ViewCard';\nimport { DndTypes } from '../../enums';\nimport { Layouts, Responsive, WidthProvider } from 'react-grid-layout';\nimport '../../css/cardLayout.css';\n\ntype GuideGridSettings = Partial<ReactGridLayout.ResponsiveProps>\n\nexport const GuideGrid = ({cards, gridSettings, layout}:{ cards: string[], gridSettings: GuideGridSettings, layout?: Layouts}): JSX.Element => {\n  const ResponsiveGridLayout = WidthProvider(Responsive);\n\n  return (\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          zIndex: 0,\n        }}\n      >\n          <ResponsiveGridLayout\n            {...gridSettings}\n            className=\"card-layout\"\n            layouts={layout}\n            resizeHandles={[]}\n            preventCollision={true}\n            isDraggable={false}\n            isResizable={false}\n          >\n            {cards.map((p, index) => {\n              return (\n                <div key={p}>\n                  <IXDrop\n                    key={index}\n                    droppableId={p}\n                    cardType={DndTypes.PLACEHOLDER}\n                    className = {\"droppable-guide\"}\n                  >\n                    <ViewCard\n                      key={p}\n                      cardId={p}\n                      cardType={DndTypes.PLACEHOLDER}\n                    ></ViewCard>\n                  </IXDrop>\n                </div>\n              );\n            })}\n          </ResponsiveGridLayout>\n      </div>\n  );\n};\nexport default React.memo(GuideGrid);\n\n","import CardData from \"../../data_structs/CardData\";\nimport Clock from \"../Clock\";\nimport defaultLayouts from \"../../static/defaultLayouts\";\nimport IFrameView from \"../IFrameView\";\nimport IXDrop from \"../IXDrop\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport ViewCard from \"./ViewCard/ViewCard\";\nimport { AppMode, DndTypes } from \"../../enums\";\nimport { Layout, Layouts, Responsive, WidthProvider } from \"react-grid-layout\";\nimport { useStoreActions, useStoreState } from \"../../hooks\";\nimport \"../../css/cardLayout.css\";\nimport \"../../css/libs/reactDraggable.css\";\nimport type { GridPosition } from \"../../interfaces/GridPosition\";\nimport GuideGrid from \"./GuideGrid\";\n\nexport const CardGrid = (): JSX.Element => {\n  const rows = 3;\n  const cols = 4;\n  const viewModeState = useStoreState((state) => state.appModel.appMode);\n  const setBufferLayoutAction = useStoreActions(\n    (actions) => actions.layoutsModel.setBufferLayout\n  );\n\n  const currentLayoutState = useStoreState(\n    (state) => state.layoutsModel.activeLayout\n  );\n  //use the size of the window in order to set the height of the cards\n  const [size, setSize] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight,\n  });\n\n  const isEditMode = useMemo(() => {\n    return viewModeState === AppMode.EDIT;\n  }, [viewModeState]);\n\n  const activeCards = useStoreState((state) => state.appModel.activeCards);\n  const [placeholderCards, setPlaceholderCards] = useState<string[]>([]);\n  const [filledLayout, setFilledLayout] = useState(defaultLayouts);\n  const [realLayout, setRealLayout] = useState(currentLayoutState?.layout);\n\n  //keep a local mutable reference to a layout in order to avoid making excess calls to store and causing re-renders on each new edit\n  const localLayout = useRef<null | Layouts>(null);\n\n  //each card has a unique key. Clicking a card sets the current active key. If a card's key is equal to the active key\n  //then it will be rendered into the modal popup\n  const activeKeyReference = useRef(\"\");\n\n  const removeItem = (id: string, layout: Layouts): void => {\n    const old = { ...localLayout.current };\n    if (old) {\n      for (const [k, v] of Object.entries(old)) {\n        old[k] = v.filter((l) => l.i !== id);\n      }\n    }\n    localLayout.current = old;\n  };\n\n  const ResponsiveGridLayout = WidthProvider(Responsive);\n\n  useEffect(() => {\n    const allBlank = generateFilledLayout(rows, cols);\n    const justPlaceholders = allBlank.lg\n      .filter((l) => l.i.startsWith(\"empty\"))\n      .map((l) => l.i);\n    setPlaceholderCards(justPlaceholders);\n    setFilledLayout(allBlank);\n    setRealLayout(currentLayoutState?.layout);\n    if (currentLayoutState?.layout) {\n      localLayout.current = currentLayoutState?.layout;\n    }\n  }, [activeCards, currentLayoutState]);\n  useEffect(() => {}, [realLayout]);\n\n  const sharedGridSettings = {\n    breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n    cols: { lg: 4, md: 4, sm: 4, xs: 4, xxs: 4 },\n    rowHeight: size.y / 3.5,\n    margin: [20, 20] as [number, number],\n    preventCollision: true,\n    compactType: null,\n  };\n\n  return (\n    <div>\n      <div className=\"card-grid-container\">\n        <ResponsiveGridLayout\n          {...sharedGridSettings}\n          className=\"card-layout\"\n          layouts={realLayout}\n          resizeHandles={[\"se\"]}\n          preventCollision={true}\n          verticalCompact={true}\n          isBounded={true}\n          onDragStart={(layout, oldItem, newItem, placeholder, e, element) => {\n            console.log(oldItem);\n            console.log(newItem);\n            console.log(e);\n            const previousStyle = element.style;\n            previousStyle.border = \"2px solid cyan\";\n            element.style.border = \"4px solid cyan\";\n          }}\n          onDragStop={(layout, oldItem, newItem, placeholder, e, element) => {\n            console.log(oldItem);\n            console.log(newItem);\n            // const previousStyle = element.style;\n            // previousStyle.border = \"2px solid cyan\";\n            // element.style.border = \"4px solid cyan\";\n          }}\n          onLayoutChange={(l) => {\n            console.log(l);\n            const newLayout: Layouts = {\n              lg: l,\n              md: l,\n              sm: l,\n              xs: l,\n              xxs: l,\n            };\n            localLayout.current = newLayout;\n            setBufferLayoutAction(localLayout.current);\n          }}\n          isDraggable={isEditMode}\n          isResizable={isEditMode}\n        >\n          <div key={\"clock\"}>\n            <ViewCard\n              cardType={DndTypes.CLOCK}\n              onClick={() => {\n                console.log(\"clock clicked\");\n              }}\n            >\n              {(scale) => {\n                return <Clock />;\n              }}\n            </ViewCard>\n          </div>\n\n          {activeCards.map((card: CardData, index: number) => {\n            return (\n              <div\n                key={card.sourceId}\n                draggable={true}\n                className={cardContainerClass(card, viewModeState)}\n              >\n                <IXDrop\n                  key={index}\n                  droppableId={card.sourceId}\n                  cardType={DndTypes.IFRAME}\n                  className={\"droppable-card\"}\n                >\n                  <ViewCard\n                    cardType={DndTypes.IFRAME}\n                    data={card}\n                    key={index.toString()}\n                    cardId={index.toString()}\n                    onClick={() => {\n                      activeKeyReference.current = index.toString();\n                    }}\n                    activeKey={activeKeyReference}\n                  >\n                    {(scale) => {\n                      return (\n                        <IFrameView card={card} src={card.src} scale={scale} />\n                      );\n                    }}\n                    {/* <IFrameView card = {card} src={card.src} /> */}\n                  </ViewCard>\n                </IXDrop>\n              </div>\n            );\n          })}\n        </ResponsiveGridLayout>\n      </div>\n      <GuideGrid\n        layout={filledLayout}\n        gridSettings={sharedGridSettings}\n        cards={placeholderCards}\n      ></GuideGrid>\n    </div>\n  );\n};\nexport default React.memo(CardGrid);\n\nconst cardContainerClass = (card: CardData, appMode: AppMode): string => {\n  const isFailed = card.failed;\n  if (isFailed && appMode === AppMode.DISPLAY) {\n    return \"card-container-hidden\";\n  } else if (isFailed && appMode === AppMode.EDIT) {\n    return \"card-container-error\";\n  } else {\n    return \"card-container\";\n  }\n};\n\nfunction generateFilledLayout(rows: number, cols: number): Layouts {\n  const allGridSpots: GridPosition[] = [];\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      allGridSpots.push({ x: x, y: y });\n    }\n  }\n\n  const emptyCards = allGridSpots.map((rr) => {\n    return {\n      x: rr.x,\n      y: rr.y,\n      w: 1,\n      h: 1,\n      i: `empty_card_[${rr.x}, ${rr.y}]`,\n      minW: 1,\n      maxW: 1,\n      minH: 1,\n      maxH: 1,\n      static: false,\n      // static: true,\n      isDraggable: false,\n      isResizable: false,\n      resizeHandles: [],\n    } as Layout;\n  });\n\n  //TODO: MORE FUNCTIONAL SOLUTION\n  // const filled = layout.concat(emptyCards);\n  //pop off the first two positions where the clock is\n  emptyCards.shift();\n  emptyCards.shift();\n  return {\n    lg: emptyCards,\n    md: emptyCards,\n    sm: emptyCards,\n    xs: emptyCards,\n    xxs: emptyCards,\n  };\n}\n\nfunction findFilledPositions(layouts: Layout[]): GridPosition[] {\n  const takenSpots: GridPosition[] = [];\n  for (const l of layouts) {\n    takenSpots.push({ x: l.x, y: l.y });\n    for (let index = 1; index < l.w; index++) {\n      const fullSpotX: GridPosition = {\n        x: l.x + index,\n        y: l.y,\n      };\n      takenSpots.push(fullSpotX);\n    }\n    for (let index = 1; index < l.h; index++) {\n      const fullSpotY: GridPosition = {\n        x: l.x,\n        y: l.y + index,\n      };\n      takenSpots.push(fullSpotY);\n    }\n  }\n  return takenSpots;\n}\n","const TestShader1 = {\n    uniforms: {\n      time: { value: 0.0 }\n    },\n    vertexShader: `\n    vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n  \n    float snoise(vec2 v) {\n        const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                            -0.577350269189626,  // -1.0 + 2.0 * C.x\n                            0.024390243902439); // 1.0 / 41.0\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n        vec2 i1;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n            + i.x + vec3(0.0, i1.x, 1.0 ));\n  \n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n  \n  \n    \n  \n    uniform float u_time;\n    uniform vec2 u_randomisePosition;\n  \n    varying float vDistortion;\n    varying float xDistortion;\n    varying vec2 vUv;\n  \n    void main() {\n        vUv = uv;\n        vDistortion = snoise(vUv.xx * 3. - u_randomisePosition * 0.15);\n        xDistortion = snoise(vUv.yy * 1. - u_randomisePosition * 0.05);\n        vec3 pos = position;\n        pos.z += (vDistortion * 35.);\n        pos.x += (xDistortion * 25.);\n  \n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n    }\n    `,\n    fragmentShader: `\n    vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n  \n    float snoise(vec2 v) {\n        const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                            -0.577350269189626,  // -1.0 + 2.0 * C.x\n                            0.024390243902439); // 1.0 / 41.0\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n        vec2 i1;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n            + i.x + vec3(0.0, i1.x, 1.0 ));\n  \n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n  \n  \n  \n  \n  \n    vec3 rgb(float r, float g, float b) {\n      return vec3(r / 255., g / 255., b / 255.);\n  }\n  \n  vec3 rgb(float c) {\n      return vec3(c / 255., c / 255., c / 255.);\n  }\n  \n  uniform vec3 u_bg;\n  uniform vec3 u_bgMain;\n  uniform vec3 u_color1;\n  uniform vec3 u_color2;\n  uniform float u_time;\n  \n  varying vec2 vUv;\n  varying float vDistortion;\n  \n  void main() {\n      vec3 bg = rgb(u_bg.r, u_bg.g, u_bg.b);\n      vec3 c1 = rgb(u_color1.r, u_color1.g, u_color1.b);\n      vec3 c2 = rgb(u_color2.r, u_color2.g, u_color2.b);\n      vec3 bgMain = rgb(u_bgMain.r, u_bgMain.g, u_bgMain.b);\n  \n      float noise1 = snoise(vUv + u_time * 0.08);\n      float noise2 = snoise(vUv * 2. + u_time * 0.1);\n  \n      vec3 color = bg;\n      color = mix(color, c1, noise1 * 0.6);\n      color = mix(color, c2, noise2 * .4);\n  \n      color = mix(color, mix(c1, c2, vUv.x), vDistortion);\n  \n      float border = smoothstep(0.1, 0.6, vUv.x);\n  \n      color = mix(color, bgMain, 1. -border);\n  \n      gl_FragColor = vec4(color, 1.0);\n  }\n    `\n  }\n  \n  export default TestShader1","import type GoogleSheet from \"./interfaces/GoogleSheet\";\nimport type SheetId from \"./interfaces/SheetId\";\n\n// export function getSheet<T>(sheetId: SheetId): Promise<GoogleSheet<T>> {\n//   return new Promise<GoogleSheet<T>>(function (resolve, reject) {\n//     fetch(\n//       \"https://spreadsheets.google.com/feeds/list/1wQ1TGqnCTmaqqDak1rTRxPMSGSGLMilwrecf7TuqDGc/1/public/values?alt=json\"\n//     ).then((res) => {\n//       console.log(res);\n//       res.json();\n//     });\n//     // labeledCols(sheetId.key, sheetId.sheet_number)\n//     GetSheetDone.labeledCols(sheetId.key, sheetId.sheet_number)\n//       .then((sheet: GoogleSheet<T>) => {\n//         console.log(sheet);\n//         resolve(sheet);\n//       })\n//       .catch((error: unknown) => {\n//         console.error(\n//           `Error: ${error} fetching DOC_KEY ${sheetId.key}, sheet number ${sheetId.sheet_number}`\n//         );\n//       });\n//   });\n// }\n\nexport function formatDate(date: Date | undefined): string {\n  if (date) {\n    const d = new Date(date);\n    let month = \"\" + (d.getMonth() + 1);\n    let day = \"\" + d.getDate();\n    const year = d.getFullYear();\n\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n\n    return [year, month, day].join(\"-\");\n  } else {\n    return \"faulty date\";\n  }\n}\n\n// String.prototype.toTitleCase = function () { return this.valueOf().toLowerCase().replace(this.valueOf()[0], this.valueOf()[0].toUpperCase()); }\nexport function toTitleCase(str: string) {\n  const words = str.split(\" \");\n  const title = words.map((w) => titleCapitilization(w)).join(\" \");\n  return title;\n}\nfunction titleCapitilization(str: string) {\n  const regex = /^[a-z]{0,1}|\\s\\w/gi;\n\n  str = str.toLowerCase();\n\n  str.match(regex)?.forEach((char) => {\n    str = str.replace(char, char.toUpperCase());\n  });\n\n  return str;\n}\n\nexport function randomIntFromInterval(min: number, max: number) { // min and max included \n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n\n// function\n\n// const toTitleCase = (str: string) => {\n//   const articles = ['a', 'an', 'the'];\n//   const conjunctions = ['for', 'and', 'nor', 'but', 'or', 'yet', 'so'];\n//   const prepositions = [\n//     'with', 'at', 'from', 'into','upon', 'of', 'to', 'in', 'for',\n//     'on', 'by', 'like', 'over', 'plus', 'but', 'up', 'down', 'off', 'near'\n//   ];\n\n//   // The list of spacial characters can be tweaked here\n//   const replaceCharsWithSpace = (str) => str.replace(/[^0-9a-z&/\\\\]/gi, ' ').replace(/(\\s\\s+)/gi, ' ');\n//   const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.substr(1);\n//   const normalizeStr = (str) => str.toLowerCase().trim();\n//   const shouldCapitalize = (word, fullWordList, posWithinStr) => {\n//     if ((posWithinStr == 0) || (posWithinStr == fullWordList.length - 1)) {\n//       return true;\n//     }\n\n//     return !(articles.includes(word) || conjunctions.includes(word) || prepositions.includes(word));\n//   }\n\n//   str = replaceCharsWithSpace(str);\n//   str = normalizeStr(str);\n\n//   let words = str.split(' ');\n//   if (words.length <= 2) { // Strings less than 3 words long should always have first words capitalized\n//     words = words.map(w => capitalizeFirstLetter(w));\n//   }\n//   else {\n//     for (let i = 0; i < words.length; i++) {\n//       words[i] = (shouldCapitalize(words[i], words, i) ? capitalizeFirstLetter(words[i], words, i) : words[i]);\n//     }\n//   }\n\n//   return words.join(' ');\n// }\n","import React, { useRef } from 'react'\nimport { Canvas, useFrame, } from '@react-three/fiber'\n\nimport TestShader1 from './TestShader1'\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei'\nimport * as THREE from 'three'\nimport {randomIntFromInterval} from \"../../utils\"\nvar randomisePosition = new THREE.Vector2(1, 2)\n\nfunction rgb(r, g, b) {\n  return new THREE.Vector3(r, g, b)\n}\n\nconst segmentsResolution = 45\n\nconst baseColors = {\n  pink: rgb(182, 9, 76),\n  brightPink: rgb(241, 3, 66),\n  darkPurple: rgb(42, 8, 56),\n  orange: rgb(244, 93, 31),\n  darkgrey: rgb(50,50,50),\n  lightgrey: rgb(150,150,150),\n  red: rgb(204, 0, 0)\n}\n\nconst uniforms = {\n  u_bg: { type: 'v3', value: baseColors.lightgrey },\n  u_bgMain: { type: 'v3', value: baseColors.lightgrey },\n  u_color1: { type: 'v3', value: baseColors.lightgrey },\n  u_color2: { type: 'v3', value: baseColors.lightgrey },\n  u_time: { type: 'f', value: 0 },\n  u_randomisePosition: { type: 'v2', value: randomisePosition }\n}\nconst R = function (x, y, t) {\n  return Math.floor(192 + 64 * Math.cos((x * x - y * y) / 300 + t))\n}\n\nconst G = function (x, y, t) {\n  return Math.floor(192 + 64 * Math.sin((x * x * Math.cos(t / 4) + y * y * Math.sin(t / 3)) / 300))\n}\n\nconst B = function (x, y, t) {\n  return Math.floor(192 + 64 * Math.sin(5 * Math.sin(t / 9) + ((x - 100) * (x - 100) + (y - 100) * (y - 100)) / 1100))\n}\n\nconst ShadedGeometry1 = ({ position }) => {\n  const shaderMaterialRef = useRef()\n  let t = 0\n  let j = 0\n  \n  let x = randomIntFromInterval(0,32)\n  let y = randomIntFromInterval(0, 32)\n  let vCheck = false\n\n  useFrame(({ clock }) => {\n    shaderMaterialRef.current.uniforms.u_randomisePosition.value = new THREE.Vector2(j, j)\n    shaderMaterialRef.current.uniforms.u_color1.value = new THREE.Vector3(R(x, y, t / 2), G(x, y, t / 2), B(x, y, t / 2))\n\n    shaderMaterialRef.current.uniforms.u_time.value = t\n    if (t % 0.1 === 0) {\n      if (vCheck === false) {\n        x -= 1\n        if (x <= 0) {\n          vCheck = true\n        }\n      } else {\n        x += 1\n        if (x >= 32) {\n          vCheck = false\n        }\n      }\n    }\n    // Increase t by a certain value every frame\n    j = j + 0.01\n    t = t + 0.01\n  })\n\n  return (\n    <mesh position={position} rotation={[THREE.MathUtils.degToRad(0), THREE.MathUtils.degToRad(0), THREE.MathUtils.degToRad(90)]}>\n      <planeGeometry attach=\"geometry\" args={[400, window.innerWidth / 2, segmentsResolution, segmentsResolution]} />\n      <shaderMaterial\n        attach=\"material\"\n        vertexShader={TestShader1.vertexShader}\n        fragmentShader={TestShader1.fragmentShader}\n        uniforms={uniforms}\n        ref={shaderMaterialRef}\n      />\n    </mesh>\n  )\n}\n\nconst BackgroundShader = () => {\n  const cam = useRef()\n  return (\n    <Canvas gl={{ antialias: false, alpha: false }}>\n      <PerspectiveCamera ref={cam} position={[0, 0, 0]} fov={75} aspect={window.innerWidth / window.innerHeight} near={0.1} far={1000} />\n      <ShadedGeometry1 position={[0, 0, -100]} faceResolution={100} />\n      <OrbitControls />\n    </Canvas>\n  )\n}\n\nexport default BackgroundShader\n","import React, { useEffect, useState } from 'react';\nimport { AppMode } from '../enums';\nimport { useStoreState } from '../hooks';\nimport '../css/background.css';\nimport classNames from 'classnames';\nimport BackgroundShader from \"./Background/BackgroundShader\"\nimport ReactDOM from 'react-dom';\n\n\nconst Background = (): JSX.Element => {\n  const viewMode = useStoreState((state) => state.appModel.appMode);\n  const [size, setSize] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight,\n  });\n\n  const [backgroundStyle, setBackgroundStyle] = useState({\n    backgroundColor: \"gray\",\n  } as React.CSSProperties);\n  useEffect(() => {\n    const isEditMode = viewMode == AppMode.EDIT;\n\n    const style = {\n      position: \"absolute\",\n      height: \"100vh\",\n      width: \"100vw\",\n      top: 0,\n      left: 0,\n      backgroundColor: isEditMode ? \"white\" : \"gray\",\n      transition: \"background-color 0.5s ease\",\n    } as React.CSSProperties;\n    setBackgroundStyle(style);\n  }, [viewMode]);\n\n  const backgroundClass = classNames(\"background-container\",{\n    \"background-container-display-mode\": viewMode == AppMode.DISPLAY,\n    \"background-container-edit-mode\": viewMode == AppMode.EDIT,\n  })\n\n\n  const bgFillSolid = {\n    position: \"absolute\",\n    height: \"100vh\",\n    width: \"100vw\",\n    top: 0,\n    left: 0,\n    backgroundColor: \"lightgrey\",\n    transition: \"background-color 0.5s ease\",\n  } as React.CSSProperties;\n\n\n  return ReactDOM.createPortal(\n    <div style={backgroundStyle} className = {backgroundClass} >\n      {viewMode === AppMode.EDIT ? (\n        <div style={bgFillSolid}></div>\n      ) : (\n        <div className = \"background-container\">\n        <div className = \"shader-container\">\n        <BackgroundShader/>\n        </div>\n        <div className = \"particle-container\">\n        </div>\n        </div>\n      )}\n    </div>,     document.querySelector(\"#background\") as HTMLElement\n  );\n};\n\nexport default Background;\n","import React, { FC, ReactNode } from \"react\";\nimport { Draggable, DraggableProps } from \"react-beautiful-dnd\";\nimport ReactTable from \"react-table\";\nimport { DndTypes } from \"../enums\";\n\ninterface IXDrag extends Omit<DraggableProps, \"children\"> {\n  dndType: DndTypes;\n  className?: string;\n  children: ReactNode;\n  dragAll?: boolean;\n}\n\n/**\n * A draggable table row.\n * @param param0\n * @returns\n */\nconst XDrag: FC<IXDrag> = ({\n  dndType,\n  className,\n  children,\n  dragAll,\n  ...properties\n}) => {\n  console.log(React.isValidElement(children));\n  // console.log(props);\n  if (!React.isValidElement(children)) return <div />;\n  // const child = React.memo(children, []);\n  return (\n    <Draggable {...properties}>\n      {(provided, snapshot) => {\n        const dragHandleProperties = dragAll ? provided.dragHandleProps : {};\n\n        return (\n          <>\n            <tr\n              className={className}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...dragHandleProperties}\n              // style = {{\n              //   // display: snapshot.isDragging ? \"none\" : \"table-row\",\n              // }}\n            >\n              {React.cloneElement(children, { provided })}\n            </tr>\n            <tr\n              style={{\n                display: snapshot.isDragging ? \"table-row\" : \"none\",\n                backgroundColor: snapshot.isDragging ? \"green\" : \"none\",\n              }}\n            >\n              {React.cloneElement(children, { provided })}\n            </tr>\n          </>\n        );\n      }}\n    </Draggable>\n  );\n};\n\nXDrag.defaultProps = {\n  dragAll: true,\n};\n\nexport default React.memo(XDrag);\n","import React, { useState, useEffect } from \"react\";\nimport { toTitleCase } from \"../../utils\";\n/**\n * Wraps an Evergreen UI Button.\n * @component\n */\nconst TableHeader = ({\n  propName,\n  setFilter,\n  setFilterDirection,\n  className,\n  activeFilter,\n}: {\n  propName: string;\n  setFilterDirection: (dir: boolean) => void;\n  setFilter: (str: string) => void;\n  className?: string;\n  activeFilter: string | undefined;\n}): JSX.Element => {\n  const [sortDirection, setSortDirection] = useState(true);\n  const [sortVisibility, setSortVisibility] = useState(false);\n  const title = toTitleCase(propName);\n  useEffect(() => {\n    propName === activeFilter\n      ? setSortVisibility(true)\n      : setSortVisibility(false);\n  }, [activeFilter]);\n  return (\n    <th\n      className={className ?? \"editor-panel-table-header\"}\n      onClick={() => {\n        setFilter(propName);\n        setSortDirection(!sortDirection);\n        setFilterDirection(sortDirection);\n      }}\n    >\n      {title}\n      {sortVisibility && sortDirection\n        ? \"▲\"\n        : sortVisibility && !sortDirection\n        ? \"▼\"\n        : \"\"}\n    </th>\n  );\n};\n\nexport default TableHeader;\n// ▲▲▲\n// ▼▼▼\n\nenum SortState {\n  UP = \"UP\",\n  DOWN = \"DOWN\",\n  OFF = \"OFF\",\n}\n","enum IFrameLoadError {\n  CROSS_ORIGIN = \"CROSS_ORIGIN\",\n}\n\nenum IFrameLoadWarning {\n  MALFORMED_URL = \"MALFORMED_URL\",\n}\n\nclass IFrameValidator {\n  url!: string;\n  errors!: IFrameLoadError[];\n  warnings!: IFrameLoadWarning[];\n  constructor(url: string) {\n    this.errors = [];\n    this.warnings = [];\n    this.url = url;\n  }\n  validate(event: React.SyntheticEvent<HTMLIFrameElement, Event>): void {\n    console.log(this.errors);\n    const malformedUrlCheckArray = validURL(this.url);\n    this.warnings.push(...malformedUrlCheckArray);\n    console.log(malformedUrlCheckArray);\n  }\n  isValid(): boolean {\n    return this.errors.length == 0;\n  }\n  errorMessages(): string[] {\n    let errors: string[] = [];\n    this.errors.map((e) => {\n      switch (e) {\n        case IFrameLoadError.CROSS_ORIGIN:\n          errors.push(\n            `Blocked a frame with origin ${this.url}; from accessing a cross-origin frame.`\n          );\n          break;\n        default:\n          console.log(\"error did not match an error enum\");\n      }\n    });\n    return errors;\n  }\n}\n\nexport default IFrameValidator;\n\n\n\nfunction validURL(str: string): IFrameLoadWarning[] {\n  let warningsArray = [];\n  const pattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n      \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n      \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n      \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  if (!pattern.test(str)) {\n    warningsArray.push(IFrameLoadWarning.MALFORMED_URL);\n  }\n  return warningsArray;\n}\n","import React, { useState, useEffect, useRef, FC } from \"react\";\nimport { useStoreState } from \"../../../../hooks\";\nimport IXDrop from \"../../../IXDrop\";\nimport XDrag from \"../../../XDrag\";\nimport CardData from \"../../../../data_structs/CardData\";\nimport \"../../../../css/table.css\";\nimport { SearchInput, Menu, StatusIndicator } from \"evergreen-ui\";\nimport fuzzysort from \"fuzzysort\";\nimport TableHeader from \"../../TableHeader\";\nimport UseTip from \"../UseTip\";\nimport { DndTypes, DragSource } from \"../../../../enums\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport { formatDate } from \"../../../../utils\";\n/**\n * Content tab display a list of the availalbe cards, and search bar for quickly finding cards by their title.\n * @returns\n */\n\nconst ContentsTab: FC = () => {\n  const availableCards = useStoreState(\n    (state) => state.appModel.availableCards\n  );\n  const [filterKey, setFilterKey] = useState<string | undefined>();\n  const [filterDirection, setFilterDirection] = useState(true);\n  const [cardItems, setCardItems] = useState(availableCards);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTr, setSelectedTr] = useState(null);\n  const [filteredCards, setFilteredCards] =\n    useState<CardData[]>(availableCards);\n\n  //use search input to filter cards\n  useEffect(() => {\n    if (searchTerm.length > 0) {\n      const sortResult = fuzzysort.go(\n        searchTerm,\n        cardItems.map((c) => c.title)\n      );\n      // let filtered = sortResult.map((s) => s.);\n      const aboveThreshholdCardTitles: string[] = sortResult.map(\n        (s) => s.target\n      );\n      // console.log(aboveThreshholdCardTitles);\n      const filtered = cardItems.filter((c) =>\n        aboveThreshholdCardTitles.includes(c.title)\n      );\n      setFilteredCards(filtered);\n    } else {\n      setFilteredCards(cardItems);\n    }\n  }, [searchTerm, cardItems]);\n\n  //sort values by column attribute, if filterDirection is true, sort descending, else sort ascending\n  useEffect(() => {\n    const key = filterKey as keyof CardData;\n    const clone = [...availableCards];\n\n    const sortedItems = clone.sort((a, b) => {\n      const aText = a[key];\n      const bText = b[key];\n      if (aText && bText) {\n        if (aText < bText) {\n          return -1;\n        }\n        if (aText > bText) {\n          return 1;\n        }\n      }\n      return 0;\n    });\n    !filterDirection ? sortedItems.reverse() : null;\n    setCardItems(sortedItems);\n  }, [filterKey, availableCards, filterDirection]);\n\n  const contentTabHeader = \"contents-table-header\";\n  return (\n    <div className={\"contents-tab-container\"}>\n      <div style={{ padding: \"0.5em\" }}>\n        <SearchInput\n          width={\"100%\"}\n          onChange={(e: React.FormEvent<HTMLInputElement>) =>\n            setSearchTerm(e.currentTarget.value)\n          }\n          placeholder={\"search title\"}\n        ></SearchInput>\n      </div>\n      <IXDrop\n        className={\"table-container\"}\n        droppableId={DragSource.CARD_TABLE}\n        isDropDisabled={true}\n        cardType={DndTypes.CLOCK}\n      >\n        <table className={\"contents-tab-table\"}>\n          <tbody>\n            <tr>\n              {[\"title\", \"added\", \"sourceId\", \"author\", \"interaction\"].map(\n                (s, i) => {\n                  return (\n                    <TableHeader\n                      key={i}\n                      className={contentTabHeader}\n                      propName={s}\n                      setFilter={setFilterKey}\n                      activeFilter={filterKey}\n                      setFilterDirection={setFilterDirection}\n                    ></TableHeader>\n                  );\n                }\n              )}\n            </tr>\n          </tbody>\n        </table>\n        <Scrollbars\n          autoHeight\n          autoHeightMin={100}\n          autoHeightMax={319}\n          onScrollFrame={(v) => console.log(v)}\n        >\n          <table style={{ padding: \"2em\" }}>\n            <tbody>\n              {filteredCards.map((card, index) => {\n                const { added, src, author, interaction, sourceId, isActive } =\n                  card;\n                console.log(isActive);\n                return (\n                  <XDrag\n                    dndType={DndTypes.CARD_ROW}\n                    draggableId={sourceId}\n                    index={index}\n                    key={index.toString()}\n                    isDragDisabled={isActive}\n                    className={\n                      isActive ? \"content-row-active\" : \"content-row-inactive\"\n                    }\n                  >\n                    <>\n                      <td>\n                        <TitleWithIcon card={card} />\n                      </td>\n                      <td>{formatDate(added)}</td>\n                      <td>{src}</td>\n                      <td>{author}</td>\n                      <td>{interaction}</td>\n                    </>\n                  </XDrag>\n                );\n              })}\n            </tbody>\n          </table>\n        </Scrollbars>\n      </IXDrop>\n    </div>\n  );\n};\n\ninterface CardTitleProperties {\n  card: CardData;\n}\n\n/**\n * Fetches a favicon for a card and displays the cards title\n * @param card\n * @returns\n */\nconst TitleWithIcon = ({ card }: { card: CardData }): JSX.Element => {\n  return (\n    <div style={{ display: \"flex\" }}>\n      <img\n        className={\n          card.isActive ? \"row-favicon-active\" : \"row-favicon-inactive\"\n        }\n        src={`https://s2.googleusercontent.com/s2/favicons?domain_url=${card.src}`}\n      ></img>\n      <div\n        style={{\n          marginTop: \"auto\",\n          marginBottom: \"auto\",\n          textAlign: \"left\",\n        }}\n      >\n        {card.src}\n      </div>\n    </div>\n  );\n};\n\nexport default ContentsTab;\n","import React, { useState, useEffect } from \"react\";\nimport { useStoreState, useStoreActions } from \"../../../../hooks\";\nimport IXDrop from \"../../../IXDrop\";\nimport XDrag from \"../../../XDrag\";\nimport { DndTypes, DragSource } from \"../../../../enums\";\nimport { StatusIndicator } from \"evergreen-ui\";\nimport { formatDate } from \"../../../../utils\";\nimport \"../../../../css/table.css\";\n/**\n * Table for displaying the available card layouts\n * @returns\n */\n\nconst LayoutTable = (): JSX.Element => {\n  const externalLayoutsState = useStoreState(\n    (state) => state.layoutsModel.externalLayouts\n  );\n  const activeLayoutState = useStoreState(\n    (state) => state.layoutsModel.activeLayout\n  );\n  return (\n    <div>\n      <IXDrop\n        className={\"table-container\"}\n        droppableId={DragSource.LAYOUT_TABLE}\n        isDropDisabled={false}\n        cardType={DndTypes.CLOCK}\n      >\n        <table>\n          <tbody>\n            <tr>\n              <th>Title</th>\n              <th>Date Added</th>\n              <th>Author</th>\n            </tr>\n          </tbody>\n        </table>\n        <table>\n          <tbody>\n            {externalLayoutsState.map((l, index) => {\n              const { id, title, author, added } = l;\n              return (\n                <XDrag\n                  dndType={DndTypes.LAYOUT}\n                  draggableId={id}\n                  index={index}\n                  key={index.toString()}\n                  isDragDisabled={false}\n                  className={\n                    id === activeLayoutState?.id\n                      ? \"layout-row-active\"\n                      : \"layout-row-inactive\"\n                  }\n                >\n                  <>\n                    <td key={index}>\n                      {id === activeLayoutState?.id ? (\n                        <StatusIndicator color=\"success\" />\n                      ) : (\n                        <></>\n                      )}\n                      {title}\n                    </td>\n                    <td>{formatDate(added)}</td>\n                    <td>{author}</td>\n                  </>\n                </XDrag>\n              );\n            })}\n          </tbody>\n        </table>\n      </IXDrop>\n    </div>\n  );\n};\n\nexport default LayoutTable;\n","import React, { useState, useRef, useEffect } from \"react\";\n//TODO: UNIFY MODAL CSS\nimport \"../../css/howToUse.css\";\nimport \"../../css/popup.css\";\n\nconst Modal = ({\n  children,\n  active,\n  containerClassName,\n  onClose,\n  backdropOpacity,\n}: {\n  active: boolean;\n  children: JSX.Element | JSX.Element[];\n  containerClassName: string;\n  onClose: () => void;\n  backdropOpacity?: number;\n}): JSX.Element => {\n  return (\n    <div className={\"modal-container\"}>\n      <MyBackdrop onClose={onClose} backdropOpacity={backdropOpacity ?? 0} />\n      {/* <div className={\"popup-child-container\"}> */}\n      <div className={containerClassName}>{children}</div>\n      {/* </div> */}\n    </div>\n  );\n};\n\nexport default Modal;\n\ninterface BackdropProperties {\n  backdropOpacity: number;\n  onClose: () => void;\n}\nconst MyBackdrop = ({ onClose, backdropOpacity }: BackdropProperties) => {\n  return (\n    <div\n      onMouseUp={onClose}\n      style={{ opacity: backdropOpacity }}\n      className={\"pop-up-background\"}\n    ></div>\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"../../../../css/googleFormPopup.css\";\nimport { Pane, Dialog } from \"evergreen-ui\";\nimport Modal from \"../../../Shared/Modal\";\nimport formEmbedUrl from \"../../../../static/formEmbedUrl\";\nimport { useStoreState } from \"../../../../hooks\";\nimport classNames from \"classnames\";\nimport Button from \"../../../Shared/Button\";\nimport { ClipboardIcon, InlineAlert, CrossIcon, Heading } from \"evergreen-ui\";\nimport \"../../../../css/copyField.css\";\nimport Scrollbars from \"react-custom-scrollbars\";\n\n/**\n * Modal popup for displaying cards when in preview mode. Displays on top of the CardLayout, and renders\n * to <div id=\"google-form-popup\"></div> in index.html.\n * @component\n */\n\ninterface GoogleFormPopupProperties {\n  visible: boolean;\n  onCloseComplete: () => void;\n}\n\nconst GoogleFormPopup = ({\n  visible,\n  onCloseComplete,\n}: GoogleFormPopupProperties): JSX.Element => {\n  const layoutState = useStoreState((state) => state.layoutsModel.activeLayout);\n\n  const [isShown, setIsShown] = useState(visible);\n  const [isCopiedJSON, setIsCopiedJson] = useState(false)\n  const [layoutString, setLayoutString] = useState(\n    JSON.stringify(layoutState?.layout)\n  );\n\n  const copyString = useRef(\"\");\n\n  const copyFieldContainerClass = classNames(\"copy-field-container\", {\n    \"copy-field-container-closed\": isCopiedJSON,\n  });\n\n\n  return ReactDom.createPortal(\n    <Modal\n      onClose={onCloseComplete}\n      active={isShown}\n      containerClassName=\"google-form-popup\"\n      backdropOpacity={0.5}\n    >\n      <div className={\"google-form-popup-inner-container\"}>\n        <Heading>\n          {\n             isCopiedJSON?\"2. Fill out the form, and paste the copied text into the Content field, then submit\":\"1. Press the Copy Button\"\n          }\n        </Heading>\n        <div\n          className={copyFieldContainerClass}\n        >\n        <CopyField onCopy = {(e: React.MouseEvent<HTMLDivElement, MouseEvent>)=>{setIsCopiedJson(true)}} onCloseComplete={onCloseComplete} text={layoutString} />\n        </div>\n      </div>\n      {isCopiedJSON?\n      <GoogleFormIframe src = {formEmbedUrl}/>:<></>\n     }\n\n    </Modal>,\n    document.querySelector(\"#google-form-popup\") as HTMLElement\n  );\n};\nexport default GoogleFormPopup;\n//TODO: IMPROVE INHERITANCE OF BUTTONS\nconst CopyField = ({\n  text,\n  onCloseComplete,\n  onCopy,\n  isCurrentClipBoardContent,\n}: {\n  text: string;\n  isCurrentClipBoardContent?: boolean;\n  onCloseComplete: () => void;\n  onCopy: (e: React.MouseEvent<HTMLDivElement, MouseEvent>)=>void;\n}): JSX.Element => {\n  const [isClipBoardCorrect, setIsClipBoardCorrect] = useState(false);\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyFieldClass = classNames(\"copy-field\", {\n    \"copy-field-success\": isCopied && isClipBoardCorrect,\n    \"copy-field-failure\": !isCopied && !isClipBoardCorrect,\n  });\n\n\n  useEffect(() => {\n    navigator.clipboard\n      .readText()\n      .then((clipboardText) => {\n        if (text === clipboardText) {\n          setIsClipBoardCorrect(true);\n          setIsCopied(true);\n        } else {\n          setIsCopied(false);\n          setIsClipBoardCorrect(false);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Failed to read clipboard contents:\", error);\n      });\n  }, [text]);\n  return (\n    <div>\n      <div className={copyFieldClass}>\n        <Scrollbars autoHeightMin={0} autoHeightMax={200}>\n          {text}\n        </Scrollbars>\n      </div>\n      {!isClipBoardCorrect ? (\n        <InlineAlert intent=\"warning\">\n          Current clipboard content is out of sync with current layout, copy the\n          layout to clipboard again.\n        </InlineAlert>\n      ) : (\n        <InlineAlert intent=\"success\">Clipboard is current</InlineAlert>\n      )}\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          paddingTop: \"1em\",\n        }}\n      >\n        <Button\n          iconBefore={<ClipboardIcon />}\n          text={\"Copy Layout To Clip Board\"}\n          onClick={(e) => {\n            navigator.clipboard.writeText(text);\n            setIsCopied(true);\n            onCopy(e)\n          }}\n        />\n        <Button\n          iconBefore={<CrossIcon />}\n          text={\"Return\"}\n          onClick={onCloseComplete}\n        />\n      </div>\n    </div>\n  );\n};\n\n\nconst GoogleFormIframe = ({src}:{src: string}): JSX.Element =>{\n  return(\n    <iframe\n    src={src}\n    className = {\"google-form-iframe\"}\n    width={\"100%\"}\n    frameBorder={0}\n    marginHeight={0}\n    marginWidth={0}\n    // style={{ height: \"60em\" }}\n    ></iframe>\n  )\n}\n","const formEmbedUrl =\n  \"https://docs.google.com/forms/d/e/1FAIpQLSeKP2imQv_UCj4qrGNk7mT6Rzz83F30IvEl8ZFdERIdzSnvig/viewform?usp=sf_link\";\n\nexport default formEmbedUrl;\n","import React from \"react\";\nimport \"../../css/panel.css\";\nimport { AddIcon } from \"evergreen-ui\";\n\ninterface PanelProperties{\n    children: JSX.Element | JSX.Element[]\n    padding?: string;\n    flexDirection?: \"column\" | \"row\"; \n    className?: string;\n\n}\n\nconst Panel = ({children, className, padding, flexDirection}:PanelProperties): JSX.Element => {\n  const panelStyle = {\n      padding: padding??\"0em\",\n      flexDirection: flexDirection??\"column\"\n  } as React.CSSProperties\n\n  return (\n    <div style = {panelStyle} className={\"panel\"+ \" \" + className??\"\"}>\n        {children}\n    </div>\n  );\n};\n\nexport default Panel;\n","import React, { useState, useEffect, FC } from \"react\";\nimport LayoutTable from \"./LayoutTable\";\nimport formEmbedUrl from \"../../../../static/formEmbedUrl\";\nimport {\n  DocumentIcon,\n} from \"evergreen-ui\";\nimport Button from \"../../../Shared/Button\";\nimport GoogleFormPopup from \"./GoogleFormPopup\";\nimport { useStoreState, useStoreActions } from \"../../../../hooks\";\nimport Panel from \"../../../Shared/Panel\"; \n\nconst LayoutTab: FC = () => {\n  const layoutState = useStoreState((state) => state.layoutsModel.activeLayout);\n  const bufferState = useStoreState((state) => state.layoutsModel.bufferLayout);\n  const [isShown, setIsShown] = useState(false);\n  const fetchCardDataGoogleSheetThunk = useStoreActions(\n    (actions) => actions.googleSheetsModel.fetchAppGoogleSheet\n  );\n  const [layoutString, setLayoutString] = useState(JSON.stringify(layoutState));\n  useEffect(() => {\n    setLayoutString(JSON.stringify(bufferState));\n  }, [layoutState, bufferState]);\n\n  return (\n    <>\n      <Panel>\n      <div style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\" }}>\n        <Button\n          iconBefore={<DocumentIcon />}\n          text={\"Add New Layout\"}\n          onClick={(e) => {\n            setIsShown(true);\n          }}\n          width={400}\n        />\n      </div>\n      {isShown ? (\n        <GoogleFormPopup\n          onCloseComplete={() => {\n            //reload the layouts after closing the add layout dialog\n            fetchCardDataGoogleSheetThunk()\n            setIsShown(false);\n          }}\n          visible={isShown}\n        />\n      ) : (\n        <></>\n      )}\n      <div>\n        <LayoutTable />\n      </div>\n      </Panel>\n    </>\n\n  );\n};\n\nexport default LayoutTab;\n","import React from \"react\";\nimport { Heading } from \"evergreen-ui\";\nimport DropDownMenu from \"../Shared/DropDownMenu\";\nimport { AppMode } from \"../../enums\";\nimport \"../../css/editorPanel.css\";\nimport ContentTable from \"./EditorTabs/ContentsTab/ContentsTab\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport PerformanceTests from \"./EditorSection/PerformanceTests\";\nimport LayoutTab from \"./EditorTabs/LayoutTab/LayoutTab\";\n// https://github.com/goodoldneon/react-drag-and-dock#api\n\nconst Editor = (): JSX.Element => {\n  return (\n    <div className=\"editor-form-container\">\n      <Tabs>\n        <TabList>\n          <Tab>Content</Tab>\n          <Tab>Layouts</Tab>\n        </TabList>\n        <TabPanel>\n          <ContentTable />\n        </TabPanel>\n        <TabPanel>\n          <LayoutTab />\n        </TabPanel>\n      </Tabs>\n    </div>\n  );\n};\n\ninterface FormSectionProperties {\n  title: string;\n  children: JSX.Element | JSX.Element[];\n}\nconst FormSection = ({ title, children }: FormSectionProperties) => {\n  return (\n    <div className={\"form-section-container\"}>\n      <div className={\"form-section-header\"}>\n        <Heading size={500}>{title}</Heading>\n      </div>\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>{children}</div>\n    </div>\n  );\n};\n\nexport default Editor;\n","import React, { useState, FC } from \"react\";\nimport Draggable from \"react-draggable\";\nimport ReactDom from \"react-dom\";\nimport Editor from \"./Editor\";\nimport {\n  PlusIcon,\n  MinusIcon,\n} from \"evergreen-ui\";\nimport { useStoreState, useStoreActions } from \"../../hooks\";\nimport \"../../css/editorPanel.css\";\nimport classNames from \"classnames\";\nimport { AppMode } from \"../../enums\";\n\n// https://github.com/goodoldneon/react-drag-and-dock#api\n\ninterface EditorPanelProperties {\n  visible: boolean;\n}\n\nconst EditorPanel: FC = () => {\n  const [minimized, setMinimized] = useState(false);\n  const viewModeState = useStoreState((state) => state.appModel.appMode);\n\n  const editorPanelClass = classNames(\"editor-panel\", {\n    \"editor-panel-full\": !minimized,\n    hidden: viewModeState === AppMode.DISPLAY,\n    \"editor-panel-minimized\": minimized,\n  });\n  const editorBodyClass = classNames(\"editor-body\", {\n    \"editor-body-full\": !minimized,\n    \"editor-body-minimized\": minimized,\n  });\n  const editorClass = classNames(\"editor\", {\n    \"editor-visible\": viewModeState === AppMode.EDIT,\n  });\n\n  const styles = {\n    root: { display: \"none !important\", border: \"5px solid red !important\" },\n    handle: { display: \"none\" },\n  };\n  return ReactDom.createPortal(\n    <>\n      <Draggable\n        handle=\".editor-panel-handle\"\n        defaultClassName={editorPanelClass}\n        defaultPosition={{ x: 100, y: 100 }}\n      >\n        <div className={editorClass}>\n          <div className={\"header-container\"}>\n            <PanelHeader visible={viewModeState === AppMode.EDIT}>\n              <WindowButton\n                icon={<PlusIcon />}\n                color={\"yellow\"}\n                onMouseUp={() => {\n                  setMinimized(false);\n                }}\n              />\n              <WindowButton\n                icon={<MinusIcon />}\n                color={\"yellow\"}\n                onMouseUp={() => {\n                  setMinimized(true);\n                }}\n              />\n            </PanelHeader>\n          </div>\n          <div className={\"body-container\"}>\n            <div className={editorBodyClass}>\n              <Editor />\n            </div>\n          </div>\n        </div>\n      </Draggable>\n    </>,\n    document.querySelector(\"#editor-panel-container\") as HTMLDivElement\n  );\n};\n\nexport default EditorPanel;\n\ninterface PanelHeaderProperties {\n  visible: boolean;\n  children: JSX.Element | JSX.Element[];\n}\nconst PanelHeader = ({ visible, children }: PanelHeaderProperties) => {\n  return <div className={\"editor-panel-handle panel-header\"}>{children}</div>;\n};\n\nconst WindowButton = ({\n  icon,\n  color,\n  onMouseUp,\n}: {\n  icon: JSX.Element;\n  color: string;\n  onMouseUp: React.MouseEventHandler<HTMLDivElement>;\n}) => {\n  return (\n    <div className={\"window-button\"} onMouseUp={onMouseUp}>\n      {icon}\n    </div>\n  );\n};\n//\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { InfoSignIcon, Heading, Text, HandUpIcon } from \"evergreen-ui\";\nimport ReactDom from \"react-dom\";\nimport \"../css/howToUse.css\";\nimport classNames from \"classnames\";\nimport { useStoreState } from \"../hooks\";\nimport Button from \"./Shared/Button\";\nimport { AppMode } from \"../enums\";\nimport Modal from \"./Shared/Modal\";\nimport Panel from \"./Shared/Panel\";\nimport { useToggle } from \"../hooks\";\n\nconst HowToUse = (): JSX.Element => {\n  // const [visible, setvisible] = useState(false);\n  const [visible, toggleVisible] = useToggle(false)\n  \n  const appModeState = useStoreState((state) => state.appModel.appMode);\n\n  const howToPopupContainerClass = classNames(\"how-to-backdrop\", {\n    \"how-to-backdrop-active\": visible,\n    \"how-to-backdrop-inactive\": !visible,\n  });\n\n  const buttonContainerClass = classNames(\"how-to-container\", {\n    \"how-to-container-active\": appModeState === AppMode.DISPLAY,\n    \"how-to-container-inactive\": appModeState === AppMode.EDIT,\n  });\n\n  const container = useRef<HTMLElement | null>(null);\n\n  useEffect(() => {\n    container.current = document.querySelector(\"#how-to-use-popup\");\n    if (container.current) {\n      container.current.style.display = \"none\";\n    }\n  }, []);\n  useEffect(() => {\n    if (container.current) {\n      container.current.style.display = visible ? \"initial\" : \"none\";\n    }\n  }, [visible]);\n\n\n  return (\n    <div style={{ zIndex: 10 }} className={howToPopupContainerClass}>\n      <div\n        style={{ zIndex: 11, backgroundColor: \"rgba(255, 0, 0, 0)\" }}\n        onClick={toggleVisible}\n        className={howToPopupContainerClass}\n      ></div>\n      <div className={buttonContainerClass}>\n        {appModeState === AppMode.DISPLAY ? (\n          <div>\n            <HowToPopup\n              onClose={toggleVisible}\n              active={visible}\n            />\n            <Button\n              // height={}\n     \n              height={\"10vh\"}\n              width={\"30vw\"}\n              iconBefore={<HandUpIcon/>}\n              onClick={toggleVisible}\n              appearance=\"primary\"\n              text=\"Learn how to use this display\"\n              className = {\"how-to-use-button\"}\n            />\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HowToUse;\n\nconst HowToPopup = ({\n  active,\n  onClose,\n}: {\n  active: boolean;\n  onClose: () => void;\n}): JSX.Element => {\n  return ReactDom.createPortal(\n    <Modal\n      active={active}\n      containerClassName={\"how-to-use-popup\"}\n      onClose={onClose}\n      backdropOpacity={0}\n    >\n      <Panel padding = \"1em\">\n      <Heading>Connect Labtop</Heading>\n      <hr></hr>\n      <Text>\n        Connect your labtop to use this screen as a display. \n      </Text>\n      <img\n        className={\"how-to-image\"}\n        src={process.env.PUBLIC_URL + \"/labtopdiagram.png\"}\n      />\n      <Heading>Explore Content</Heading>\n      <hr></hr>\n      <Text>\n        Click on a card to explore data related content.\n      </Text>\n      <img\n        className={\"how-to-image\"}\n        src={process.env.PUBLIC_URL + \"/masonary.png\"}\n      />\n      </Panel>\n    </Modal>,\n    document.querySelector(\"#how-to-use-popup\") as HTMLElement\n  );\n};\n// export default HowToPopup;\n\n// const Modal = ({\n//   children,\n//   active,\n// }: {\n//   active: boolean;\n//   children: JSX.Element | JSX.Element[];\n// }): JSX.Element => {\n//   const howToPopupContainerClass = classNames(\"how-to-popup-container\", {\n//     \"how-to-popup-container-hidden\": !active,\n//     \"how-to-popup-container-display\": active,\n//   });\n\n//   return <div className={howToPopupContainerClass}>{children}</div>;\n// };\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useStoreActions } from \"../hooks\";\nimport {useLongPress} from \"react-use\"\nimport appConfig from \"../static/appConfig\";\n\n/**Invisible button in the bottom left corner of the screen. Hold touch/click to toggle app mode */\nconst ModeChangeButton = (): JSX.Element => {\n  const toggleModeAction = useStoreActions((actions)=>actions.appModel.toggleAppMode)\n\n  const longPressEvent = useLongPress(()=>{toggleModeAction()})\n\n  const modeChangeButtonStyle = {\n      position: \"absolute\",\n      width: 50, \n      height: 50, \n      border: appConfig.showModeSwitchButton?\"1px solid red\":\"none\",\n      bottom: 0,\n      left: 0, \n  } as React.CSSProperties\n  return ReactDOM.createPortal(\n    <div style ={modeChangeButtonStyle} {...longPressEvent}>\n    </div>, document.querySelector(\"#mode-change-button\") as HTMLElement\n  );\n};\n\nexport default ModeChangeButton;\n\n\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.global.css\";\nimport \"./css/global.css\"\nimport { useStoreActions, useStoreState, useKeyboardShortcut} from \"./hooks\";\nimport CardGrid from \"./components/CardLayout/CardLayout\";\nimport Background from \"./components/Background\";\nimport { DropResult, DragDropContext } from \"react-beautiful-dnd\";\nimport { DndContext } from \"@dnd-kit/core\";\nimport EditorPanel from \"./components/EditorPanel/EditorPanel\";\nimport { CardAddEvent, CardSwapEvent } from \"./interfaces/CardEvents\";\nimport { GridPosition } from \"./interfaces/GridPosition\";\nimport HowToUse from \"./components/HowToUse\";\nimport { AppMode, DragSource } from \"./enums\";\nimport Pulsar from \"./components/Shared/Pulsar\";\nimport ModeChangeButton from \"./components/ModeChangeButton\";\nimport { useIdle } from \"react-use\";\nimport appConfig from \"./static/appConfig\";\n\n/**\n * High level container, the root component. Initial fetch requests to spreadsheets are made here via a useEffect hook.\n * @component\n */\n\nconst App = (): JSX.Element => {\n  const isIdle = useIdle(appConfig.idleTime, false);\n\n  const toggleAppModeThunk = useStoreActions(\n    (actions) => actions.appModel.toggleAppMode\n  );\n  const fetchCardDataGoogleSheetThunk = useStoreActions(\n    (actions) => actions.googleSheetsModel.fetchAppGoogleSheet\n  );\n  const swapCardDataAction = useStoreActions(\n    (actions) => actions.layoutsModel.swapCardContent\n  );\n  const cardAddAction = useStoreActions(\n    (actions) => actions.layoutsModel.addCard\n  );\n  const setActiveLayoutAction = useStoreActions(\n    (actions) => actions.layoutsModel.setActiveLayout\n  );\n  const externalLayoutsState = useStoreState(\n    (state) => state.layoutsModel.externalLayouts\n  );\n  const appModeState = useStoreState(\n    (state) => state.appModel.appMode\n  );\n\n  useEffect(()=>{\n    if (appModeState === AppMode.EDIT){\n      toggleAppModeThunk()\n    }\n  },[isIdle])\n\n\n  //F4 TO TRANSITION MODE\n  const {enable, disable} = useKeyboardShortcut({\n    keyCode: 115,\n    action: ()=>{toggleAppModeThunk()},\n    disabled: false \n  })\n  \n  const [isDraggingLayout, setIsDraggingLayout] = useState(false);\n\n  /**On app start make one-time fetch requests */\n  useEffect(() => {\n    fetchCardDataGoogleSheetThunk();\n  }, [fetchCardDataGoogleSheetThunk]);\n\n  const containerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n  };\n\n  const cardIsEmpty = (cardId: string): boolean => {\n    return cardId.startsWith(\"empty\");\n  };\n\n  const stringToGridPos = (cardId: string): GridPosition => {\n    //card id's of empty cards is of \"empty_card_[x, y]\" format\n    const posString = cardId.split(\"[\")[1];\n    //x,y]\n    const x = Number.parseInt(posString.charAt(0));\n    //x\n    const y = Number.parseInt(posString.charAt(3));\n    //y\n    return {\n      x: x,\n      y: y,\n    } as GridPosition;\n  };\n\n  const onDragEnd = (response: DropResult) => {\n    console.log(\"processing drag end\");\n    if (response.destination?.droppableId == response.source?.droppableId)\n      return;\n    console.log(response);\n    const { source, destination, draggableId } = response;\n    console.log(source, destination, draggableId);\n    console.log(\n      `dragged from ${draggableId} to ${\n        destination?.droppableId\n      } current title: ${\"yes\"}`\n    );\n\n    if (!destination) return;\n    switch (source.droppableId) {\n      case DragSource.CARD_TABLE:\n        if (destination.droppableId) {\n          if (cardIsEmpty(destination.droppableId)) {\n            const cardPos = stringToGridPos(destination.droppableId);\n            const addEvent = {\n              sourceId: draggableId,\n              targetPosition: cardPos,\n            } as CardAddEvent;\n            cardAddAction(addEvent);\n            console.log(\"dropped onto an empty card, adding card\");\n          } else {\n            swapCardDataAction({\n              sourceId: draggableId,\n              targetId: destination.droppableId,\n            } as CardSwapEvent);\n          }\n        }\n        break;\n      case DragSource.LAYOUT_TABLE:\n        console.log(\"dragged \");\n        console.log(\"dragged from the layout table!\");\n        setIsDraggingLayout(false);\n        const newLayout = externalLayoutsState.filter((l) => l.id === draggableId)[0];\n        console.log(draggableId);\n        console.log(externalLayoutsState);\n        console.log(newLayout);\n        setActiveLayoutAction(newLayout);\n        break;\n      default:\n        console.log(\"got unkown drag source\");\n    }\n  };\n\n  return (\n    <>\n      <div\n        tabIndex={0}\n      >\n        <HowToUse />\n        <Background />\n        <ModeChangeButton/>\n        <DragDropContext\n          onBeforeDragStart={(e) => {\n            const { source } = e;\n            if (source.droppableId === DragSource.LAYOUT_TABLE) {\n              setIsDraggingLayout(true);\n            }\n          }}\n          onDragEnd={onDragEnd}\n        >\n          <EditorPanel />\n          <div style={containerStyle}>\n            {isDraggingLayout ? <LayoutOverlay /> : <></>}\n            <DndContext>\n              <CardGrid />\n            </DndContext>\n          </div>\n        </DragDropContext>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n\nconst LayoutOverlay = ({ active }: { active?: boolean }): JSX.Element => {\n  return (\n    <div className={\"layout-overlay-active\"}>\n      <Pulsar></Pulsar>\n    </div>\n  );\n};\n","import type RawCardRow from \"../interfaces/RawCardRow\";\nimport { InteractionType } from \"../enums\";\nimport IFrameValidator from \"../IFrameValidator\";\n\n/**Contains all the information needed to create a display card */\nexport default class CardData {\n  readonly src: string;\n  readonly title: string;\n  readonly added?: Date;\n  readonly sourceId: string;\n  readonly author: string;\n  readonly interaction: InteractionType;\n  validator!: IFrameValidator;\n  isActive!: boolean;\n  failed!: boolean;\n\n  constructor(row: RawCardRow) {\n    // console.log(`GOT IMAGE CARD ROW: ${isImgLink(row.src)}`);\n    this.src = row.src;\n    this.title = row.title;\n    this.added = new Date(row.added);\n    this.sourceId = row.src;\n    this.author = row.author;\n    this.interaction =\n      InteractionType[row.interaction as keyof typeof InteractionType];\n    this.isActive = false;\n    this.validator = new IFrameValidator(this.src);\n    this.failed = false;\n  }\n  setActive(b: boolean): void {\n    this.isActive = b;\n  }\n\n  fail(): void {\n    console.log(this.validator.errors);\n    this.failed = true;\n    // this.error =\n  }\n}\n\nfunction isImgLink(url: string) {\n  if (typeof url !== \"string\") return false;\n  return (\n    url.match(/^http[^\\?]*.(jpg|jpeg|gif|png|tiff|bmp)(\\?(.*))?$/gim) != null\n  );\n}\n","import {\r\n  action,\r\n  thunk,\r\n  Thunk,\r\n  Action,\r\n  ActionOn,\r\n  thunkOn,\r\n  ThunkOn,\r\n  debug,\r\n  actionOn,\r\n} from \"easy-peasy\";\r\nimport CardData from \"../data_structs/CardData\";\r\nimport type RawCardRow from \"../interfaces/RawCardRow\";\r\nimport { Layouts } from \"react-grid-layout\";\r\nimport defaultGridLayout from \"../static/defaultLayouts\";\r\nimport { AppMode, SheetNames } from \"../enums\";\r\nimport { StoreModel } from \"./index\";\r\n/**\r\n * Core app model\r\n * @param\r\n */\r\nexport interface AppDataModel {\r\n  //state\r\n  availableCards: CardData[];\r\n  activeCards: CardData[];\r\n  currentLayout: Layouts;\r\n  appMode: AppMode;\r\n\r\n  //listeners\r\n  onCardSheetLoadSuccess: ThunkOn<AppDataModel, never, StoreModel>;\r\n  onSwapCardContent: ThunkOn<AppDataModel, never, StoreModel>;\r\n  onSetActiveLayout: ThunkOn<AppDataModel, never, StoreModel>;\r\n  //managers\r\n  manageViewModeChange: Thunk<AppDataModel, AppMode>;\r\n  toggleAppMode: Thunk<AppDataModel, never>;\r\n  //simple setters\r\n  setAppMode: Action<AppDataModel, AppMode>;\r\n  setCurrentLayout: Action<AppDataModel, Layouts>;\r\n  setActiveCards: Action<AppDataModel, CardData[]>;\r\n  setAvailableCards: Action<AppDataModel, CardData[]>;\r\n  registerCardLoadFailure: Thunk<AppDataModel, CardData, never, StoreModel>;\r\n}\r\n\r\nconst appModel: AppDataModel = {\r\n  //state\r\n  availableCards: [],\r\n  activeCards: [],\r\n  currentLayout: defaultGridLayout,\r\n  appMode: AppMode.DISPLAY,\r\n  // localStorageLayouts: [],\r\n\r\n  //managers\r\n  /**Control side effects for altering the view state of the app, and dispatch a setter for the state */\r\n  manageViewModeChange: thunk((actions, viewModeEnum) => {\r\n    console.log(viewModeEnum);\r\n    actions.setAppMode(viewModeEnum);\r\n    switch (viewModeEnum) {\r\n      case AppMode.EDIT:\r\n        break;\r\n      case AppMode.DISPLAY:\r\n        break;\r\n      case AppMode.CYCLE:\r\n        break;\r\n      default:\r\n        console.log(\"reached default in set view mode thunk\");\r\n    }\r\n  }),\r\n  toggleAppMode: thunk((actions, _, { getState }) => {\r\n    console.log(\"toggling view mod \");\r\n\r\n    switch (getState().appMode) {\r\n      case AppMode.EDIT:\r\n        actions.setAppMode(AppMode.DISPLAY);\r\n        break;\r\n      case AppMode.DISPLAY:\r\n        actions.setAppMode(AppMode.EDIT);\r\n        break;\r\n      case AppMode.CYCLE:\r\n        break;\r\n      default:\r\n        console.log(\"reached default in set view mode thunk\");\r\n    }\r\n    console.log(getState().appMode);\r\n  }),\r\n  setCurrentLayout: action((state, layoutArray) => {\r\n    state.currentLayout = layoutArray;\r\n  }),\r\n  setAvailableCards: action((state, cardDataArray) => {\r\n    console.log(\"setting available cards\");\r\n    state.availableCards = cardDataArray;\r\n  }),\r\n  setActiveCards: action((state, cardDataArray) => {\r\n    console.log(\"setting active cards\");\r\n    console.log(cardDataArray);\r\n    state.activeCards = cardDataArray;\r\n  }),\r\n  setAppMode: action((state, viewModeEnum) => {\r\n    console.log(\"setting view mode\");\r\n    state.appMode = viewModeEnum;\r\n  }),\r\n\r\n  //listeners\r\n  onCardSheetLoadSuccess: thunkOn(\r\n    // targetResolver:\r\n    (actions, storeActions) =>\r\n      storeActions.googleSheetsModel.setAppGoogleSheetData,\r\n    // handler:\r\n    async (actions, target) => {\r\n      console.log(\"TRIGGERD\");\r\n      // console.log(\"got on card sheet load success\");\r\n      console.log(target.payload);\r\n      target.payload.getSheetRows<RawCardRow>(SheetNames.CARDS).then((rows) => {\r\n        console.log(rows);\r\n        const rawCardRowsArray = rows.map((row) => {\r\n          return {\r\n            src: row.src,\r\n            title: row.title,\r\n            added: row.added,\r\n            sourceid: row.sourceid,\r\n            author: row.author,\r\n            interaction: row.interaction,\r\n          } as RawCardRow;\r\n        });\r\n\r\n        const cards = rawCardRowsArray.map((c: RawCardRow) => new CardData(c));\r\n        console.log(cards);\r\n        // actions.setActiveCards(cards)\r\n        actions.setAvailableCards(cards);\r\n      });\r\n    }\r\n  ),\r\n\r\n  onSetActiveLayout: thunkOn(\r\n    (actions, storeActions) => storeActions.layoutsModel.setActiveLayout,\r\n    async (actions, layout, { getState }) => {\r\n      // console.log(\"listened for setActiveLayout at app_model\");\r\n      //if a card source is in the active layout, then it must be active\r\n      // const sources = layout.payload.sources();\r\n      // console.log(sources);\r\n      const activeSources = layout.payload\r\n        .sources()\r\n        .filter((s) => s !== \"clock\");\r\n\r\n      const availableCardsUpdated = getState().availableCards.map((card) => {\r\n        if (activeSources.includes(card.sourceId)) {\r\n          card.setActive(true);\r\n        } else {\r\n          card.setActive(false);\r\n        }\r\n        return card;\r\n      });\r\n      const activeCards = getState().availableCards.filter((card) => {\r\n        return activeSources.includes(card.sourceId);\r\n      });\r\n      // console.log(availableCardsUpdated);\r\n      actions.setAvailableCards(availableCardsUpdated);\r\n      actions.setActiveCards(activeCards);\r\n      // console.log(activeCards);\r\n    }\r\n  ),\r\n  registerCardLoadFailure: thunk(\r\n    (actions, failedCard, { getState, getStoreState }) => {\r\n      console.log(\"Got card Register Load Failure at Layouts Model\");\r\n      console.log(failedCard);\r\n      const { activeCards } = getState();\r\n      const failedId = failedCard.sourceId;\r\n      let newCards = activeCards.map((c) => {\r\n        if (c.sourceId === failedId) {\r\n          console.log(\"found failed\");\r\n          c.fail();\r\n        }\r\n        return c;\r\n      });\r\n      actions.setActiveCards(newCards);\r\n    }\r\n  ),\r\n  onSwapCardContent: thunkOn(\r\n    (actions, storeActions) => storeActions.layoutsModel.swapCardContent,\r\n    async (actions, payload, { getState }) => {\r\n      console.log(\"got swap card content\");\r\n      console.log(payload.payload);\r\n      console.log(getState().activeCards);\r\n      const newCards = getState().activeCards.map((c) => {\r\n        if (c.sourceId === payload.payload.targetId) {\r\n          const newSource = getState().availableCards.find(\r\n            (c) => c.sourceId === payload.payload.sourceId\r\n          );\r\n          console.log(newSource);\r\n          return newSource;\r\n        } else {\r\n          return c;\r\n        }\r\n      });\r\n      if (newCards) {\r\n        actions.setActiveCards(newCards as CardData[]);\r\n      }\r\n      console.log(debug(payload));\r\n    }\r\n  ),\r\n};\r\n\r\nexport default appModel;\r\n","import CardData from \"./CardData\";\nimport { Layout, Layouts } from \"react-grid-layout\";\nimport type RawLayoutRow from \"../interfaces/RawLayoutRow\";\nimport type { CardSwapEvent, CardAddEvent } from \"../interfaces/CardEvents\";\nimport type { GridPosition } from \"../interfaces/GridPosition\";\n\n//TODO: Google form columns and layoutData fields should have the same capitilization\nexport default class LayoutData {\n  readonly title: string;\n  readonly author: string;\n  readonly added: Date;\n  readonly id: string;\n  layout: Layouts;\n  constructor(row: RawLayoutRow) {\n    this.id = row.title + \"_\" + row.timestamp;\n    this.title = row.title;\n    this.author = row.author;\n    this.added = new Date(row.timestamp.split(\" \")[0]);\n    const startLayout: Layouts = JSON.parse(row.layout);\n    this.layout = startLayout;\n  }\n  swapCard(swapInfo: CardSwapEvent): void {\n    for (const [k, v] of Object.entries(this.layout)) {\n      for (const [index, layoutValue] of v.entries()) {\n        if (layoutValue.i == swapInfo.targetId) {\n          v[index].i = swapInfo.sourceId;\n        }\n      }\n      this.layout[k] = v;\n    }\n  }\n  removeCard(toRemove: CardData): void {\n    console.log(this.layout);\n    for (const [k, v] of Object.entries(this.layout)) {\n      for (const [index, layoutValue] of v.entries()) {\n        this.layout[k] = v.filter((l) => l.i !== toRemove.sourceId);\n      }\n    }\n  }\n  addCard(toAdd: CardData, pos: GridPosition): void {\n    console.log(\"ADDING CARD AT LAYOUT DATA\");\n    console.log(this.layout);\n    for (const [k, v] of Object.entries(this.layout)) {\n      const newItem: Layout = {\n        x: pos.x,\n        y: pos.y,\n        w: 1,\n        h: 1,\n        i: toAdd.sourceId,\n      };\n      this.layout[k].push(newItem);\n    }\n  }\n  failCard(toFail: CardData) {\n    console.log(\"FAILING CARD AT LAYOUT DATA\");\n    // console.log()\n  }\n  setGridLayout(newGridLayout: Layouts): void {\n    console.log(newGridLayout);\n    this.layout = newGridLayout;\n  }\n  sources(): string[] {\n    const lg = Object.entries(this.layout)[0][1];\n    return lg.map((l: any) => l.i);\n  }\n}\n\nfunction findEmptyGridPositions(\n  layouts: Layout[],\n  rows: number,\n  cols: number\n): GridPosition[] {\n  const allGridSpots: GridPosition[] = [];\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      allGridSpots.push({ x: x, y: y });\n    }\n  }\n  const filledSpots = findFilledPositions(layouts);\n  const stringFilledSpots = new Set(\n    filledSpots.map((fs) => [fs.x, fs.y].toString())\n  );\n\n  return allGridSpots.filter(\n    (gs) => !stringFilledSpots.has([gs.x, gs.y].toString())\n  );\n}\n\nfunction findFilledPositions(layouts: Layout[]): GridPosition[] {\n  const takenSpots: GridPosition[] = [];\n  for (const l of layouts) {\n    takenSpots.push({ x: l.x, y: l.y });\n    for (let index = 1; index < l.w; index++) {\n      const fullSpotX: GridPosition = {\n        x: l.x + index,\n        y: l.y,\n      };\n      takenSpots.push(fullSpotX);\n    }\n    for (let index = 1; index < l.h; index++) {\n      const fullSpotY: GridPosition = {\n        x: l.x,\n        y: l.y + index,\n      };\n      takenSpots.push(fullSpotY);\n    }\n  }\n  return takenSpots;\n}\n","import CardData from \"../data_structs/CardData\";\r\nimport defaultLayouts from \"../static/defaultLayouts\";\r\nimport LayoutData from \"../data_structs/LayoutData\";\r\nimport RawLayoutRow from \"../interfaces/RawLayoutRow\";\r\nimport { AppMode, SheetNames } from \"../enums\";\r\nimport { CardAddEvent, CardSwapEvent } from \"../interfaces/CardEvents\";\r\nimport { Layouts } from \"react-grid-layout\";\r\nimport { StoreModel } from \"./index\";\r\nimport { action, thunk, Thunk, Action, thunkOn, ThunkOn } from \"easy-peasy\";\r\nimport appConfig from \"../static/appConfig\";\r\n\r\nexport interface LayoutsModel {\r\n  //state\r\n  activeLayout: LayoutData | undefined;\r\n  externalLayouts: LayoutData[];\r\n  bufferLayout: Layouts;\r\n  tempLayout: Layouts;\r\n\r\n  //listeners\r\n  onSetAppGoogleSheetData: ThunkOn<LayoutsModel, never, StoreModel>;\r\n  onToggleViewModeListener: ThunkOn<LayoutsModel, never, StoreModel>;\r\n  //requests\r\n\r\n  //simple setters\r\n  setActiveLayout: Action<LayoutsModel, LayoutData>;\r\n  setExternalLayouts: Action<LayoutsModel, LayoutData[]>;\r\n  setBufferLayout: Action<LayoutsModel, Layouts>;\r\n  setTempLayout: Action<LayoutsModel, Layouts>;\r\n  updateLayout: Action<LayoutsModel, CardSwapEvent>;\r\n\r\n  //update\r\n  swapCardContent: Thunk<LayoutsModel, CardSwapEvent, StoreModel>;\r\n  deleteCard: Thunk<LayoutsModel, CardData, StoreModel>;\r\n  addCard: Thunk<LayoutsModel, CardAddEvent, never, StoreModel>;\r\n  registerCardLoadFailure: Thunk<LayoutsModel, CardData, never, StoreModel>;\r\n}\r\n\r\nconst layoutsModel: LayoutsModel = {\r\n  //state\r\n  activeLayout: undefined,\r\n  externalLayouts: [],\r\n  bufferLayout: defaultLayouts,\r\n  tempLayout: defaultLayouts,\r\n\r\n  //listeners\r\n  /**On setAppGoogleSheetData, create an array of LayoutData objects from the provided rows */\r\n  onSetAppGoogleSheetData: thunkOn(\r\n    (actions, storeActions) =>\r\n      storeActions.googleSheetsModel.setAppGoogleSheetData,\r\n    (actions, target) => {\r\n      //extract only the needed properties from the GoogleSheetRow\r\n      //TODO: ERROR HANDLING FOR LAYOUTS\r\n      target.payload\r\n        .getSheetRows<RawLayoutRow>(SheetNames.LAYOUTS)\r\n        .then((rows) => {\r\n          console.log(\r\n            \"GOT HEREGOT HEREGOT HEREGOT HEREGOT HEREGOT HEREGOT HERE\"\r\n          );\r\n          const rawLayoutRows = rows;\r\n\r\n          const layouts = rawLayoutRows.map((l) => new LayoutData(l));\r\n          console.log(layouts);\r\n          const defaultLayout = layouts.filter(\r\n            (layout) => layout.title === appConfig.defaultLayoutName\r\n          )[0];\r\n          console.log(defaultLayout);\r\n          if (defaultLayout) {\r\n            actions.setActiveLayout(defaultLayout);\r\n          }\r\n          actions.setExternalLayouts(layouts);\r\n          actions.setBufferLayout(\r\n            layouts.filter(\r\n              (layout) => layout.title === appConfig.defaultLayoutName\r\n            )[0].layout\r\n          );\r\n        });\r\n    }\r\n  ),\r\n  onToggleViewModeListener: thunkOn(\r\n    // targetResolver:toggleAppMode\r\n    (actions, storeActions) => storeActions.appModel.toggleAppMode,\r\n    // handler:\r\n    (actions, target, { getState, getStoreState }) => {\r\n      console.log(\r\n        \"listened to on toggle view mode in layout model, setting layout from buffer\"\r\n      );\r\n      const { activeLayout } = getState();\r\n      const buf = getState().bufferLayout;\r\n      if (getStoreState().appModel.appMode === AppMode.DISPLAY) {\r\n        console.log(\"IT WAS IN DISPLAY MODE\");\r\n        if (activeLayout?.layout) {\r\n          activeLayout.layout = buf;\r\n          actions.setActiveLayout(activeLayout);\r\n        }\r\n      }\r\n    }\r\n  ),\r\n  //simple setters\r\n  setActiveLayout: action((state, newActiveLayout) => {\r\n    state.activeLayout = newActiveLayout;\r\n  }),\r\n  setExternalLayouts: action((state, newLayoutArray) => {\r\n    console.log(\"setting external layouts\");\r\n    state.externalLayouts = newLayoutArray;\r\n  }),\r\n  //mutators\r\n  swapCardContent: thunk(\r\n    (actions, swapInfo, { getState, getStoreState, getStoreActions }) => {\r\n      const { activeLayout } = getState();\r\n      if (activeLayout) {\r\n        const buf = getState().bufferLayout;\r\n        activeLayout.layout = buf;\r\n        activeLayout.swapCard(swapInfo);\r\n        actions.setActiveLayout(activeLayout);\r\n        // actions.setBufferLayout(activeLayout.layout);\r\n      }\r\n    }\r\n  ),\r\n  deleteCard: thunk(\r\n    (actions, cardToDelete, { getState, getStoreState, getStoreActions }) => {\r\n      const { activeLayout } = getState();\r\n      if (activeLayout) {\r\n        const buf = getState().bufferLayout;\r\n        activeLayout.layout = buf;\r\n        activeLayout.removeCard(cardToDelete);\r\n        actions.setActiveLayout(activeLayout);\r\n      }\r\n    }\r\n  ),\r\n  addCard: thunk((actions, cardAddEvent, { getState, getStoreState }) => {\r\n    const { availableCards } = getStoreState().appModel;\r\n    const { sourceId, targetPosition } = cardAddEvent;\r\n    const cardToAdd = availableCards.find((c) => c.sourceId == sourceId);\r\n    const { activeLayout } = getState();\r\n    if (activeLayout && cardToAdd) {\r\n      const buf = getState().bufferLayout;\r\n      activeLayout.setGridLayout(buf);\r\n      activeLayout?.addCard(cardToAdd, targetPosition);\r\n      actions.setActiveLayout(activeLayout);\r\n    }\r\n  }),\r\n  registerCardLoadFailure: thunk(\r\n    (actions, failedCard, { getState, getStoreState }) => {\r\n      console.log(\"Got card Register Load Failure at Layouts Model\");\r\n      const { activeLayout } = getState();\r\n      if (activeLayout) {\r\n        activeLayout.failCard(failedCard);\r\n      }\r\n    }\r\n  ),\r\n  setBufferLayout: action((state, layouts) => {\r\n    state.bufferLayout = layouts;\r\n  }),\r\n  setTempLayout: action((state, layouts) => {\r\n    state.tempLayout = layouts;\r\n  }),\r\n  updateLayout: action((state, swap) => {\r\n    const old = state.activeLayout;\r\n    if (old) {\r\n      old.swapCard(swap);\r\n      state.activeLayout = old;\r\n    }\r\n  }),\r\n};\r\n\r\nexport default layoutsModel;\r\n","import type SheetId from \"../interfaces/SheetId\";\n\nconst cardDataSheetKey: SheetId = {\n  key: \"181P-SDszUOj_xn1HJ1DRrO8pG-LXyXNmINcznHeoK8k\",\n  gid: 0,\n};\nexport default cardDataSheetKey;\n\n\n\n// 1o-R04VC8cIbcmqM68q4ESguaaNYb-0jhoPNgEuKa0i4\n// key: \"181P-SDszUOj_xn1HJ1DRrO8pG-LXyXNmINcznHeoK8k\",\n","import type SheetId from \"../interfaces/SheetId\";\n\nconst layoutsGoogleSheetKey: SheetId = {\n  key: \"1zwPZV75EhBLseFpcpQhHXEjLTV6JDrwfIGNhaI2GCXI\",\n  // key: \"181P-SDszUOj_xn1HJ1DRrO8pG-LXyXNmINcznHeoK8k\",\n  // key: \"1zwPZV75EhBLseFpcpQhHXEjLTV6JDrwfIGNhaI2GCXI\",\n  gid: 996942125,\n  // gid: 677663195,\n};\nexport default layoutsGoogleSheetKey;\n\n// 1mxqTgXf8VAcqvPuxo61UVGFUeY_OnAT0MK2-ulPioqs\n","import { SheetNames } from \"../enums\";\r\n\r\nexport default class GoogleSheetData {\r\n  title!: string;\r\n  sheetId!: string;\r\n  sheets!: Map<SheetNames, unknown[]>;\r\n  constructor(\r\n    title: string,\r\n    sheetId: string,\r\n  ) {\r\n    this.title = title;\r\n    this.sheetId = sheetId;\r\n    this.sheets = new Map();\r\n  }\r\n  getSheetRows<P>(title: SheetNames): Promise<P[]>{\r\n    // const typedArr = this.rows.map(r=>r as P)\r\n    return new Promise<P[]>((resolve, reject)=>{\r\n      const rowArray = this.sheets.get(title);\r\n      if (rowArray){\r\n        resolve(rowArray.map(r=>r as P))\r\n      } else {\r\n        reject(`sheet with title ${title} did not exist`)\r\n      }\r\n    })\r\n  }\r\n  addSheet(title: SheetNames, rows: unknown[]){\r\n    this.sheets.set(title, rows);\r\n  }\r\n}\r\n","import { action, Action, thunk, Thunk } from \"easy-peasy\";\r\nimport type GoogleSheet from \"../interfaces/GoogleSheet\";\r\nimport type RawCardRow from \"../interfaces/RawCardRow\";\r\nimport type RawLayoutRow from \"../interfaces/RawLayoutRow\";\r\nimport cardDataSheetKey from \"../static/cardDataSheetKey\";\r\nimport layoutsGoogleSheetKey from \"../static/layoutsGoogleSheetKey\";\r\nimport GoogleSheetData from \"../data_structs/GoogleSheetData\";\r\nimport Papa from \"papaparse\";\r\nimport { SheetNames } from \"../enums\";\r\nimport SheetId from \"../interfaces/SheetId\";\r\n\r\nexport interface GoogleSheetsModel {\r\n  //state\r\n  appGoogleSheet: GoogleSheetData | undefined;\r\n  cardDataGoogleSheet: RawCardRow[] | null;\r\n  layoutDataGoogleSheet: RawLayoutRow[]| null;\r\n  //requests\r\n  fetchAppGoogleSheet: Thunk<GoogleSheetsModel>;\r\n  //setters\r\n  setAppGoogleSheetData: Action<GoogleSheetsModel, GoogleSheetData>;\r\n  setCardDataGoogleSheet: Action<GoogleSheetsModel, RawCardRow[]>;\r\n  setLayoutDataGoogleSheet: Action<\r\n    GoogleSheetsModel,\r\n    RawLayoutRow[]\r\n  >;\r\n}\r\n/**\r\n * Responsible for making requestst to google sheets. Other models must listen this model to intercept the sheet payload.\r\n * Also stores the fetch data purely for debugging purposes.\r\n */\r\n\r\n interface LoadSheetResult{\r\n  rows: unknown[];\r\n  sheetTitle: SheetNames;\r\n}\r\n\r\nconst googleSheetsModel: GoogleSheetsModel = {\r\n  //state\r\n  layoutDataGoogleSheet: null,\r\n  cardDataGoogleSheet: null,\r\n  appGoogleSheet: undefined,\r\n  //requests\r\n  fetchAppGoogleSheet: thunk(async (actions) => {\r\n\r\n\r\n  function parseData(sheetTitle: SheetNames, sheetId: SheetId): Promise<LoadSheetResult>{\r\n      let data;\r\n      const csvUrl = `https://docs.google.com/spreadsheets/d/${sheetId.key}/export?format=csv&gid=${sheetId.gid}`\r\n      return new Promise<LoadSheetResult>( (resolve) => {\r\n        Papa.parse(csvUrl, {\r\n          download: true,\r\n          header: true,\r\n          delimiter: ',',\r\n          dynamicTyping: true,\r\n          complete: (results) => {\r\n            data = results.data;\r\n            resolve({rows: data, sheetTitle: sheetTitle});\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  const getCardDataResponse = parseData(SheetNames.CARDS, cardDataSheetKey)\r\n  const getLayoutDataResponse = parseData( SheetNames.LAYOUTS, layoutsGoogleSheetKey)\r\n\r\n  Promise.allSettled([getCardDataResponse, getLayoutDataResponse]).then(results=>{\r\n    \r\n    const sheetData = new GoogleSheetData(\r\n      \"DSC App\",\r\n      cardDataSheetKey.key,\r\n    ); \r\n    const goodValues: PromiseFulfilledResult<LoadSheetResult>[] = [];\r\n    \r\n    results.forEach((result, num) => {\r\n      if (result.status == \"fulfilled\") {\r\n        goodValues.push(result)\r\n        sheetData.addSheet(result.value.sheetTitle, result.value.rows)\r\n      }\r\n      if (result.status == \"rejected\") {\r\n        console.error(\"failed \")\r\n      }\r\n    });\r\n    actions.setAppGoogleSheetData(sheetData)\r\n    sheetData.getSheetRows(SheetNames.CARDS).then(r=>{\r\n      actions.setCardDataGoogleSheet(r as RawCardRow[])\r\n    })\r\n    sheetData.getSheetRows(SheetNames.LAYOUTS).then(r=>{\r\n      actions.setLayoutDataGoogleSheet(r as RawLayoutRow[])\r\n    })\r\n  })\r\n  }),\r\n  setAppGoogleSheetData: action((state, googleSheet) => {\r\n    state.appGoogleSheet = googleSheet;\r\n  }),\r\n  setCardDataGoogleSheet: action((state, sheet) => {\r\n    state.cardDataGoogleSheet = sheet;\r\n  }),\r\n  setLayoutDataGoogleSheet: action((state, sheet) => {\r\n    state.layoutDataGoogleSheet = sheet;\r\n  }),\r\n};\r\n\r\nexport default googleSheetsModel;\r\n","import appData, { AppDataModel } from \"./appModel\";\r\nimport layoutsModel, { LayoutsModel } from \"./layoutsModel\";\r\nimport googleSheetsModel, { GoogleSheetsModel } from \"./googleSheetsModel\";\r\n// https://codesandbox.io/s/easy-peasy-typescript-v3-riqbl?file=/src/model/todos.ts\r\n\r\nexport interface StoreModel {\r\n  appModel: AppDataModel;\r\n  layoutsModel: LayoutsModel;\r\n  googleSheetsModel: GoogleSheetsModel;\r\n}\r\n\r\nconst model: StoreModel = {\r\n  appModel: appData,\r\n  layoutsModel: layoutsModel,\r\n  googleSheetsModel: googleSheetsModel,\r\n};\r\n\r\nexport default model;\r\n","import { createStore, action } from \"easy-peasy\";\nimport model from \"./model\";\n\nconst store = createStore(model, { name: \"Cuboard App Store\" });\n\nexport default store;\n","// import \"./wdyr\"; // <--- first import\nimport React from \"react\";\nimport App from \"./App\";\nimport { StoreProvider } from \"easy-peasy\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./store\";\n\n\nReactDOM.render(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}