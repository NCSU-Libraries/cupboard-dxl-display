{"version":3,"sources":["hooks.ts","componets/Clock.tsx","componets/IFrameView.tsx","enums.ts","componets/ViewCard/CardInfo.tsx","componets/Modal.tsx","componets/ViewCard/index.tsx","componets/IXDrop.tsx","componets/CardLayout.tsx","componets/Background.tsx","componets/XDrag.tsx","componets/EditorPanel/TableHeader.tsx","componets/EditorPanel/EditorTabs/ContentsTab.tsx","componets/EditorPanel/EditorSection/PerformanceTests.tsx","componets/EditorPanel/EditorTabs/LayoutTab/LayoutTable.tsx","componets/EditorPanel/EditorTabs/LayoutTab/LayoutTab.tsx","static/formEmbedUrl.ts","componets/EditorPanel/Editor.tsx","componets/EditorPanel/EditorPanel.tsx","App.tsx","data_structs/CardData.ts","static/defaultLayouts.ts","data_structs/History.ts","model/appModel.ts","model/historyModel.ts","data_structs/LayoutData.ts","model/layoutsModel.ts","utils.ts","static/cardDataSheetKey.ts","model/index.ts","model/googleSheetsModel.ts","store.ts","index.tsx"],"names":["typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","Clock","useState","Date","date","setDate","useEffect","timerID","setInterval","clearInterval","style","backdropFilter","height","padding","width","fontSize","fontWeight","color","backgroundColor","toLocaleTimeString","IFrameView","src","active","setActive","isLoaded","setIsLoaded","iframeOverlayClass","classNames","onDoubleClick","className","type","onLoad","e","pointerEvents","border","React","memo","propsAreEqual","prevProps","nextProps","console","log","AppMode","CardView","DragType","InteractionType","CardInfo","data","expanded","title","display","Modal","mode","onClick","portal","NORMAL","setViewMode","ReactDom","createPortal","show","onMouseUp","node","document","getElementById","MyBackdrop","children","ViewCard","view","isActive","activeKey","testkey","setModal","elementRef","useRef","appModeState","state","appModel","appMode","cardView","setCardView","cardClass","EDIT","DISPLAY","PREVIEW","cardInfoClass","portalNode","useMemo","createHtmlPortalNode","attributes","id","FULL_SCREEN","onLongPress","ref","current","text","IXDrop","props","provided","snapshot","innerRef","isDraggingOver","AddIcon","size","placeholder","CardGrid","viewModeState","currentLayoutState","layoutsModel","activeLayout","x","window","innerWidth","y","innerHeight","testViewMode","undefined","activeCardKey","activeCards","ResponsiveGridLayout","WidthProvider","Responsive","activeKeyRef","map","card","i","key","sourceId","target","onMouseDown","droppableId","toString","layouts","layout","breakpoints","lg","md","sm","xs","xxs","cols","rowHeight","margin","resizeHandles","preventCollision","onDragStart","oldItem","newItem","element","onDragStop","isDraggable","isResizable","Background","viewMode","backgroundStyle","setBackgroundStyle","isEditMode","position","top","left","transition","XDrag","dragAll","isValidElement","dragHandleProps","draggableProps","cloneElement","isDragging","defaultProps","TableHeader","ContentsTab","availableCards","filterKey","setFilterKey","cardItems","setCardItems","searchTerm","setSearchTerm","test","fuzzysort","go","c","clone","sort","a","b","aText","bText","TextInput","onChange","currentTarget","value","paddingBottom","paddingTop","Menu","Divider","isDropDisabled","draggableId","index","isDragDisabled","marginTop","marginBottom","textAlign","d","month","getMonth","day","getDate","year","getFullYear","length","join","formatDate","added","author","interaction","PerformanceTests","actions","setActiveCards","LayoutsTable","externalLayoutsState","externalLayouts","l","LayoutTab","trigger","frameBorder","marginHeight","marginWidth","LayoutTable","Editor","EditorPanel","minimized","setMinimized","editorPanelClass","hidden","editorClass","panelOverlayClass","handle","defaultClassName","defaultPosition","onMinimize","visible","FullscreenIcon","PanelHeader","MinimizeIcon","App","toggleViewModeThunk","toggleViewMode","fetchCardDataGoogleSheetThunk","googleSheetsModel","fetchCardDataGoogleSheet","fetchLayoutDataGoogleSheetThunk","fetchLayoutDataGoogleSheet","loadLocalLayoutsAction","loadLocalLayouts","swapCardDataAction","swapCardContent","onKeyUp","tabIndex","onDragEnd","res","destination","source","targetId","CardData","row","this","defaultGridLayoutArr","w","h","static","minW","maxW","defaultLayouts","JSON","stringify","History","events","currentStep","event","push","currentLayout","defaultGridLayout","history","localStorageLayouts","manageViewModeChange","thunk","viewModeEnum","setAppMode","CYCLE","_","getState","setCurrentLayout","action","layoutArr","setAvailableCards","cardDataArr","onCardSheetLoadSuccess","actionOn","storeActions","setCardDataGoogleSheet","payload","cards","onSetActiveLayout","thunkOn","setActiveLayout","activeSources","sources","filter","s","availableCardsUpdated","includes","set_active","onSwapCardContent","newCards","newSource","debug","onUndoHistory","historyModel","setCurrentHistory","injections","onRedoHistory","clearLocalLayouts","localStorage","clear","Object","keys","k","startsWith","name","parse","saveLayoutLocal","setItem","undoHistory","undoIt","undo","redoIt","redo","addEditHistory","addEditEvent","LayoutData","Timestamp","swapInfo","v","forEach","layoutVal","entries","onLayoutSheetLoadSuccess","setLayoutDataGoogleSheet","defaultLayout","setExternalLayouts","newActiveLayout","newLayoutArr","getStoreState","prevLayout","getStoreActions","swapCard","updateLayout","swap","old","getSheet","sheetId","Promise","resolve","reject","GetSheetDone","labeledCols","sheet_number","then","sheet","catch","err","error","cardDataSheetKey","model","appData","historyData","layoutDataGoogleSheet","cardDataGoogleSheet","store","createStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.2909f44d.chunk.js","sourcesContent":["import { createTypedHooks } from 'easy-peasy';\r\nimport { StoreModel } from './model';\r\n\r\nconst typedHooks = createTypedHooks<StoreModel>();\r\n\r\n// We export the hooks from our store as they will contain the\r\n// type information on them\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n/**\r\n * Simple clock widget for displaying the current time.\r\n * @component\r\n */\r\nconst Clock = (): JSX.Element => {\r\n  const [date, setDate] = useState(new Date());\r\n  const clockText = {\r\n    margin: 0,\r\n    fontSize: \"large\",\r\n  };\r\n  const containerStyle = {\r\n    backdropFilter: \"blur(4px)\",\r\n    height: \"100%\",\r\n    padding: \".5em\",\r\n    width: \"100%\",\r\n    // textSize:\r\n    fontSize: \"48pt\",\r\n    fontWeight: 600,\r\n    color: \"white\",\r\n  } as React.CSSProperties;\r\n\r\n  const dividerStyle = {\r\n    height: \".5em\",\r\n    backgroundColor: \"white\",\r\n    width: \"100%\",\r\n  } as React.CSSProperties;\r\n  //Replaces componentDidMount and componentWillUnmount\r\n  useEffect(() => {\r\n    const timerID = setInterval(() => tick(), 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerID);\r\n    };\r\n  });\r\n\r\n  function tick() {\r\n    setDate(new Date());\r\n  }\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <div>D.H. HILL</div>\r\n      <div>DATA EXPERIENCE LAB</div>\r\n      <div style={dividerStyle}></div>\r\n      <div>{date.toLocaleTimeString()}.</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n","import React, { useState, FC, PropsWithChildren } from \"react\";\r\nimport { Spinner, Pane } from \"evergreen-ui\";\r\nimport classNames from \"classnames\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"../css/iframeView.css\";\r\ninterface IFrameViewProps {\r\n  src: string;\r\n}\r\n/**\r\n * Minimal warpper for an <iframe>. Can be toggled between a full screen, active view, and a regular card view.\r\n * @component\r\n * @example\r\n * const my_url = \"https://www.youtube.com/embed/tgbNymZ7vqY\";\r\n * return(\r\n *  <IFrameView src = {my_url}/>\r\n * )\r\n */\r\nconst IFrameView: FC<IFrameViewProps> = ({ src }) => {\r\n  const [active, setActive] = useState(false);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const iframeOverlayClass = classNames(\"iframe-view-overlay\", {\r\n    \"iframe-view-overlay-hidden\": isLoaded,\r\n    \"iframe-view-overlay-loading\": !isLoaded,\r\n  });\r\n  // const\r\n  const iframeStyle = {\r\n    width: \"100%\",\r\n    pointerEvents: \"none\",\r\n    // height: \"500px\",\r\n    height: \"100%\",\r\n    border: \"none\",\r\n  } as React.CSSProperties;\r\n  const iframeActive = {\r\n    width: \"100%\",\r\n    pointerEvents: \"none\",\r\n    height: \"100%\",\r\n    border: \"5px blue\",\r\n  } as React.CSSProperties;\r\n\r\n  return (\r\n    <div\r\n      onDoubleClick={() => {\r\n        setActive(!active);\r\n      }}\r\n      className={\"iframe-view-container\"}\r\n      style={{ height: \"100%\" }}\r\n    >\r\n      <div className={iframeOverlayClass}>\r\n        <Loader type=\"Grid\" color=\"white\" height={80} width={80} />\r\n      </div>\r\n      <iframe\r\n        onLoad={(e) => {\r\n          setIsLoaded(true);\r\n        }}\r\n        src={src}\r\n        style={active ? iframeActive : iframeStyle}\r\n      ></iframe>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(IFrameView, propsAreEqual);\r\nfunction propsAreEqual(\r\n  prevProps: Readonly<PropsWithChildren<IFrameViewProps>>,\r\n  nextProps: Readonly<PropsWithChildren<IFrameViewProps>>\r\n): boolean {\r\n  if (prevProps.src == nextProps.src) {\r\n    return false;\r\n  }\r\n  console.log(prevProps.src);\r\n  console.log(nextProps.src);\r\n  return true;\r\n}\r\n","export enum AppMode {\r\n  DISPLAY = \"DISPLAY\",\r\n  EDIT = \"EDIT\",\r\n  CYCLE = \"CYCLE\",\r\n}\r\n\r\nexport enum CardView {\r\n  NORMAL = \"NORMAL\",\r\n  PREVIEW = \"PREVIEW\",\r\n  FULL_SCREEN = \"FULL_SCREEN\",\r\n}\r\n\r\nexport enum DragType {\r\n  CARD_TABLE_DATA = \"CARD_TABLE_DATA\",\r\n  DISPLAY_CARD = \"DISPLAY_CARD\",\r\n}\r\n\r\nexport enum InteractionType {\r\n  ACTIVE = \"ACTIVE\",\r\n  STATIC = \"STATIC\",\r\n}\r\n","import React, { useState } from \"react\";\r\nimport CardData from \"../../data_structs/CardData\";\r\n/**\r\n * Formats text from a CardData object, including it's title and source url.\r\n * @component\r\n */\r\nconst CardInfo = ({\r\n  data,\r\n  className,\r\n}: {\r\n  data: CardData;\r\n  className: string;\r\n}): JSX.Element => {\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const titleStyle = {\r\n    fontSize: \"large\",\r\n  };\r\n  return (\r\n    <>\r\n      <div className={\"card-footer\"}>\r\n        <div style={titleStyle}>{data.title}</div>\r\n        <a>{data.src}</a>\r\n        <div style={{ display: expanded ? \"block\" : \"none\" }}>\r\n          Lorem Ipsum is simply dummy text of the printing and typesetting\r\n          industry. Lorem Ipsum has been the industry&apos standard dummy text\r\n          ever since the 1500s, when an unknown printer took a galley of type\r\n          and scrambled it to make a type specimen book{\" \"}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardInfo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { Button as EverGreenButton } from \"evergreen-ui\";\r\nimport { Component } from \"evergreen-ui/node_modules/@types/react\";\r\nimport { createHtmlPortalNode, OutPortal } from \"react-reverse-portal\";\r\nimport type { HtmlPortalNode } from \"react-reverse-portal\";\r\nimport { setTimeout } from \"timers\";\r\nimport \"../css/modal.css\";\r\nimport { CardView } from \"../enums\";\r\nimport classNames from \"classnames\";\r\n\r\n/**\r\n * Wraps an Evergreen UI Button.\r\n * @component\r\n */\r\n\r\ninterface ModalProps {\r\n  // ref: HTMLDivElement;\r\n  text: string;\r\n  mode?: CardView;\r\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\r\n  portal?: HtmlPortalNode<Component<any>>;\r\n}\r\n\r\nconst Modal = ({ mode, onClick, portal }: ModalProps): JSX.Element => {\r\n  const [viewMode, setViewMode] = useState(CardView.NORMAL);\r\n  useEffect(() => {\r\n    console.log(\"got mode change\");\r\n    if (mode) {\r\n      setViewMode(mode);\r\n    }\r\n  }, [mode]);\r\n\r\n  // const cardClass = classNames(\"modal\", {\r\n  //   \"modal-full-screen\": viewMode === CardView.FULL_SCREEN,\r\n  //   \"\r\n  // modal-preview\": viewMode === CardView.PREVIEW,\r\n  // });\r\n\r\n  return ReactDom.createPortal(\r\n    <>\r\n      <MyBackdrop show={true}>\r\n        <div\r\n          className={\"modal-content-container\"}\r\n          onMouseUp={onClick}\r\n          // className={cardClass}\r\n        >\r\n          {portal ? (\r\n            <OutPortal node={portal}></OutPortal>\r\n          ) : (\r\n            <div className={\"modal-no-content\"}>no portal</div>\r\n          )}\r\n        </div>\r\n      </MyBackdrop>\r\n    </>,\r\n    document.getElementById(\"portal\") as HTMLElement\r\n  );\r\n};\r\nexport default Modal;\r\n\r\ninterface BackdropProps {\r\n  show: boolean;\r\n  children: JSX.Element | JSX.Element[];\r\n}\r\nconst MyBackdrop = ({ show, children }: BackdropProps) => {\r\n  return <div className={\"modal-backdrop-active \"}>{children}</div>;\r\n};\r\n","import React, {\r\n  PropsWithChildren,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  FC,\r\n  ReactElement,\r\n} from \"react\";\r\nimport CardInfo from \"./CardInfo\";\r\nimport CardData from \"../../data_structs/CardData\";\r\nimport { Layout } from \"react-grid-layout\";\r\nimport { AppMode } from \"../../enums\";\r\nimport { useStoreState, useStoreActions } from \"../../hooks\";\r\nimport { useLongPress } from \"react-use\";\r\nimport { CardView } from \"../../enums\";\r\nimport classNames from \"classnames\";\r\nimport \"../../css/card.css\";\r\nimport Modal from \"../Modal\";\r\nimport type { HtmlPortalNode } from \"react-reverse-portal\";\r\nimport { Component } from \"evergreen-ui/node_modules/@types/react\";\r\nimport {\r\n  createHtmlPortalNode,\r\n  InPortal,\r\n  OutPortal,\r\n} from \"react-reverse-portal\";\r\n\r\ninterface ViewCardProps {\r\n  children: React.ReactElement[] | React.ReactElement;\r\n  key?: string;\r\n  activeKey?: React.MutableRefObject<string>;\r\n  testkey?: string;\r\n  dataGrid?: Layout;\r\n  data?: CardData;\r\n  setModal?: () => void;\r\n  onDoubleClick?: React.MouseEventHandler<HTMLDivElement>;\r\n}\r\n/**\r\n * Wraps card content. Handles the reactive styling of componets.\r\n * @component\r\n */\r\n\r\nconst ViewCard: FC<ViewCardProps> = ({\r\n  children,\r\n  activeKey,\r\n  testkey,\r\n  data,\r\n  setModal,\r\n  onDoubleClick,\r\n}: ViewCardProps) => {\r\n  const elementRef = useRef<HTMLDivElement>(null);\r\n  const appModeState = useStoreState((state) => state.appModel.appMode);\r\n  const [cardView, setCardView] = useState(CardView.NORMAL);\r\n\r\n  const cardClass = classNames(\"card\", {\r\n    \"card-edit\": appModeState === AppMode.EDIT,\r\n    \"card-display\": appModeState === AppMode.DISPLAY,\r\n    \"card-preview\": cardView === CardView.PREVIEW,\r\n  });\r\n\r\n  const cardInfoClass = classNames(\"info\", {\r\n    \"info-hidden\": appModeState === AppMode.EDIT,\r\n    \"info-display\": appModeState === AppMode.DISPLAY,\r\n    \"info-preview\": cardView === CardView.PREVIEW,\r\n  });\r\n\r\n  const portalNode = React.useMemo(\r\n    // () => createHtmlPortalNode(),\r\n    () =>\r\n      createHtmlPortalNode({\r\n        attributes: { id: \"div-1\", style: \"height: 100%\" },\r\n      }),\r\n    []\r\n  );\r\n\r\n  const onLongPress = (): void => {\r\n    //only resize the card on press if app is in display mode\r\n    if (appModeState === AppMode.DISPLAY) {\r\n      switch (cardView) {\r\n        case CardView.NORMAL:\r\n          setCardView(CardView.PREVIEW);\r\n          console.log(\"it was normal\");\r\n          break;\r\n        case CardView.PREVIEW:\r\n          console.log(\"it was preview\");\r\n          setCardView(CardView.NORMAL);\r\n          break;\r\n        case CardView.FULL_SCREEN:\r\n          console.log(\"it was full screen\");\r\n          break;\r\n        default:\r\n          console.log(\"got defalt\");\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const determineOut = (\r\n    chil: ReactElement | ReactElement[],\r\n    view: CardView,\r\n    node: HtmlPortalNode<Component<any>>,\r\n    // rect: DOMRect | undefined,\r\n    isActive: boolean\r\n  ): ReactElement => {\r\n    //if in preview mode or full screen mode render card to the portal\r\n    if (\r\n      (view === CardView.PREVIEW || view === CardView.FULL_SCREEN) &&\r\n      isActive\r\n    ) {\r\n      console.log(\"passed\");\r\n      return (\r\n        <Modal\r\n          text={\"hello\"}\r\n          portal={node}\r\n          // boundingRect={targetBoundingBox}\r\n          mode={view}\r\n        ></Modal>\r\n      );\r\n    } else {\r\n      console.log(\"did not pass\");\r\n      return <OutPortal node={node}></OutPortal>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    //receives a drag objects\r\n    <div\r\n      className={cardClass}\r\n      style={{ height: \"100%\" }}\r\n      onDoubleClick={() => {\r\n        onDoubleClick;\r\n        if (appModeState == AppMode.DISPLAY) {\r\n          setCardView(CardView.FULL_SCREEN);\r\n        }\r\n      }}\r\n      onMouseUp={() => {\r\n        onLongPress();\r\n        // console.log(\"got simple mouse up\");\r\n        if (setModal) {\r\n          setModal();\r\n        }\r\n      }}\r\n      //reference to the clicked card into order to get the cards transforms and copy it to the modal\r\n      ref={elementRef}\r\n    >\r\n      <InPortal node={portalNode}>\r\n        <div className={\"card-child-container\"} style={{ height: \"100%\" }}>\r\n          {children}\r\n        </div>\r\n        {data ? <CardInfo data={data} className={cardInfoClass} /> : \"\"}\r\n      </InPortal>\r\n      {determineOut(\r\n        children,\r\n        cardView,\r\n        portalNode,\r\n        activeKey?.current == testkey\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// function memo(\r\n//   Component: FC<ViewCardProps>,\r\n//   propsAreEqual?: (\r\n//     prevProps: Readonly<PropsWithChildren<P>>,\r\n//     nextProps: Readonly<PropsWithChildren<P>>\r\n//   ) => boolean\r\n// ): NamedExoticComponent<PropsWithChildren<P>>;\r\n// function propsAreEqual(prev: Readonly<PropsWithChildren<>>,, next) {\r\n//   if (next.toChild.includes(next.number)) { return false }\r\n//   else if ( next.anotherProperty === next.someStaticProperty ) { return false }\r\n//   else { return true }\r\n//  }\r\n// function memo<P>(\r\n//   Component: FC<P>,\r\n//   propsAreEqual?: (\r\n//     prevProps: Readonly<PropsWithChildren<P>>,\r\n//     nextProps: Readonly<PropsWithChildren<P>>\r\n//   ) => boolean\r\n// );\r\n\r\n// const propsAreEqual<P> = (\r\n//   prevProps: Readonly<PropsWithChildren<P>>,\r\n//   nextProps: Readonly<PropsWithChildren<P>>\r\n//  ):boolean => {\r\n\r\n//  }\r\nfunction propsAreEqual(\r\n  prevProps: Readonly<PropsWithChildren<ViewCardProps>>,\r\n  nextProps: Readonly<PropsWithChildren<ViewCardProps>>\r\n): boolean {\r\n  console.log(prevProps.data);\r\n  console.log(nextProps.data);\r\n  console.log(\"HELLO FROM PROPS ARE EQUAL\");\r\n  // if (prevProps.data?.src == nextProps.data?.src) {\r\n  //   return false;\r\n  // }\r\n  return true;\r\n}\r\nexport default React.memo(ViewCard);\r\n// export default React.memo(ViewCard, propsAreEqual);\r\n","import React, { FC, ReactNode, useEffect } from \"react\";\r\nimport { Droppable, DroppableProps } from \"react-beautiful-dnd\";\r\nimport { AddIcon } from \"evergreen-ui\";\r\nimport \"../css/droppable.css\";\r\n\r\ninterface IXDrop extends Omit<DroppableProps, \"children\"> {\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst IXDrop: FC<IXDrop> = ({ children, className, ...props }) => {\r\n  // console.log();\r\n  // useEffect(() => {\r\n  //   // console.log(props);\r\n  // }, [props]);\r\n  // console.log(props);\r\n\r\n  // const myClass = classNames(\"droppable\", {\r\n  //   \"droppable-hovered\": snahsp,\r\n  // });\r\n  return (\r\n    <Droppable {...props}>\r\n      {(provided, snapshot) => {\r\n        // console.log(provided);\r\n        return (\r\n          <div\r\n            {...provided.innerRef}\r\n            ref={provided.innerRef}\r\n            className={\r\n              snapshot.isDraggingOver ? \"droppable-hovered\" : \"droppable\"\r\n            }\r\n            // isDraggingOver={snapshot.isDraggingOver}\r\n          >\r\n            <div\r\n              className={\r\n                snapshot.isDraggingOver\r\n                  ? \"droppable-overlay droppable-overlay-visible\"\r\n                  : \"droppable-overlay droppable-overlay-hidden\"\r\n              }\r\n            >\r\n              <AddIcon size={200}></AddIcon>\r\n            </div>\r\n            {children}\r\n            {provided.placeholder}\r\n          </div>\r\n        );\r\n      }}\r\n    </Droppable>\r\n  );\r\n};\r\n\r\nexport default IXDrop;\r\n","import React, {\r\n  useEffect,\r\n  useState,\r\n  FC,\r\n  useMemo,\r\n  forwardRef,\r\n  useRef,\r\n} from \"react\";\r\nimport Clock from \"./Clock\";\r\nimport IFrameView from \"./IFrameView\";\r\nimport GridLayout, { WidthProvider, Responsive } from \"react-grid-layout\";\r\nimport \"../css/cardLayout.css\";\r\nimport ViewCard from \"./ViewCard\";\r\nimport { useStoreState, useStoreActions } from \"../hooks\";\r\nimport CardData from \"../data_structs/CardData\";\r\nimport { AppMode } from \"../enums\";\r\nimport Modal from \"./Modal\";\r\nimport IXDrop from \"./IXDrop\";\r\n/**\r\n * Responsible for managing the layout of card components. Accesses a list of available card data from the store, then maps them into Card Components\r\n * ```\r\n *  {availableCards.map((card: CardData, i: number) => {\r\n *   console.log(i.toString());\r\n *   return (\r\n *   <div key={i.toString()}>\r\n *     <ViewCard data={card} key={i.toString()}>\r\n *       <IFrameView src={rand<string>(testSources)} />\r\n *       </ViewCard>\r\n *       </div>\r\n *     );\r\n *   })}\r\n * ```\r\n * @component\r\n *\r\n */\r\n\r\nexport const CardGrid: FC = () => {\r\n  const viewModeState = useStoreState((state) => state.appModel.appMode);\r\n  const currentLayoutState = useStoreState(\r\n    (state) => state.layoutsModel.activeLayout\r\n  );\r\n  const [size, setSize] = useState({\r\n    x: window.innerWidth,\r\n    y: window.innerHeight,\r\n  });\r\n  const testViewMode = useMemo(() => {\r\n    //only allow dragging/resizing when in edit mode\r\n    console.log(viewModeState);\r\n    console.log(AppMode.EDIT === viewModeState);\r\n    return viewModeState === AppMode.EDIT;\r\n  }, [viewModeState]);\r\n\r\n  const [activeCardKey, setActiveCardKey] =\r\n    useState<string | undefined>(undefined);\r\n\r\n  const activeCards = useStoreState((state) => state.appModel.activeCards);\r\n\r\n  const ResponsiveGridLayout = WidthProvider(Responsive);\r\n  useEffect(() => {\r\n    console.log(\"cards changed\");\r\n    console.log(currentLayoutState);\r\n  }, [activeCards, currentLayoutState]);\r\n\r\n  const activeKeyRef = useRef(\"\");\r\n\r\n  // we need to memo any children of the gird layout to avoid re-renders\r\n  //github.com/react-grid-layout/react-grid-layout\r\n  const memoCards = useMemo(() => {\r\n    return activeCards.map((card: CardData, i: number) => {\r\n      return (\r\n        <div\r\n          //key provided here is the means of accesing a unique identifier for the cards\r\n          key={card.sourceId}\r\n          // style={cardContainerStyle}\r\n          onMouseUp={(e) => {\r\n            console.log(e.target);\r\n            console.log(i);\r\n          }}\r\n          onMouseDown={(e) => {\r\n            console.log(e);\r\n          }}\r\n        >\r\n          <IXDrop key={i} droppableId={card.sourceId}>\r\n            <ViewCard\r\n              data={card}\r\n              key={i.toString()}\r\n              testkey={i.toString()}\r\n              setModal={() => {\r\n                activeKeyRef.current = i.toString();\r\n              }}\r\n              activeKey={activeKeyRef}\r\n            >\r\n              {activeCardKey == i.toString() ? (\r\n                <Modal text={\"hello\"}></Modal>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n\r\n              <IFrameView src={card.src} />\r\n            </ViewCard>\r\n          </IXDrop>\r\n        </div>\r\n      );\r\n    });\r\n  }, [activeCards]);\r\n  return (\r\n    <div>\r\n      {currentLayoutState ? (\r\n        <ResponsiveGridLayout\r\n          className=\"card-layout\"\r\n          layouts={currentLayoutState.layout}\r\n          breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\r\n          cols={{ lg: 4, md: 4, sm: 4, xs: 4, xxs: 4 }}\r\n          rowHeight={size.y / 3}\r\n          margin={[20, 20]}\r\n          resizeHandles={[\"se\", \"ne\", \"e\", \"w\"]}\r\n          // onLayoutChange={(l, lays) => addEditHistory(lays)}\r\n          preventCollision={false}\r\n          onDragStart={(layout, oldItem, newItem, placeholder, e, element) => {\r\n            const prevStyle = element.style;\r\n            prevStyle.border = \"2px solid cyan\";\r\n            element.style.border = \"4px solid cyan\";\r\n          }}\r\n          onDragStop={(layout, oldItem, newItem, placeholder, e, element) => {\r\n            console.log(\"drag ended\");\r\n            console.log(element);\r\n            element.style.border = \"2px solid blue\";\r\n          }}\r\n          isDraggable={testViewMode}\r\n          isResizable={testViewMode}\r\n        >\r\n          <div key={\"clock\"}>\r\n            <ViewCard>\r\n              <Clock />\r\n            </ViewCard>\r\n          </div>\r\n          {/* {memoCards} */}\r\n          {activeCards.map((card: CardData, i: number) => {\r\n            return (\r\n              <div\r\n                //key provided here is the means of accesing a unique identifier for the cards\r\n                key={card.sourceId}\r\n                // style={cardContainerStyle}\r\n              >\r\n                <IXDrop key={i} droppableId={card.sourceId}>\r\n                  <ViewCard\r\n                    data={card}\r\n                    key={i.toString()}\r\n                    testkey={i.toString()}\r\n                    setModal={() => {\r\n                      activeKeyRef.current = i.toString();\r\n                    }}\r\n                    activeKey={activeKeyRef}\r\n                  >\r\n                    {activeCardKey == i.toString() ? (\r\n                      <Modal text={\"hello\"}></Modal>\r\n                    ) : (\r\n                      <div></div>\r\n                    )}\r\n\r\n                    <IFrameView src={card.src} />\r\n                  </ViewCard>\r\n                </IXDrop>\r\n              </div>\r\n            );\r\n          })}\r\n        </ResponsiveGridLayout>\r\n      ) : (\r\n        <div>not loaded</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default React.memo(CardGrid);\r\n// function propsAreEqual(\r\n//   prevProps: Readonly<PropsWithChildren<ViewCardProps>>,\r\n//   nextProps: Readonly<PropsWithChildren<ViewCardProps>>\r\n// ): boolean {\r\n//   console.log(prevProps.data);\r\n//   console.log(nextProps.data);\r\n//   return true;\r\n// }\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Particles from \"react-particles-js\";\r\nimport { useStoreState } from \"../hooks\";\r\nimport { AppMode } from \"../enums\";\r\nimport GridLines from \"react-gridlines\";\r\n/**\r\n * Background with particle animation.\r\n * @component\r\n */\r\n\r\nconst Background = (): JSX.Element => {\r\n  const viewMode = useStoreState((state) => state.appModel.appMode);\r\n  const [size, setSize] = useState({\r\n    x: window.innerWidth,\r\n    y: window.innerHeight,\r\n  });\r\n\r\n  const [backgroundStyle, setBackgroundStyle] = useState({\r\n    backgroundColor: \"gray\",\r\n  } as React.CSSProperties);\r\n  useEffect(() => {\r\n    const isEditMode = viewMode == AppMode.EDIT;\r\n\r\n    const style = {\r\n      position: \"absolute\",\r\n      height: \"100vh\",\r\n      width: \"100vw\",\r\n      top: 0,\r\n      left: 0,\r\n      backgroundColor: isEditMode ? \"white\" : \"gray\",\r\n      transition: \"background-color 0.5s ease\",\r\n    } as React.CSSProperties;\r\n    // console.log(viewMode);\r\n    setBackgroundStyle(style);\r\n  }, [viewMode]);\r\n  const bgFillSolid = {\r\n    position: \"absolute\",\r\n    height: \"100vh\",\r\n    width: \"100vw\",\r\n    top: 0,\r\n    left: 0,\r\n    backgroundColor: \"lightgrey\",\r\n    transition: \"background-color 0.5s ease\",\r\n  } as React.CSSProperties;\r\n  return (\r\n    <div style={backgroundStyle}>\r\n      {viewMode === AppMode.EDIT ? (\r\n        <div style={bgFillSolid}></div>\r\n      ) : (\r\n        // <GridLines\r\n        //   cellWidth={size.x / 50}\r\n        //   strokeWidth={2}\r\n        //   cellWidth2={size.x / 50}\r\n        //   className=\"grid-area\"\r\n        //   lineColor=\"gray\"\r\n        // />\r\n        <Particles />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Background;\r\n","import React, { FC, ReactNode } from \"react\";\r\nimport { Draggable, DraggableProps } from \"react-beautiful-dnd\";\r\nimport ReactTable from \"react-table\";\r\n// import \"react-table/react-table.css\";\r\n\r\ninterface IXDrag extends Omit<DraggableProps, \"children\"> {\r\n  className?: string;\r\n  children: ReactNode;\r\n  dragAll?: boolean;\r\n}\r\n\r\nconst XDrag: FC<IXDrag> = ({ className, children, dragAll, ...props }) => {\r\n  console.log(React.isValidElement(children));\r\n  // console.log(props);\r\n  if (!React.isValidElement(children)) return <div />;\r\n  // const child = React.memo(children, []);\r\n  return (\r\n    <Draggable {...props}>\r\n      {(provided, snapshot) => {\r\n        // const test = () => {\r\n        //   console.log(snapshot.isDragging);\r\n        // };\r\n        const dragHandleProps = dragAll ? provided.dragHandleProps : {};\r\n        return (\r\n          <>\r\n            <tr\r\n              className={className}\r\n              ref={provided.innerRef}\r\n              {...provided.draggableProps}\r\n              {...dragHandleProps}\r\n            >\r\n              {React.cloneElement(children, { provided })}\r\n              {/* {children, {provided}} */}\r\n              {/* {provided.placeholder} */}\r\n              {/* {children} */}\r\n            </tr>\r\n            <tr\r\n              style={{\r\n                display: snapshot.isDragging ? \"table-row\" : \"none\",\r\n                backgroundColor: snapshot.isDragging ? \"blue\" : \"none\",\r\n              }}\r\n            >\r\n              {React.cloneElement(children, { provided })}\r\n            </tr>\r\n          </>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nXDrag.defaultProps = {\r\n  dragAll: true,\r\n};\r\n\r\nexport default React.memo(XDrag);\r\n\r\n// class PureFatherWrapper extends React.PureComponent {\r\n//   render() {\r\n//     return (\r\n//       <PureFather>\r\n//         <SomeChild />\r\n//       </PureFather>\r\n//     );\r\n//   }\r\n// }\r\n// {\r\n//   /* <div\r\n// className={className}\r\n// ref={provided.innerRef}\r\n// {...provided.draggableProps}\r\n// {...dragHandleProps}\r\n// >\r\n// {React.cloneElement(children, { provided })}\r\n// </div> */\r\n// }\r\n","import React, { useState } from \"react\";\r\n\r\n/**\r\n * Wraps an Evergreen UI Button.\r\n * @component\r\n */\r\nconst TableHeader = ({\r\n  title,\r\n  onClick,\r\n}: {\r\n  title: string;\r\n  onClick?: () => void;\r\n}): JSX.Element => {\r\n  return <th onClick={onClick}>{title}</th>;\r\n};\r\n\r\nexport default TableHeader;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useStoreState } from \"../../../hooks\";\r\nimport IXDrop from \"../../IXDrop\";\r\nimport XDrag from \"../../XDrag\";\r\nimport CardData from \"../../../data_structs/CardData\";\r\nimport \"../../../css/table.css\";\r\nimport { TextInput, Menu, StatusIndicator } from \"evergreen-ui\";\r\nimport fuzzysort from \"fuzzysort\";\r\nimport TableHeader from \"../TableHeader\";\r\n\r\nconst ContentsTab = () => {\r\n  const availableCards = useStoreState(\r\n    (state) => state.appModel.availableCards\r\n  );\r\n  const [filterKey, setFilterKey] = useState<string | undefined>(undefined);\r\n  const [cardItems, setCardItems] = useState(availableCards);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(searchTerm);\r\n    const test = fuzzysort.go(\r\n      searchTerm,\r\n      cardItems.map((c) => c.title)\r\n    );\r\n    console.log(test);\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    const key = filterKey as keyof CardData;\r\n    const clone = [...availableCards];\r\n    setCardItems(\r\n      clone.sort((a, b) => {\r\n        const aText = a[key];\r\n        const bText = b[key];\r\n        console.log(aText, bText);\r\n        if (aText && bText) {\r\n          if (aText < bText) {\r\n            return -1;\r\n          }\r\n          if (aText > bText) {\r\n            return 1;\r\n          }\r\n        }\r\n        return 0;\r\n      })\r\n      // setCardItems(availableCards);\r\n    );\r\n    console.log(filterKey);\r\n  }, [filterKey, availableCards]);\r\n\r\n  const cardList = useRef<CardData[]>(availableCards);\r\n  // const sortBy = () => {}\r\n  const sortBy = (k: keyof CardData, func: (c: CardData) => number): void => {\r\n    const clone = [...cardList.current];\r\n    cardList.current = clone.sort(func);\r\n  };\r\n  useEffect(() => {\r\n    console.log(availableCards);\r\n  }, [availableCards]);\r\n  return (\r\n    <div>\r\n      <TextInput\r\n        onChange={(e: React.FormEvent<HTMLInputElement>) =>\r\n          setSearchTerm(e.currentTarget.value)\r\n        }\r\n        placeholder={\"search title\"}\r\n      ></TextInput>\r\n\r\n      <div style={{ paddingBottom: \".5em\", paddingTop: \".5em\" }}>\r\n        <Menu.Divider></Menu.Divider>\r\n      </div>\r\n      <IXDrop\r\n        className={\"table-container\"}\r\n        droppableId={\"Card Content Table\"}\r\n        isDropDisabled={true}\r\n      >\r\n        <table>\r\n          <tbody>\r\n            {/* <thead> */}\r\n            <tr>\r\n              <TableHeader\r\n                title={\"Title\"}\r\n                onClick={() => setFilterKey(\"title\")}\r\n              ></TableHeader>\r\n              <TableHeader\r\n                title={\"Date Added\"}\r\n                onClick={() => setFilterKey(\"added\")}\r\n              ></TableHeader>\r\n              <TableHeader\r\n                title={\"URL\"}\r\n                onClick={() => setFilterKey(\"sourceId\")}\r\n              ></TableHeader>\r\n              <TableHeader\r\n                title={\"Author\"}\r\n                onClick={() => setFilterKey(\"author\")}\r\n              ></TableHeader>\r\n              <TableHeader\r\n                title={\"Interaction\"}\r\n                onClick={() => setFilterKey(\"interaction\")}\r\n              ></TableHeader>\r\n            </tr>\r\n            {cardItems.map((card, i) => {\r\n              return (\r\n                <XDrag\r\n                  draggableId={card.sourceId}\r\n                  index={i}\r\n                  key={i.toString()}\r\n                  isDragDisabled={card.isActive}\r\n                  className={\r\n                    card.isActive\r\n                      ? \"content-row-active\"\r\n                      : \"contnet-row-inactive\"\r\n                  }\r\n                >\r\n                  <>\r\n                    <td>\r\n                      <div style={{ display: \"flex\" }}>\r\n                        <img\r\n                          className={\"row-favicon\"}\r\n                          src={`https://s2.googleusercontent.com/s2/favicons?domain_url=${card.src}`}\r\n                        ></img>\r\n                        <div\r\n                          style={{\r\n                            marginTop: \"auto\",\r\n                            marginBottom: \"auto\",\r\n                            textAlign: \"left\",\r\n                          }}\r\n                        >\r\n                          {card.title}\r\n                        </div>\r\n                      </div>\r\n                    </td>\r\n\r\n                    <td>{formatDate(card.added)}</td>\r\n                    <td>{card.src}</td>\r\n                    <td>{card.author}</td>\r\n                    <td>{card.interaction}</td>\r\n                  </>\r\n                </XDrag>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </IXDrop>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction formatDate(date: Date | undefined): string {\r\n  if (date) {\r\n    const d = new Date(date);\r\n    let month = \"\" + (d.getMonth() + 1);\r\n    let day = \"\" + d.getDate();\r\n    const year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = \"0\" + month;\r\n    if (day.length < 2) day = \"0\" + day;\r\n\r\n    return [year, month, day].join(\"-\");\r\n  } else {\r\n    return \"faulty date\";\r\n  }\r\n}\r\nexport default ContentsTab;\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import { Table } from \"evergreen-ui\";\r\n// import { useStoreState, useStoreActions } from \"../../hooks\";\r\n\r\n// const ContentTable = () => {\r\n//   // const [, setcur] = useState(value);\r\n//   const availableCards = useStoreState((state) => state.appData.availableCards);\r\n//   useEffect(()=>{\r\n//     console.log(availableCards);\r\n//   },[availableCards]);\r\n//   return (\r\n//     <div>\r\n//       <Table>\r\n//         <Table.Head>\r\n//           <Table.SearchHeaderCell />\r\n//           <Table.TextHeaderCell>Title</Table.TextHeaderCell>\r\n//           <Table.TextHeaderCell>URL</Table.TextHeaderCell>\r\n//           <Table.TextHeaderCell>Date Added</Table.TextHeaderCell>\r\n//         </Table.Head>\r\n\r\n//         {/* <Table.VirtualBody allowAutoHeight = {true} estimatedItemSize = {40}> */}\r\n//         <Table.VirtualBody height = {250} estimatedItemSize = {10}>\r\n//           {availableCards.map((card) => (\r\n//             <Table.Row\r\n//               height = {40}\r\n//               key={card.src}\r\n//               isSelectable\r\n//               onSelect={() => alert(card.src)}\r\n//             >\r\n//               <Table.TextCell>{card.src}</Table.TextCell>\r\n//               <Table.TextCell>{card.title}</Table.TextCell>\r\n//               <Table.TextCell>{card.added?.toString()??\"undefined\"}</Table.TextCell>\r\n//             </Table.Row>\r\n//           ))}\r\n//         </Table.VirtualBody>\r\n//       </Table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ContentTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Button from \"../../Shared/Button\";\r\nimport { useStoreState, useStoreActions } from \"../../../hooks\";\r\nimport {\r\n  perfTest1Cards,\r\n  perfTest2Cards,\r\n  perfTest3Cards,\r\n  perfTest4Cards,\r\n} from \"../../../static/performance_test_layouts\";\r\n\r\nconst PerformanceTests = () => {\r\n  const setAvailableCards = useStoreActions(\r\n    (actions) => actions.appModel.setActiveCards\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div>TEMP</div>\r\n    </>\r\n  );\r\n};\r\nexport default PerformanceTests;\r\n\r\n{\r\n  /* <Button\r\nonClick={() => {\r\n  setAvailableCards(perfTest1Cards);\r\n}}\r\ntext={\"Performance Test 1 - 3D\"}\r\n></Button>\r\n<Button\r\nonClick={() => {\r\n  setAvailableCards(perfTest2Cards);\r\n}}\r\ntext={\"Performance Test 2 - code\"}\r\n></Button>\r\n<Button\r\nonClick={() => {\r\n  setAvailableCards(perfTest3Cards);\r\n}}\r\ntext={\"Performance Test 3 - map\"}\r\n></Button>\r\n<Button\r\nonClick={() => {\r\n  setAvailableCards(perfTest4Cards);\r\n}}\r\ntext={\"Performance Test 4 - d3\"}\r\n></Button> */\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useStoreState, useStoreActions } from \"../../../../hooks\";\r\n\r\nconst LayoutsTable = () => {\r\n  const externalLayoutsState = useStoreState(\r\n    (state) => state.layoutsModel.externalLayouts\r\n  );\r\n  return (\r\n    <div>\r\n      <div>\r\n        <span>Current Layout</span>\r\n      </div>\r\n      <table>\r\n        <tr>\r\n          <th>Title</th>\r\n          <th>Date Added</th>\r\n          <th>Author</th>\r\n        </tr>\r\n        <tbody>\r\n          {externalLayoutsState.map((l, i) => {\r\n            return (\r\n              <tr key={i}>\r\n                <td key={i}>{l.title}</td>\r\n                <td>{l.added.toString()}</td>\r\n                <td>{l.author}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LayoutsTable;\r\n","import React, { useState, useEffect, FC } from \"react\";\r\nimport LayoutTable from \"./LayoutTable\";\r\nimport formEmbedUrl from \"../../../../static/formEmbedUrl\";\r\nimport Collapsible from \"react-collapsible\";\r\n\r\nconst LayoutTab: FC = () => {\r\n  return (\r\n    <>\r\n      <Collapsible trigger=\"Save Layout\">\r\n        <iframe\r\n          src={formEmbedUrl}\r\n          width={\"100%\"}\r\n          frameBorder={0}\r\n          marginHeight={0}\r\n          marginWidth={0}\r\n          style={{ height: \"60em\" }}\r\n        >\r\n          Loading…\r\n        </iframe>\r\n      </Collapsible>\r\n\r\n      <LayoutTable />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LayoutTab;\r\n","const formEmbedUrl =\r\n  \"https://docs.google.com/forms/d/e/1FAIpQLSeKP2imQv_UCj4qrGNk7mT6Rzz83F30IvEl8ZFdERIdzSnvig/viewform?usp=sf_link\";\r\n\r\nexport default formEmbedUrl;\r\n","import React from \"react\";\r\nimport { Heading } from \"evergreen-ui\";\r\nimport DropDownMenu from \"../Shared/DropDownMenu\";\r\nimport { AppMode } from \"../../enums\";\r\nimport \"../../css/editorPanel.css\";\r\nimport ContentTable from \"./EditorTabs/ContentsTab\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport PerformanceTests from \"./EditorSection/PerformanceTests\";\r\nimport LayoutTab from \"./EditorTabs/LayoutTab/LayoutTab\";\r\n// https://github.com/goodoldneon/react-drag-and-dock#api\r\n\r\nconst Editor = (): JSX.Element => {\r\n  return (\r\n    <div className=\"editor-form-container\">\r\n      <Tabs>\r\n        <TabList>\r\n          <Tab>Content</Tab>\r\n          <Tab>Layouts</Tab>\r\n          <Tab>Performance Tests</Tab>\r\n        </TabList>\r\n        <TabPanel>\r\n          <ContentTable />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <LayoutTab />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <PerformanceTests />\r\n        </TabPanel>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface FormSectionProps {\r\n  title: string;\r\n  children: JSX.Element | JSX.Element[];\r\n}\r\nconst FormSection = ({ title, children }: FormSectionProps) => {\r\n  return (\r\n    <div className={\"form-section-container\"}>\r\n      <div className={\"form-section-header\"}>\r\n        <Heading size={500}>{title}</Heading>\r\n      </div>\r\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { useState, FC } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport ReactDom from \"react-dom\";\r\nimport DragAndDock from \"react-drag-and-dock\";\r\nimport Editor from \"./Editor\";\r\nimport { Heading, FullscreenIcon, MinimizeIcon } from \"evergreen-ui\";\r\nimport { useStoreState, useStoreActions } from \"../../hooks\";\r\nimport \"../../css/editorPanel.css\";\r\nimport classNames from \"classnames\";\r\nimport { AppMode } from \"../../enums\";\r\n\r\n// https://github.com/goodoldneon/react-drag-and-dock#api\r\n\r\ninterface EditorPanelProps {\r\n  visible: boolean;\r\n}\r\n\r\nconst EditorPanel: FC = () => {\r\n  const [minimized, setMinimized] = useState(false);\r\n  const viewModeState = useStoreState((state) => state.appModel.appMode);\r\n\r\n  const editorPanelClass = classNames(\"editor-panel\", {\r\n    \"editor-panel-full\": !minimized,\r\n    hidden: viewModeState === AppMode.DISPLAY,\r\n    \"editor-panel-minimized\": minimized,\r\n  });\r\n  const editorClass = classNames(\"editor\", {\r\n    \"editor-visible\": viewModeState === AppMode.EDIT,\r\n  });\r\n  const panelOverlayClass = classNames(\"panel-overlay\", {\r\n    \"panel-overlay-visible\": minimized,\r\n    \"panel-overlay-hidden\": !minimized,\r\n  });\r\n\r\n  const styles = {\r\n    root: { display: \"none !important\", border: \"5px solid red !important\" },\r\n    handle: { display: \"none\" },\r\n  };\r\n  return ReactDom.createPortal(\r\n    <>\r\n      <Draggable\r\n        handle=\".editor-panel-handle\"\r\n        defaultClassName={editorPanelClass}\r\n        defaultPosition={{ x: 100, y: 100 }}\r\n      >\r\n        <div className={editorClass}>\r\n          <PanelHeader\r\n            onMinimize={() => {\r\n              setMinimized(!minimized);\r\n            }}\r\n            visible={viewModeState === AppMode.EDIT}\r\n          ></PanelHeader>\r\n          <div\r\n            className={panelOverlayClass}\r\n            onMouseUp={() => setMinimized(false)}\r\n          >\r\n            <div className={\"overlay-icon-container\"}>\r\n              <FullscreenIcon size={30}></FullscreenIcon>\r\n            </div>\r\n          </div>\r\n          <Editor />\r\n        </div>\r\n      </Draggable>\r\n    </>,\r\n    document.getElementById(\"editor-panel-container\") as HTMLDivElement\r\n  );\r\n};\r\n\r\nexport default EditorPanel;\r\n\r\n// interface PanelHeader{\r\n\r\n// }\r\ninterface PanelHeaderProps {\r\n  onMinimize: () => void;\r\n  visible: boolean;\r\n}\r\nconst PanelHeader = ({ onMinimize, visible }: PanelHeaderProps) => {\r\n  return (\r\n    <div className={\"editor-panel-handle panel-header\"}>\r\n      {/* <Heading>Editor</Heading> */}\r\n      <div onMouseUp={onMinimize} className={\"panel-minimize-button\"}>\r\n        <MinimizeIcon></MinimizeIcon>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n{\r\n  /* <DragAndDock.Provider>\r\n<DragAndDock.Area>\r\n  <DragAndDock.Area.Panel\r\n    styles={styles}\r\n    className={\"my panel\"}\r\n    title=\"\"\r\n    defaultPosition={{ x: 100, y: 100 }}\r\n    defaultHeight={minimized ? 100 : 500}\r\n    defaultWidth={minimized ? 100 : 500}\r\n  >\r\n    <div className={editorClass} ref={parentRef}>\r\n      <PanelHeader\r\n        onMinimize={() => {\r\n          setMinimized(!minimized);\r\n        }}\r\n        visible={visible}\r\n      ></PanelHeader>\r\n      <EditorForm />\r\n    </div>\r\n  </DragAndDock.Area.Panel>\r\n</DragAndDock.Area>\r\n</DragAndDock.Provider>\r\n</> */\r\n}\r\n","import React, { useEffect, FC, useState } from \"react\";\nimport \"./App.global.css\";\nimport { useStoreState, useStoreActions } from \"./hooks\";\nimport CardGrid from \"./componets/CardLayout\";\nimport Background from \"./componets/Background\";\nimport { AppMode } from \"./enums\";\nimport { useKeyPress, useKeyPressEvent } from \"react-use\";\nimport {\n  DropResult,\n  DragDropContext,\n  DraggableLocation,\n} from \"react-beautiful-dnd\";\nimport EditorPanel from \"./componets/EditorPanel/EditorPanel\";\nimport type { SwapInfo } from \"./model/layoutsModel\";\n\n/**\n * High level container, the root component. Initial fetch requests to spreadsheets are made here via a useEffect hook.\n * @component\n */\n\nconst App: FC = () => {\n  const toggleViewModeThunk = useStoreActions(\n    (actions) => actions.appModel.toggleViewMode\n  );\n\n  // useKeyPressEvent(\"F4\", toggleViewModeThunk());\n\n  const fetchCardDataGoogleSheetThunk = useStoreActions(\n    (actions) => actions.googleSheetsModel.fetchCardDataGoogleSheet\n  );\n  const fetchLayoutDataGoogleSheetThunk = useStoreActions(\n    (actions) => actions.googleSheetsModel.fetchLayoutDataGoogleSheet\n  );\n  const loadLocalLayoutsAction = useStoreActions(\n    (actions) => actions.appModel.loadLocalLayouts\n  );\n  const swapCardDataAction = useStoreActions(\n    (actions) => actions.layoutsModel.swapCardContent\n  );\n\n  useEffect(() => {\n    fetchCardDataGoogleSheetThunk();\n    fetchLayoutDataGoogleSheetThunk();\n    loadLocalLayoutsAction();\n    console.log(\"fetching data\");\n  }, []);\n\n  // useEffect(() => {\n  //   setAvailableLayouts(localStorageLayouts);\n  // }, [localStorageLayouts]);\n\n  const containerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n  };\n\n  // const onChange = (\n  //   source: DraggableLocation,\n  //   destination: DraggableLocation\n  // ) => {\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return true;\n  //   }\n  //   return false;\n  // };\n  const onDragEnd = (res: DropResult) => {\n    console.log(\"processing drag end\");\n    if (res.destination?.droppableId == res.source?.droppableId) return;\n    console.log(res);\n    const { source, destination, draggableId } = res;\n    console.log(source, destination, draggableId);\n    console.log(\n      `dragged from ${draggableId} to ${\n        destination?.droppableId\n      } current title: ${\"yes\"}`\n    );\n    if (!destination) return;\n    swapCardDataAction({\n      sourceId: draggableId,\n      targetId: destination.droppableId,\n    });\n  };\n\n  return (\n    <>\n      <div\n        onKeyUp={(e) => {\n          // console.log(e);\n          // console.log(e.key);\n          if (e.key === \"F4\") {\n            toggleViewModeThunk();\n          }\n        }}\n        tabIndex={0}\n      >\n        <Background />\n        <DragDropContext onDragEnd={onDragEnd}>\n          <EditorPanel />\n          {/* <EditorPanel visible={viewModeState === AppMode.EDIT} /> */}\n          <div style={containerStyle}>\n            <CardGrid />\n          </div>\n        </DragDropContext>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import type RawCardRow from \"../interfaces/RawCardRow\";\r\nimport { InteractionType } from \"../enums\";\r\n\r\n/**\r\n *\r\n */\r\nexport default class CardData {\r\n  readonly src: string;\r\n  readonly title: string;\r\n  readonly added?: Date;\r\n  readonly sourceId: string;\r\n  readonly author: string;\r\n  readonly interaction: InteractionType;\r\n  isActive!: boolean;\r\n  // instanceId!: string;\r\n\r\n  constructor(row: RawCardRow) {\r\n    console.log(row);\r\n    this.src = row.src;\r\n    this.title = row.title;\r\n    this.added = new Date(row.added);\r\n    this.sourceId = row.src;\r\n    this.author = row.author;\r\n    this.interaction =\r\n      InteractionType[row.interaction as keyof typeof InteractionType];\r\n    this.isActive = false;\r\n  }\r\n  set_active(b: boolean) {\r\n    this.isActive = b;\r\n  }\r\n}\r\n","import { Layout, Layouts } from \"react-grid-layout\";\r\n// const availableHandles: ResizeHandle[] = [\r\n//   \"s\",\r\n//   \"w\",\r\n//   \"e\",\r\n//   \"n\",\r\n//   \"sw\",\r\n//   \"nw\",\r\n//   \"se\",\r\n//   \"ne\",\r\n// ];\r\nconst defaultGridLayoutArr: Layout[] = [\r\n  { i: \"clock\", x: 0, y: 0, w: 2, h: 1, static: true },\r\n  {\r\n    i: \"https://codepen.io/rcyou/embed/QEObEk?height=265&theme-id=light&default-tab=css,result\",\r\n    x: 0,\r\n    y: 1,\r\n    w: 1,\r\n    h: 1,\r\n    static: true,\r\n  },\r\n  {\r\n    i: \"https://sketchfab.com/models/e55956fee6444011b574bad021a03eae/embed?autostart=1\",\r\n    x: 2,\r\n    y: 0,\r\n    w: 1,\r\n    h: 1,\r\n    minW: 2,\r\n    maxW: 4,\r\n  },\r\n  {\r\n    i: \"https://leafletjs.com/examples/choropleth/example.html\",\r\n    x: 2,\r\n    y: 0,\r\n    w: 1,\r\n    h: 1,\r\n  },\r\n  {\r\n    i: \"https://observablehq.com/embed/@d3/zoomable-circle-packing?cells=chart\",\r\n    x: 3,\r\n    y: 0,\r\n    w: 1,\r\n    h: 1,\r\n  },\r\n  {\r\n    i: \"https://observablehq.com/embed/@d3/zoomable-sunburst?cells=chart\",\r\n    x: 0,\r\n    y: 1,\r\n    w: 1,\r\n    h: 1,\r\n  },\r\n  {\r\n    i: \"https://observablehq.com/embed/@d3/sortable-bar-chart?cells=chart\",\r\n    x: 1,\r\n    y: 1,\r\n    w: 1,\r\n    h: 1,\r\n  },\r\n  {\r\n    i: \"https://observablehq.com/embed/@d3/zoom-to-bounding-box?cells=chart\",\r\n    x: 2,\r\n    y: 1,\r\n    w: 1,\r\n    h: 1,\r\n  },\r\n  {\r\n    i: \"https://observablehq.com/embed/@d3/collapsible-tree?cells=chart\",\r\n    x: 3,\r\n    y: 1,\r\n    w: 1,\r\n    h: 1,\r\n  },\r\n  {\r\n    i: \"https://observablehq.com/embed/@d3/world-tour?cells=canvas\",\r\n    x: 0,\r\n    y: 3,\r\n    w: 1,\r\n    h: 1,\r\n  },\r\n  {\r\n    i: \"https://observablehq.com/embed/@mbostock/icelandic-population-by-age-1841-2019?cells=chart\",\r\n    x: 1,\r\n    y: 3,\r\n    w: 1,\r\n    h: 1,\r\n  },\r\n];\r\n\r\n// const defaultGridLayoutArr: Layout[] = [\r\n//   { i: \"clock\", x: 0, y: 0, w: 2, h: 1, static: true },\r\n//   {\r\n//     i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_1\",\r\n//     x: 0,\r\n//     y: 1,\r\n//     w: 1,\r\n//     h: 1,\r\n//     static: true,\r\n//   },\r\n//   {\r\n//     i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_3\",\r\n//     x: 2,\r\n//     y: 0,\r\n//     w: 1,\r\n//     h: 1,\r\n//     minW: 2,\r\n//     maxW: 4,\r\n//   },\r\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_3\", x: 2, y: 0, w: 1, h: 1 },\r\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_3\", x: 3, y: 0, w: 1, h: 1 },\r\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_5\", x: 0, y: 1, w: 1, h: 1 },\r\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_6\", x: 1, y: 1, w: 1, h: 1 },\r\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_7\", x: 2, y: 1, w: 1, h: 1 },\r\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_8\", x: 3, y: 1, w: 1, h: 1 },\r\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_9\", x: 0, y: 3, w: 1, h: 1 },\r\n//   { i: \"b2d9c003-8edc-4304-a05e-d78b9e8f782f_10\", x: 1, y: 3, w: 1, h: 1 },\r\n// ];\r\n\r\nconst defaultLayouts: Layouts = {\r\n  lg: defaultGridLayoutArr,\r\n  md: defaultGridLayoutArr,\r\n  sm: defaultGridLayoutArr,\r\n  xs: defaultGridLayoutArr,\r\n  xxs: defaultGridLayoutArr,\r\n};\r\n\r\nconsole.log(JSON.stringify(defaultLayouts));\r\nexport default defaultLayouts;\r\n","import { Layouts } from \"react-grid-layout\";\r\n/**\r\n *\r\n */\r\nexport default class History {\r\n  events!: Layouts[];\r\n  currentStep!: number;\r\n\r\n  constructor() {\r\n    const emptyLayoutsArr: Layouts[] = [];\r\n    this.events = emptyLayoutsArr;\r\n    this.currentStep = 0;\r\n  }\r\n  addEditEvent(event: Layouts) {\r\n    this.currentStep += 1;\r\n    this.events.push(event);\r\n  }\r\n  undo(): Layouts {\r\n    console.log(this.currentStep);\r\n    this.currentStep -= 1;\r\n    return this.events[this.currentStep];\r\n  }\r\n  redo(): Layouts {\r\n    console.log(this.currentStep);\r\n    this.currentStep += 1;\r\n    return this.events[this.currentStep];\r\n  }\r\n}\r\n","import {\r\n  action,\r\n  thunk,\r\n  Thunk,\r\n  Action,\r\n  ActionOn,\r\n  thunkOn,\r\n  ThunkOn,\r\n  debug,\r\n  actionOn,\r\n} from \"easy-peasy\";\r\nimport { getSheet } from \"../utils\";\r\nimport CardData from \"../data_structs/CardData\";\r\nimport type RawCardRow from \"../interfaces/RawCardRow\";\r\nimport { Layouts, Layout } from \"react-grid-layout\";\r\nimport defaultGridLayout from \"../static/defaultLayouts\";\r\nimport { AppMode } from \"../enums\";\r\nimport History from \"../data_structs/History\";\r\nimport { StoreModel } from \"./index\";\r\n/**\r\n * Core app model\r\n * @param\r\n */\r\nexport interface AppDataModel {\r\n  //state\r\n  availableCards: CardData[];\r\n  activeCards: CardData[];\r\n  currentLayout: Layouts;\r\n  appMode: AppMode;\r\n  history: History;\r\n  localStorageLayouts: any[];\r\n\r\n  //requests\r\n  // fetchGoogleSheet: Thunk<AppDataModel>;\r\n\r\n  //loaders\r\n  loadLocalLayouts: Action<AppDataModel>;\r\n\r\n  //listeners\r\n  onCardSheetLoadSuccess: ActionOn<AppDataModel, StoreModel>;\r\n  onSwapCardContent: ThunkOn<AppDataModel, never, StoreModel>;\r\n  onSetActiveLayout: ThunkOn<AppDataModel, never, StoreModel>;\r\n  //managers\r\n  manageViewModeChange: Thunk<AppDataModel, AppMode>;\r\n  toggleViewMode: Thunk<AppDataModel, never>;\r\n  //simple setters\r\n  setAppMode: Action<AppDataModel, AppMode>;\r\n  setCurrentLayout: Action<AppDataModel, Layouts>;\r\n  setActiveCards: Action<AppDataModel, CardData[]>;\r\n  setAvailableCards: Action<AppDataModel, CardData[]>;\r\n  //listeners\r\n  onUndoHistory: ThunkOn<AppDataModel, never, StoreModel>;\r\n  onRedoHistory: ThunkOn<AppDataModel, never, StoreModel>;\r\n\r\n  //clear\r\n  clearLocalLayouts: Action<AppDataModel>;\r\n\r\n  //local storage\r\n  saveLayoutLocal: Thunk<AppDataModel>;\r\n}\r\n\r\nconst appModel: AppDataModel = {\r\n  //state\r\n  availableCards: [],\r\n  activeCards: [],\r\n  currentLayout: defaultGridLayout,\r\n  appMode: AppMode.DISPLAY,\r\n  history: new History(),\r\n  localStorageLayouts: [],\r\n\r\n  //managers\r\n  manageViewModeChange: thunk((actions, viewModeEnum) => {\r\n    console.log(viewModeEnum);\r\n    actions.setAppMode(viewModeEnum);\r\n    switch (viewModeEnum) {\r\n      case AppMode.EDIT:\r\n        break;\r\n      case AppMode.DISPLAY:\r\n        break;\r\n      case AppMode.CYCLE:\r\n        break;\r\n      default:\r\n        console.log(\"reached default in set view mode thunk\");\r\n    }\r\n  }),\r\n  toggleViewMode: thunk((actions, _, { getState }) => {\r\n    console.log(\"toggling view mod \");\r\n    switch (getState().appMode) {\r\n      case AppMode.EDIT:\r\n        actions.setAppMode(AppMode.DISPLAY);\r\n        break;\r\n      case AppMode.DISPLAY:\r\n        actions.setAppMode(AppMode.EDIT);\r\n        break;\r\n      case AppMode.CYCLE:\r\n        break;\r\n      default:\r\n        console.log(\"reached default in set view mode thunk\");\r\n    }\r\n    console.log(getState().appMode);\r\n  }),\r\n  setCurrentLayout: action((state, layoutArr) => {\r\n    state.currentLayout = layoutArr;\r\n  }),\r\n  setAvailableCards: action((state, cardDataArr) => {\r\n    console.log(\"setting available cards\");\r\n    state.availableCards = cardDataArr;\r\n  }),\r\n  setActiveCards: action((state, cardDataArr) => {\r\n    console.log(\"setting active cards\");\r\n    console.log(cardDataArr);\r\n    state.activeCards = cardDataArr;\r\n  }),\r\n  setAppMode: action((state, viewModeEnum) => {\r\n    console.log(\"setting view mode\");\r\n    state.appMode = viewModeEnum;\r\n  }),\r\n\r\n  //listeners\r\n  onCardSheetLoadSuccess: actionOn(\r\n    // targetResolver:\r\n    (actions, storeActions) =>\r\n      storeActions.googleSheetsModel.setCardDataGoogleSheet,\r\n    // handler:\r\n    (state, target) => {\r\n      console.log(\"diong on cart sheet load success\");\r\n      console.log(target.payload);\r\n      const cards = target.payload.data.map((c: RawCardRow) => new CardData(c));\r\n      console.log(cards);\r\n      state.availableCards = cards;\r\n    }\r\n  ),\r\n\r\n  onSetActiveLayout: thunkOn(\r\n    (actions, storeActions) => storeActions.layoutsModel.setActiveLayout,\r\n    async (actions, payload, { getState }) => {\r\n      console.log(\"listened for setActiveLayout at app_model\");\r\n      const activeSources = payload.payload\r\n        .sources()\r\n        .filter((s) => s !== \"clock\");\r\n      console.log(activeSources);\r\n      //async thunk issue\r\n      console.log(getState().availableCards);\r\n      const availableCardsUpdated = getState().availableCards.map((card) => {\r\n        if (activeSources.includes(card.sourceId)) {\r\n          card.set_active(true);\r\n        } else {\r\n          card.set_active(false);\r\n        }\r\n        return card;\r\n      });\r\n      const activeCards = getState().availableCards.filter((card) => {\r\n        return activeSources.includes(card.sourceId);\r\n      });\r\n      actions.setAvailableCards(availableCardsUpdated);\r\n      actions.setActiveCards(activeCards);\r\n      console.log(activeCards);\r\n    }\r\n  ),\r\n\r\n  onSwapCardContent: thunkOn(\r\n    (actions, storeActions) => storeActions.layoutsModel.swapCardContent,\r\n    async (actions, payload, { getState }) => {\r\n      console.log(\"got swap card content\");\r\n      console.log(payload.payload);\r\n      console.log(getState().activeCards);\r\n      const newCards = getState().activeCards.map((c) => {\r\n        if (c.sourceId === payload.payload.targetId) {\r\n          const newSource = getState().availableCards.filter(\r\n            (c) => c.sourceId === payload.payload.sourceId\r\n          )[0];\r\n          console.log(newSource);\r\n          return newSource;\r\n        } else {\r\n          return c;\r\n        }\r\n      });\r\n      actions.setActiveCards(newCards);\r\n      console.log(debug(payload));\r\n    }\r\n  ),\r\n\r\n  onUndoHistory: thunkOn(\r\n    (actions, storeActions) => storeActions.historyModel.setCurrentHistory,\r\n    async (actions, payload, { injections }) => {\r\n      console.log(\"got undo\");\r\n      console.log(payload.payload);\r\n      actions.setCurrentLayout(payload.payload);\r\n      console.log(debug(payload));\r\n    }\r\n  ),\r\n  onRedoHistory: thunkOn(\r\n    (actions, storeActions) => storeActions.historyModel.setCurrentHistory,\r\n    async (actions, payload, { injections }) => {\r\n      console.log(\"got redo\");\r\n      console.log(payload.payload);\r\n      actions.setCurrentLayout(payload.payload);\r\n      console.log(debug(payload));\r\n    }\r\n  ),\r\n  //local storage\r\n  clearLocalLayouts: action((state) => {\r\n    localStorage.clear();\r\n    state.localStorageLayouts = [];\r\n  }),\r\n  loadLocalLayouts: action((state) => {\r\n    const layouts: any = Object.keys(localStorage)\r\n      .filter((k) => k.startsWith(\"curLayout\"))\r\n      .map((k) => ({\r\n        name: k,\r\n        layout: JSON.parse(localStorage[k]) as Layout[],\r\n      }));\r\n    state.localStorageLayouts = layouts;\r\n  }),\r\n  saveLayoutLocal: thunk((actions, _, { getState }) => {\r\n    localStorage.setItem(\r\n      `curLayout_${localStorage.length}`,\r\n      JSON.stringify(getState().currentLayout)\r\n    );\r\n    actions.loadLocalLayouts();\r\n  }),\r\n};\r\n\r\nexport default appModel;\r\n","import { action, Action, thunk, Thunk, thunkOn, ThunkOn } from \"easy-peasy\";\r\nimport History from \"../data_structs/History\";\r\nimport { Layouts } from \"react-grid-layout\";\r\n\r\nexport interface HistoryModel {\r\n  history: History;\r\n  addEditHistory: Action<HistoryModel, Layouts>;\r\n  undoIt: Action<HistoryModel>;\r\n  redoIt: Action<HistoryModel>;\r\n  undoHistory: Thunk<HistoryModel>;\r\n  setCurrentHistory: Action<HistoryModel, Layouts>;\r\n  // onAddTodo: ThunkOn<HistoryModel, any, StoreModel>;\r\n}\r\nconst historyModel: HistoryModel = {\r\n  history: new History(),\r\n  undoHistory: thunk((actions, _, { getState }) => {\r\n    // console.log(payload);\r\n    actions.undoIt();\r\n    actions.setCurrentHistory(getState().history.undo());\r\n    // const newLayouts = state.history.undo();\r\n    // console.log(newLayouts);\r\n  }),\r\n  undoIt: action((state) => {\r\n    state.history.undo();\r\n    console.log(state.history.currentStep);\r\n    // console.log(payload);\r\n  }),\r\n  redoIt: action((state) => {\r\n    state.history.redo();\r\n    console.log(state.history.currentStep);\r\n    // console.log(payload);\r\n  }),\r\n  setCurrentHistory: action((state, payload) => {\r\n    console.log(payload);\r\n  }),\r\n  // undoHistory: action((state, layouts) => {\r\n  //   console.log(layouts);\r\n  //   const newLayouts = state.history.undo();\r\n  //   console.log(newLayouts);\r\n  // }),\r\n\r\n  // undoHistory: action((state, layouts) => {\r\n  //   console.log(layouts);\r\n  //   const newLayouts = state.history.undo();\r\n  //   console.log(newLayouts);\r\n  // }),\r\n  addEditHistory: action((state, layouts) => {\r\n    console.log(\"adding edit history\");\r\n    console.log(layouts);\r\n    const test = JSON.stringify(layouts);\r\n    console.log(test);\r\n    state.history.addEditEvent(layouts);\r\n  }),\r\n};\r\n\r\nexport default historyModel;\r\n","import { Layout, Layouts } from \"react-grid-layout\";\r\nimport type RawLayoutRow from \"../interfaces/RawLayoutRow\";\r\nimport type { SwapInfo } from \"../model/layoutsModel\";\r\nexport default class LayoutData {\r\n  readonly title: string;\r\n  readonly author: string;\r\n  readonly added: Date;\r\n  readonly layout: Layouts;\r\n\r\n  constructor(row: RawLayoutRow) {\r\n    this.title = row.title;\r\n    this.author = row.author;\r\n    this.added = new Date(row.Timestamp);\r\n    this.layout = JSON.parse(row.layout);\r\n  }\r\n  swapCard(swapInfo: SwapInfo) {\r\n    for (const [k, v] of Object.entries(this.layout)) {\r\n      // console.log(v);\r\n      // console.log(k);\r\n      v.forEach((layoutVal, i) => {\r\n        if (layoutVal.i == swapInfo.targetId) {\r\n          v[i].i = swapInfo.sourceId;\r\n        }\r\n      });\r\n      this.layout[k] = v;\r\n    }\r\n  }\r\n  sources(): string[] {\r\n    return this.layout.lg.map((l) => l.i);\r\n  }\r\n}\r\n","import {\r\n  action,\r\n  thunk,\r\n  Thunk,\r\n  Action,\r\n  thunkOn,\r\n  ThunkOn,\r\n  debug,\r\n} from \"easy-peasy\";\r\nimport LayoutData from \"../data_structs/LayoutData\";\r\nimport type GoogleSheet from \"../interfaces/GoogleSheet\";\r\nimport { getSheet } from \"../utils\";\r\nimport { StoreModel } from \"./index\";\r\nimport CardData from \"../data_structs/CardData\";\r\nimport { Layouts } from \"react-grid-layout\";\r\n\r\nexport interface SwapInfo {\r\n  sourceId: string;\r\n  targetId: string;\r\n}\r\n\r\nexport interface LayoutsModel {\r\n  //state\r\n  activeLayout: LayoutData | undefined;\r\n  externalLayouts: LayoutData[];\r\n\r\n  //listeners\r\n  onLayoutSheetLoadSuccess: ThunkOn<LayoutsModel, never, StoreModel>;\r\n\r\n  //requests\r\n\r\n  //simple setters\r\n  setActiveLayout: Action<LayoutsModel, LayoutData>;\r\n  setExternalLayouts: Action<LayoutsModel, LayoutData[]>;\r\n\r\n  updateLayout: Action<LayoutsModel, SwapInfo>;\r\n  //update\r\n  swapCardContent: Thunk<LayoutsModel, SwapInfo, StoreModel>;\r\n}\r\n\r\nconst layoutsModel: LayoutsModel = {\r\n  //state\r\n  activeLayout: undefined,\r\n  externalLayouts: [],\r\n\r\n  //listeners\r\n  onLayoutSheetLoadSuccess: thunkOn(\r\n    // targetResolver:\r\n    (actions, storeActions) =>\r\n      storeActions.googleSheetsModel.setLayoutDataGoogleSheet,\r\n    // handler:\r\n    (actions, target) => {\r\n      console.log(\"diong on cart sheet load success\");\r\n      console.log(target.payload);\r\n      const layouts = target.payload.data.map((l) => new LayoutData(l));\r\n      const defaultLayout = layouts.filter(\r\n        (l) => l.title === \"Default_Layout_1\"\r\n      )[0];\r\n      actions.setActiveLayout(defaultLayout);\r\n      actions.setExternalLayouts(layouts);\r\n      console.log(layouts);\r\n    }\r\n  ),\r\n  //simple setters\r\n  setActiveLayout: action((state, newActiveLayout) => {\r\n    console.log(\"setting active layout\");\r\n    state.activeLayout = newActiveLayout;\r\n  }),\r\n  setExternalLayouts: action((state, newLayoutArr) => {\r\n    console.log(\"setting external layouts\");\r\n    state.externalLayouts = newLayoutArr;\r\n  }),\r\n  swapCardContent: thunk(\r\n    (actions, swapInfo, { getState, getStoreState, getStoreActions }) => {\r\n      const curModel = getStoreState() as StoreModel;\r\n      const activeCards = curModel.appModel.activeCards;\r\n      const prevLayout = getState().activeLayout;\r\n      if (prevLayout) {\r\n        prevLayout.swapCard(swapInfo);\r\n        actions.setActiveLayout(prevLayout);\r\n      }\r\n    }\r\n  ),\r\n  updateLayout: action((state, swap) => {\r\n    const old = state.activeLayout;\r\n    if (old) {\r\n      old.swapCard(swap);\r\n      console.log(old.layout);\r\n      state.activeLayout = old;\r\n    }\r\n  }),\r\n};\r\n\r\nexport default layoutsModel;\r\n","import type GoogleSheet from \"./interfaces/GoogleSheet\";\r\nimport type SheetId from \"./interfaces/SheetId\";\r\nimport GetSheetDone from \"get-sheet-done\";\r\n\r\nexport function getSheet<T>(sheetId: SheetId): Promise<GoogleSheet<T>> {\r\n  return new Promise<GoogleSheet<T>>(function (resolve, reject) {\r\n    GetSheetDone.labeledCols(sheetId.key, sheetId.sheet_number)\r\n      .then((sheet: GoogleSheet<T>) => {\r\n        console.log(sheet);\r\n        resolve(sheet);\r\n      })\r\n      .catch((err: unknown) => {\r\n        console.error(\r\n          `Error: ${err} fetching DOC_KEY ${sheetId.key}, sheet number ${sheetId.sheet_number}`\r\n        );\r\n      });\r\n  });\r\n}\r\n","import type SheetId from \"../interfaces/SheetId\";\r\n\r\nconst cardDataSheetKey: SheetId = {\r\n  key: \"181P-SDszUOj_xn1HJ1DRrO8pG-LXyXNmINcznHeoK8k\",\r\n  sheet_number: 1,\r\n};\r\nexport default cardDataSheetKey;\r\n","import appData, { AppDataModel } from \"./appModel\";\r\nimport historyData, { HistoryModel } from \"./historyModel\";\r\nimport layoutsModel, { LayoutsModel } from \"./layoutsModel\";\r\nimport googleSheetsModel, { GoogleSheetsModel } from \"./googleSheetsModel\";\r\n// https://codesandbox.io/s/easy-peasy-typescript-v3-riqbl?file=/src/model/todos.ts\r\n\r\nexport interface StoreModel {\r\n  appModel: AppDataModel;\r\n  historyModel: HistoryModel;\r\n  layoutsModel: LayoutsModel;\r\n  googleSheetsModel: GoogleSheetsModel;\r\n}\r\n\r\nconst model: StoreModel = {\r\n  appModel: appData,\r\n  historyModel: historyData,\r\n  layoutsModel: layoutsModel,\r\n  googleSheetsModel: googleSheetsModel,\r\n};\r\n\r\nexport default model;\r\n","import { action, Action, thunk, Thunk } from \"easy-peasy\";\r\nimport type GoogleSheet from \"../interfaces/GoogleSheet\";\r\nimport type RawCardRow from \"../interfaces/RawCardRow\";\r\nimport type RawLayoutRow from \"../interfaces/RawLayoutRow\";\r\n\r\nimport { getSheet } from \"../utils\";\r\nimport cardDataSheetKey from \"../static/cardDataSheetKey\";\r\n\r\ntype Result =\r\n  | { success: true; value: unknown }\r\n  | { success: false; error: Error };\r\n\r\nexport interface GoogleSheetsModel {\r\n  //state\r\n  cardDataGoogleSheet: GoogleSheet<RawCardRow> | null;\r\n  layoutDataGoogleSheet: GoogleSheet<RawLayoutRow> | null;\r\n\r\n  //requests\r\n  fetchCardDataGoogleSheet: Thunk<GoogleSheetsModel>;\r\n  fetchLayoutDataGoogleSheet: Thunk<GoogleSheetsModel>;\r\n\r\n  //setters\r\n  setCardDataGoogleSheet: Action<GoogleSheetsModel, GoogleSheet<RawCardRow>>;\r\n  setLayoutDataGoogleSheet: Action<\r\n    GoogleSheetsModel,\r\n    GoogleSheet<RawLayoutRow>\r\n  >;\r\n}\r\n/**\r\n * Responsible for making requestst to google sheetst. Other models must listen this model to intercept the sheet payload.\r\n * Also stores the fetch data purely for debugging purposes.\r\n */\r\n\r\nconst googleSheetsModel: GoogleSheetsModel = {\r\n  //state\r\n  layoutDataGoogleSheet: null,\r\n  cardDataGoogleSheet: null,\r\n  //requests\r\n  fetchCardDataGoogleSheet: thunk(async (actions, _, { getState }) => {\r\n    getSheet<RawCardRow>(cardDataSheetKey).then((sheet) => {\r\n      console.log(sheet);\r\n      actions.setCardDataGoogleSheet(sheet);\r\n    });\r\n  }),\r\n  fetchLayoutDataGoogleSheet: thunk(async (actions, _, { getState }) => {\r\n    const tempCardLayout = {\r\n      key: cardDataSheetKey.key,\r\n      sheet_number: 2,\r\n    };\r\n    getSheet<RawLayoutRow>(tempCardLayout).then((sheet) => {\r\n      console.log(sheet);\r\n      actions.setLayoutDataGoogleSheet(sheet);\r\n    });\r\n  }),\r\n  //setters\r\n  setCardDataGoogleSheet: action((state, sheet) => {\r\n    state.cardDataGoogleSheet = sheet;\r\n  }),\r\n  setLayoutDataGoogleSheet: action((state, sheet) => {\r\n    state.layoutDataGoogleSheet = sheet;\r\n  }),\r\n};\r\n\r\nexport default googleSheetsModel;\r\n","import { createStore, action } from 'easy-peasy';\r\nimport model from './model';\r\n\r\nconst store = createStore(model);\r\n\r\nexport default store;\r\n","import \"./wdyr\"; // <--- first import\nimport React from \"react\";\nimport App from \"./App\";\nimport { StoreProvider } from \"easy-peasy\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./store\";\nReactDOM.render(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}