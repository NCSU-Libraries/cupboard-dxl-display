{"version":3,"sources":["hooks.ts","enums.ts","static/appConfig.ts","components/Shared/Button.tsx","components/Shared/Modal.tsx","components/Shared/Panel.tsx","components/HowToUse.tsx","components/IFrameView.tsx","components/Shared/Pulsar.tsx","components/IXDrop.tsx","components/Widgets/Clock.tsx","components/CardLayout/ViewCard/CardInfo.tsx","components/CardLayout/ViewCard/DeleteButton.tsx","components/CardLayout/ViewCard/SettingsButton.tsx","components/CardLayout/ViewCard/SettingsMenu.tsx","components/CardLayout/ViewCard/ViewCard.tsx","components/CardLayout/GuideGrid.tsx","components/CardLayout/CardLayout.tsx","components/Background/TestShader1.js","utils.ts","components/Background/BackgroundShader.js","components/Background.tsx","components/Shared/FlexRow.tsx","components/DraggableRow.tsx","IFrameValidator.ts","components/EditorPanel/TableHeader.tsx","components/EditorPanel/EditorTabs/ContentsTab/ContentsTab.tsx","components/EditorPanel/EditorTabs/LayoutTab/GoogleFormPopup.tsx","static/formEmbedUrl.ts","components/EditorPanel/EditorTabs/LayoutTab/LayoutTable.tsx","components/EditorPanel/EditorTabs/LayoutTab/LayoutTab.tsx","components/DraggableWidget.tsx","components/EditorPanel/EditorTabs/WidgetsTab/WidgetsTab.tsx","components/EditorPanel/Editor.tsx","components/EditorPanel/EditorPanel.tsx","components/Shared/Screen.tsx","components/ModeChangeButton.tsx","App.tsx","data_structs/CardData.ts","data_structs/WidgetData.ts","model/appModel.ts","static/extendedLayoutTest.ts","data_structs/LayoutData.ts","static/defaultStaticLayout.ts","model/layoutsModel.ts","static/cardDataSheetKey.ts","data_structs/GoogleSheetData.ts","model/googleSheetsModel.ts","model/index.ts","store.ts","index.tsx"],"names":["typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","useOnClickOutside","ref","handler","useEffect","listener","event","el","current","contains","target","document","addEventListener","removeEventListener","AppMode","CardView","DragType","InteractionType","DndTypes","DragSource","appConfig","idleTime","sheetLink","defaultIframeScale","defaultEmbedScale","defaultLayoutName","formLink","widgetIds","gridRows","gridCols","showModeSwitchButton","useStaticLayout","Button","onClick","text","appearance","className","iconBefore","width","height","style","containerClass","fontSize","intent","onMouseUp","cursor","undefined","Modal","children","active","containerClassName","onClose","backdropOpacity","display","MyBackdrop","opacity","zIndex","Panel","padding","flexDirection","panelStyle","HowToUse","initialValue","useState","value","setValue","useToggle","visible","toggleVisible","appModeState","state","appModel","appMode","ReactDOM","createPortal","DISPLAY","pointerEvents","HandUpIcon","querySelector","HowToPopup","Heading","Text","src","process","IFrameView","card","scale","setActive","valid","isLoaded","setIsLoaded","iframeOverlayClass","classNames","indexFrameContainerClass","iframeStyle","border","transform","transformOrigin","contentType","onDoubleClick","type","color","onReady","objectFit","objectPosition","onLoad","React","memo","ResponsivePlayer","url","controls","playing","muted","PureComponent","Pulsar","AddIcon","size","IXDrop","properties","cardType","provided","snapshot","innerRef","isDraggingOver","placeholder","Clock","Date","date","setDate","timerID","setInterval","clearInterval","fontWeight","boxSizing","toLocaleTimeString","hour12","timeStyle","CardInfo","data","title","DeleteButton","action","onTouchEnd","e","DeleteIcon","SettingsButton","useRef","CogIcon","InputRow","ScaleControls","setScale","ChevronLeftIcon","onChange","parseInt","defaultValue","toString","slice","ChevronRightIcon","SettingsMenu","isShown","setBackgroundColor","setShowMenu","menuReference","handleClickOutside","menuStyle","ViewCard","cardId","activeKey","cardContainerReference","GRID","oldCardView","setCardView","deleteCardAction","actions","layoutsModel","deleteCard","useLocalStore","cardView","cardBackgroundColor","computed","PREVIEW","boundingBox","getBoundingClientRect","setGpZindex","calculateTransform","show","showMenu","toggleMenu","cardClass","EDIT","FULL_SCREEN","CLOCK","cardInfoClass","handleCardPress","thunk","_","getState","console","log","s","devTools","settingsMenuProperties","cardModalBackdrop","cardChildContainer","keyCode","disabled","enable","disable","handleAction","preventDefault","useKeyboardShortcut","showDeleteButton","id","renderCardInfo","containerReference","qrContainerStyle","position","bottom","right","willChange","backgroundColor","cd","renderQrCode","renderReturnButton","windowWidth","window","innerWidth","windowHeight","innerHeight","centeredX","centeredY","currentX","x","currentY","y","differenceX","differenceY","refdiv","index","cardGrandParent","parentElement","ReturnButton","GuideGrid","gridSettings","ResponsiveGridLayout","WidthProvider","Responsive","guideCards","rows","cols","allGridSpots","push","emptyCards","map","rr","w","h","i","minW","maxW","minH","maxH","static","isDraggable","isResizable","resizeHandles","lg","md","sm","xs","xxs","generateFilledLayout","justCardNames","c","top","left","layouts","preventCollision","p","key","droppableId","PLACEHOLDER","CardGrid","viewModeState","setBufferLayoutAction","setBufferLayout","currentLayoutState","activeLayout","isEditMode","useMemo","activeCards","activeWidgets","layout","realLayout","setRealLayout","localLayout","activeKeyReference","sharedGridSettings","breakpoints","rowHeight","margin","compactType","onDragStart","oldItem","newItem","element","onLayoutChange","l","newLayout","verticalCompact","draggable","IFRAME","contentCard","widgetData","widget","renderWidget","TestShader1","uniforms","time","vertexShader","fragmentShader","formatDate","d","month","getMonth","day","getDate","year","getFullYear","length","join","randomIntFromInterval","min","max","Math","floor","random","randomisePosition","THREE","rgb","r","g","b","baseColors","pink","brightPink","darkPurple","orange","darkgrey","lightgrey","red","u_bg","u_bgMain","u_color1","u_color2","u_time","u_randomisePosition","ShadedGeometry1","shaderMaterialRef","t","j","vCheck","useFrame","clock","cos","R","sin","G","B","rotation","degToRad","attach","args","BackgroundShader","cam","gl","antialias","alpha","PerspectiveCamera","fov","aspect","near","far","faceResolution","OrbitControls","Background","viewMode","backgroundStyle","setBackgroundStyle","transition","backgroundClass","FlexRow","DraggableRow","dndType","dragAll","isValidElement","dragHandleProperties","dragHandleProps","draggableProps","cloneElement","isDragging","defaultProps","IFrameLoadError","IFrameLoadWarning","TableHeader","headerTitle","setFilter","setFilterDirection","activeFilter","sortDirection","setSortDirection","showSortArrow","str","split","regex","toLowerCase","match","forEach","char","replace","toUpperCase","titleCapitilization","toTitleCase","TitleWithIcon","isActive","marginTop","marginBottom","textAlign","ContentsTab","availableCards","clearCardsAction","clearCards","resetLayoutAction","resetLayout","filterKey","setFilterKey","filterDirection","cardItems","setCardItems","searchTerm","setSearchTerm","filteredCards","setFilteredCards","aboveThreshholdCardTitles","fuzzysort","go","filtered","filter","includes","sortedItems","sort","a","aText","bText","reverse","SearchInput","currentTarget","CARD_TABLE","isDropDisabled","autoHeight","autoHeightMax","autoHeightMin","onScrollFrame","v","added","author","interaction","sourceId","CARD_ROW","draggableId","isDragDisabled","GoogleFormPopup","onCloseComplete","isCopiedJSON","setIsCopiedJson","layoutString","JSON","stringify","copyFieldContainerClass","ReactDom","onCopy","CopyField","isCurrentClipBoardContent","isClipBoardCorrect","setIsClipBoardCorrect","isCopied","setIsCopied","navigator","clipboard","readText","then","clipboardText","catch","error","ClipboardIcon","writeText","InlineAlert","justifyContent","paddingTop","CrossIcon","GoogleFormIframe","frameBorder","marginHeight","marginWidth","LayoutTable","externalLayoutsState","externalLayouts","activeLayoutState","setActiveLayoutAction","setActiveLayout","LAYOUT_TABLE","StatusIndicator","LayoutTab","layoutState","bufferState","bufferLayout","showNewLayoutPopup","setShowNewLayoutPopup","fetchCardDataGoogleSheetThunk","googleSheetsModel","fetchAppGoogleSheet","setLayoutString","DraggableWidget","isInLayout","WidgetsTab","WIDGETS_TABLE","WIDGET","Editor","EditorPanel","minimized","setMinimized","editorPanelClass","hidden","editorClass","bounds","defaultClassName","defaultPosition","handle","icon","PlusIcon","MinusIcon","PanelHeader","BarButton","Screen","ModeChangeButton","toggleModeAction","toggleAppMode","longPressEvent","useLongPress","modeChangeButtonStyle","App","isIdle","useIdle","toggleAppModeThunk","fetchTopLevelSheetThunk","fetchTopLevelSheet","swapCardDataAction","swapCardContent","cardAddAction","addCard","widgetAddAction","addWidget","stringToGridPos","posString","Number","charAt","onDragEnd","response","destination","source","startsWith","cardPos","targetPosition","targetId","IFrameValidator","errors","warnings","this","malformedUrlCheckArray","warningsArray","RegExp","test","MALFORMED_URL","validURL","CROSS_ORIGIN","CardData","row","metaData","validator","failed","isImgLink","isVideo","isEmbed","isWebsite","widgetType","WidgetData","name","availableWidgets","n","manageViewModeChange","viewModeEnum","setAppMode","CYCLE","setAvailableCards","cardDataArray","setActiveCards","setActiveWidgets","widgetDataArray","onCardSheetLoadSuccess","thunkOn","storeActions","setAppGoogleSheetData","payload","getSheetRows","cards","sourceid","onSetActiveLayout","activeSourceIds","Set","sources","layoutWidgets","activeWidgetIds","availableCardsUpdated","has","registerCardLoadFailure","failedCard","getStoreState","failedId","newCards","fail","onSwapCardContent","newSource","find","debug","extendedLayoutTest","layoutSettings","defaultBackgroundColor","cardSettings","widgets","LayoutData","sourceLayout","parse","testGetLayout","timestamp","swapInfo","Object","entries","k","toRemoveId","toAdd","pos","toFail","newGridLayout","justWidgets","defaultGridLayoutArray","defaultStaticLayout","fakeLayoutRow","defaultLayoutData","tempLayout","onSetAppGoogleSheetData","defaultLayout","setExternalLayouts","onToggleViewMode","buf","newActiveLayout","newLayoutArray","swapCard","cardToDelete","removeCard","cardAddEvent","cardToAdd","setGridLayout","widgetToAdd","failCard","setTempLayout","updateLayout","swap","old","cardDataSheetKey","gid","GoogleSheetData","sheetId","sheets","Map","Promise","resolve","reject","rowArray","get","set","layoutDataGoogleSheet","cardDataGoogleSheet","appGoogleSheet","formUrl","layoutSheetUrl","cardSheetUrl","getData","sheetRow","setFormUrl","googleForm","setLayoutsSheetUrl","urlToCsvUrl","layoutsSheet","setCardSheetUrl","cardsSheet","fetchSheet","sheetResponses","allSettled","results","sheetData","goodValues","result","num","status","addSheet","sheetTitle","setCardDataGoogleSheet","setLayoutDataGoogleSheet","getCardDataResponse","getLayoutDataResponse","googleSheet","sheet","sheetKey","sheetUrl","Papa","download","header","delimiter","dynamicTyping","complete","model","appData","store","createStore","render"],"mappings":"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","file":"static/js/main.4c58ab7f.chunk.js","sourcesContent":["import { createTypedHooks } from \"easy-peasy\";\r\nimport { StoreModel } from \"./model\";\r\nimport React, {MouseEventHandler, RefObject, useEffect, useState} from 'react'\r\n\r\nconst typedHooks = createTypedHooks<StoreModel>();\r\n\r\n// We export the hooks from our store as they will contain the\r\n// type information on them\r\n// see https://easy-peasy.vercel.app/docs/api/use-store-actions.html for more on store hooks\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n\r\n\r\nexport function useToggle(initialValue: boolean): [boolean, () => void] {\r\n    const [value, setValue] = useState<boolean>(initialValue);\r\n  \r\n    const toggleValue = () => setValue(!value);\r\n  \r\n    return [value, toggleValue];\r\n  }\r\n\r\nexport const useKeyboardShortcut = ({keyCode, action, disabled}:{keyCode: number, action: (e: KeyboardEvent)=>void, disabled: boolean}) => {\r\n  React.useEffect(() => {\r\n    if(!disabled){\r\n      enable()\r\n    }\r\n    return () => {\r\n      disable()\r\n    }\r\n  })\r\n\r\n  const enable = () => {\r\n    document.addEventListener('keydown', handleAction)\r\n  }\r\n\r\n  const disable = () => {\r\n    document.removeEventListener('keydown', handleAction)\r\n  }\r\n\r\n  const handleAction = (e: KeyboardEvent) => {\r\n    if(e.keyCode === keyCode){\r\n      e.preventDefault()\r\n      action(e)\r\n    }\r\n  }\r\n\r\n  return {enable, disable}\r\n}\r\n\r\ntype AnyEvent = MouseEvent | TouchEvent\r\n\r\nexport function useOnClickOutside<T extends HTMLElement = HTMLElement>(\r\n  ref: RefObject<T>,\r\n  handler: (event: AnyEvent) => void,\r\n): void {\r\n  useEffect(() => {\r\n    const listener = (event: AnyEvent) => {\r\n      const el = ref?.current\r\n\r\n      // Do nothing if clicking ref's element or descendent elements\r\n      if (!el || el.contains(event.target as Node)) {\r\n        return\r\n      }\r\n\r\n      handler(event)\r\n    }\r\n\r\n    document.addEventListener(`mousedown`, listener)\r\n    document.addEventListener(`touchstart`, listener)\r\n\r\n    return () => {\r\n      document.removeEventListener(`mousedown`, listener)\r\n      document.removeEventListener(`touchstart`, listener)\r\n    }\r\n\r\n    // Reload only if ref or handler changes\r\n  }, [ref, handler])\r\n}\r\n","export enum AppMode {\r\n  DISPLAY = \"DISPLAY\",\r\n  EDIT = \"EDIT\",\r\n  CYCLE = \"CYCLE\",\r\n}\r\n\r\nexport enum CardView {\r\n  GRID = \"GRID\",\r\n  PREVIEW = \"PREVIEW\",\r\n  FULL_SCREEN = \"FULL_SCREEN\",\r\n}\r\n\r\nexport enum DragType {\r\n  CARD_TABLE_DATA = \"CARD_TABLE_DATA\",\r\n  DISPLAY_CARD = \"DISPLAY_CARD\",\r\n}\r\n\r\nexport enum InteractionType {\r\n  ACTIVE = \"ACTIVE\",\r\n  STATIC = \"STATIC\",\r\n  FIXED = \"FIXED\",\r\n  IMAGE = \"IMAGE\",\r\n}\r\n\r\nexport enum DndTypes {\r\n  PLACEHOLDER = \"PLACEHOLDER\",\r\n  CLOCK = \"CLOCK\",\r\n  IFRAME = \"IFRAME\",\r\n  CARD_ROW = \"CARD_ROW\",\r\n  LAYOUT = \"LAYOUT\",\r\n  WIDGET = \"WIDGET\",\r\n}\r\n\r\nexport enum DragSource {\r\n  LAYOUT_TABLE = \"LAYOUT_TABLE\",\r\n  CARD_TABLE = \"CARD_TABLE\",\r\n  CARD_GRID = \"CARD_GRID\",\r\n  WIDGETS_TABLE = \"WIDGETS_TABLE\"\r\n}\r\n\r\nexport type SheetNames = \"CARDS\" | \"LAYOUTS\" | \"TOP_LEVEL\"","interface AppConfig {\n  //time for the app to return to display mode after no interactions in edit mode\n  idleTime: number;\n  //link to the sheet containing the list of different card content\n  sheetLink: string;\n  //google sheets form link for saving new layouts\n  formLink: string;\n  gridRows: number;\n  gridCols: number;\n  //scale for regular web pages\n  defaultIframeScale: number;\n  //scale of content which meant for embedding, i.e. includes \"embed\" in the url\n  defaultEmbedScale: number;\n  //the default layout from your \"layouts\" google sheet to display\n  defaultLayoutName: string;\n  //\n  showModeSwitchButton: boolean;\n  widgetIds: string[];\n  useStaticLayout: boolean;\n}\n\nconst appConfig: AppConfig = {\n  idleTime: process.env.NODE_ENV === \"development\" ? 100000000 : 10000000,\n  sheetLink:\n    \"https://docs.google.com/spreadsheets/d/1BR1AQ5Zmt_o_0dOm9AvDht0G3Q6RXQUhX71Vi4H7tTU/edit#gid=0\",\n  defaultIframeScale: 0.5,\n  defaultEmbedScale: 1.0,\n  defaultLayoutName: \"NewStaticLayout2\",\n  formLink: \"https://forms.gle/nc3UQFtFUtSaF5mu6\",\n  widgetIds: [\"clock\", \"group label\", \"info\"],\n  gridRows: 6,\n  // gridRows: 5,\n  gridCols: 4,\n  showModeSwitchButton: false,\n  useStaticLayout: false,\n};\n\nexport default appConfig;\n","import {\r\n  Button as EverGreenButton,\r\n  ButtonAppearance,\r\n  IntentTypes,\r\n} from \"evergreen-ui\";\r\nimport React, { useState } from \"react\";\r\n\r\n/**\r\n * Wraps an Evergreen UI Button, providing it with an onClick property.\r\n * @component\r\n */\r\n\r\ninterface ButtonProperties {\r\n  onClick: React.MouseEventHandler<HTMLDivElement>;\r\n  text?: string;\r\n  appearance?: ButtonAppearance;\r\n  className?: string;\r\n  iconBefore?: JSX.Element;\r\n  width?: number | string;\r\n  height?: number | string;\r\n  containerClass?: string;\r\n  style?: React.CSSProperties;\r\n  fontSize?: string;\r\n  intent?: IntentTypes;\r\n}\r\nconst Button = ({\r\n  onClick,\r\n  text,\r\n  appearance,\r\n  className,\r\n  iconBefore,\r\n  width,\r\n  height,\r\n  style,\r\n  containerClass,\r\n  fontSize,\r\n  intent,\r\n}: ButtonProperties): JSX.Element => {\r\n  return (\r\n    <div className={containerClass} onMouseUp={onClick} style={{width: width}}>\r\n      <EverGreenButton\r\n        appearance={appearance ?? \"default\"}\r\n        //use evergreen's default button with if no width is provided\r\n        className={className}\r\n        cursor=\"pointer\"\r\n        fontSize={fontSize}\r\n        height={height ?? undefined}\r\n        iconBefore={iconBefore ?? undefined}\r\n        intent={intent ?? \"none\"}\r\n        style={style}\r\n        width={width ?? undefined}\r\n      >\r\n        {text}\r\n      </EverGreenButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useRef, useEffect } from \"react\";\n//TODO: UNIFY MODAL CSS\nimport \"../../css/howToUse.css\";\nimport \"../../css/popup.css\";\n\nconst Modal = ({\n  children,\n  active,\n  containerClassName,\n  onClose,\n  backdropOpacity,\n}: {\n  active: boolean;\n  children: JSX.Element | JSX.Element[];\n  containerClassName: string;\n  onClose: () => void;\n  backdropOpacity?: number;\n}): JSX.Element => {\n  return (\n    <div className={\"modal-container\"} style = {{display: active?\"flex\":\"none\"}}>\n      <MyBackdrop onClose={onClose} backdropOpacity={backdropOpacity ?? 0} />\n      <div className={containerClassName}>{children}</div>\n    </div>\n  );\n};\n\nexport default Modal;\n\ninterface BackdropProperties {\n  backdropOpacity: number;\n  onClose: () => void;\n}\nconst MyBackdrop = ({ onClose, backdropOpacity }: BackdropProperties) => {\n  return (\n    <div\n      onMouseUp={onClose}\n      style={{ opacity: .7, zIndex: 200}}\n      className={\"pop-up-background\"}\n    ></div>\n  );\n};\n","import React from \"react\";\nimport \"../../css/panel.css\";\nimport { AddIcon } from \"evergreen-ui\";\n\ninterface PanelProperties{\n    children: JSX.Element | JSX.Element[]\n    padding?: string;\n    flexDirection?: \"column\" | \"row\"; \n    className?: string;\n\n}\n\nconst Panel = ({children, className, padding, flexDirection}:PanelProperties): JSX.Element => {\n  const panelStyle = {\n      padding: padding??\"0em\",\n      flexDirection: flexDirection??\"column\"\n  } as React.CSSProperties\n\n  return (\n    <div style = {panelStyle} className={\"panel\"+ \" \" + className??\"\"}>\n        {children}\n    </div>\n  );\n};\n\nexport default Panel;\n","import \"../css/howToUse.css\";\n\nimport classNames from \"classnames\";\nimport { HandUpIcon,Heading, InfoSignIcon, Text } from \"evergreen-ui\";\nimport React, { useEffect,useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { AppMode } from \"../enums\";\nimport { useStoreState } from \"../hooks\";\nimport { useToggle } from \"../hooks\";\nimport Button from \"./Shared/Button\";\nimport Modal from \"./Shared/Modal\";\nimport Panel from \"./Shared/Panel\";\n\nconst HowToUse = (): JSX.Element => {\n  const [visible, toggleVisible] = useToggle(false)\n  \n  const appModeState = useStoreState((state) => state.appModel.appMode);\n  \n  return ReactDOM.createPortal(\n      <>\n        {appModeState === AppMode.DISPLAY ? (\n          <div style = {{pointerEvents: \"all\"}}>\n            <HowToPopup\n              onClose={toggleVisible}\n              active={visible}\n            />\n            <Button\n              fontSize = {\"xx-large\"}\n              height={\"4vh\"}\n              width={\"35vw\"}\n              iconBefore={<HandUpIcon/>}\n              onClick={toggleVisible}\n              appearance=\"primary\"\n              text=\"Learn how to use this display\"\n              className = {\"how-to-use-button\"}\n            />\n          </div>\n        ) : (\n          <></>\n        )}\n         </>, document.querySelector(\"#how-to-use-button\") as HTMLDivElement\n  );\n};\n\nexport default HowToUse;\n\n\nconst HowToPopup = ({\n  active,\n  onClose,\n}: {\n  active: boolean;\n  onClose: () => void;\n}): JSX.Element => {\n  return (\n    <Modal\n      active={active}\n      containerClassName={\"how-to-use-popup\"}\n      onClose={onClose}\n      backdropOpacity={0}\n    >\n      <Panel padding = \"1em\">\n      <Heading>Connect Labtop</Heading>\n      <hr></hr>\n      <Text>\n        Connect your labtop to use this screen as a display. \n      </Text>\n      <img\n        className={\"how-to-image\"}\n        src={process.env.PUBLIC_URL + \"/labtopdiagram.png\"}\n      />\n      <Heading>Explore Content</Heading>\n      <hr></hr>\n      <Text>\n        Click on a card to explore data related content.\n      </Text>\n      <img\n        className={\"how-to-image\"}\n        src={process.env.PUBLIC_URL + \"/masonary.png\"}\n      />\n      </Panel>\n    </Modal>\n  );\n}; \n\n","import \"../css/iframeView.css\";\r\n\r\nimport classNames from \"classnames\";\r\nimport React, { FC, PropsWithChildren, useState } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport ReactPlayer from \"react-player\";\r\n\r\nimport CardData from \"../data_structs/CardData\";\r\n\r\ninterface IFrameViewProperties {\r\n  card: CardData;\r\n  scale: number;\r\n}\r\n/**\r\n * Minimal warpper for an <iframe>. Can be toggled between a full screen, active view, and a regular card view.\r\n * @component\r\n * @example\r\n * const my_url = \"https://www.youtube.com/embed/tgbNymZ7vqY\";\r\n * return(\r\n *  <IFrameView src = {my_url}/>\r\n * )\r\n */\r\nconst IFrameView: FC<IFrameViewProperties> = ({ card, scale }) => {\r\n  const [active, setActive] = useState(false);\r\n  const [valid, setIsValid] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  const iframeOverlayClass = classNames(\"iframe-view-overlay\", {\r\n    \"iframe-view-overlay-hidden\": isLoaded,\r\n    \"iframe-view-overlay-loading\": !isLoaded,\r\n  });\r\n\r\n  const indexFrameContainerClass = classNames(\"iframe-container\", {\r\n    \"iframe-container-hidden\": !valid,\r\n  });\r\n  //TODO: Fix or remove card error handling\r\n\r\n  const iframeStyle = {\r\n    border: \"none\",\r\n    transform: `scale(${scale})`,\r\n    width: `${100 * (1 / scale)}%`,\r\n    height: `${100 * (1 / scale)}%`,\r\n    transformOrigin: \"top left\",\r\n  } as React.CSSProperties;\r\n\r\n  const iframeActive = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    border: \"5px blue\",\r\n  } as React.CSSProperties;\r\n  const qrContainerStyle = {\r\n    width: \"100%\",\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    zIndex: 10,\r\n  } as React.CSSProperties;\r\n\r\n  const { src, contentType } = card;\r\n\r\n  return (\r\n    <div\r\n      onDoubleClick={() => {\r\n        setActive(!active);\r\n      }}\r\n      className={indexFrameContainerClass}\r\n    >\r\n      <div className={iframeOverlayClass}>\r\n        <Loader type=\"Grid\" color=\"white\" height={80} width={80} />\r\n      </div>\r\n      {contentType === \"video\" ? (\r\n        <ResponsivePlayer\r\n          src={card.src}\r\n          onReady={(event) => {\r\n            setIsLoaded(true);\r\n          }}\r\n        />\r\n      ) : contentType === \"image\" ? (\r\n        <img\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            objectFit: \"cover\",\r\n            objectPosition: \"center\",\r\n          }}\r\n          src={src}\r\n          onLoad={(event) => {\r\n            setIsLoaded(true);\r\n          }}\r\n        ></img>\r\n      ) : (\r\n        <iframe\r\n          onLoad={(event) => {\r\n            setIsLoaded(true);\r\n          }}\r\n          src={src}\r\n          style={active ? iframeActive : iframeStyle}\r\n        ></iframe>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(IFrameView);\r\n\r\n// function propertiesAreEqual(\r\n//   previousProperties: Readonly<PropsWithChildren<IFrameViewProperties>>,\r\n//   nextProperties: Readonly<PropsWithChildren<IFrameViewProperties>>\r\n// ): boolean {\r\n//   if (previousProperties.src == nextProperties.src) {\r\n//     console.log(previousProperties.src);\r\n//     console.log(nextProperties.src);\r\n//     return false;\r\n//   }\r\n//   console.log(previousProperties.src);\r\n//   console.log(nextProperties.src);\r\n//   return true;\r\n// }\r\n\r\nconst ResponsivePlayer = ({\r\n  src,\r\n  onReady,\r\n}: {\r\n  src: string;\r\n  onReady: (e: ReactPlayer) => void;\r\n}): JSX.Element => {\r\n  return (\r\n    <div className=\"player-wrapper\">\r\n      <ReactPlayer\r\n        className=\"react-player\"\r\n        url={src}\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        onReady={onReady}\r\n        controls={true}\r\n        playing={true}\r\n        muted={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nclass Content extends React.PureComponent<{ src: string }> {\r\n  renderCount = 0;\r\n  render() {\r\n    this.renderCount++;\r\n    return (\r\n      <div\r\n        style={{\r\n          background: \"#afa\",\r\n          padding: 8,\r\n          borderRadius: 8,\r\n          display: \"inline-block\",\r\n        }}\r\n      >\r\n        {this.props.src}\r\n        Hello from{\" \"}\r\n        <span style={{ fontFamily: \"monospace\" }}>{\"<Content />\"}</span> ! I've\r\n        rendered {this.renderCount} times.\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"../../css/pulsar.css\";\nimport { AddIcon } from \"evergreen-ui\";\ninterface PulsarProperties {}\n\nconst Pulsar = () => {\n  return (\n    <div className=\"pulsar\">\n      <AddIcon size={200}></AddIcon>\n      {/* <div className={\"ring\"}></div> */}\n      {/* <div className={\"ring\"}></div>\n      <div className={\"ring\"}></div>\n      <div className={\"ring\"}></div>\n      <div className={\"ring\"}></div> */}\n    </div>\n  );\n};\n\nexport default Pulsar;\n","import React, { FC, ReactNode, useEffect } from \"react\";\nimport { Droppable, DroppableProps } from \"react-beautiful-dnd\";\nimport { AddIcon } from \"evergreen-ui\";\nimport \"../css/droppable.css\";\nimport Pulsar from \"./Shared/Pulsar\";\nimport { DndTypes } from \"../enums\";\ninterface IXDrop extends Omit<DroppableProps, \"children\"> {\n  children: ReactNode;\n  cardType: DndTypes;\n  className?: string;\n}\n\n/**A droppable container. Wraps child widgets in a react-beautiful-dnd Droppable component, and renders a \"+\" if a draggable is dragging over the container */\nconst IXDrop: FC<IXDrop> = ({\n  children,\n  className,\n  cardType,\n  ...properties\n}) => {\n  // const droppableContainert className = {\"droppable \" + className}\n  return (\n    <Droppable {...properties} type={\"DEFAULT\"}>\n      {(provided, snapshot) => {\n        return (\n          <div\n            {...provided.innerRef}\n            ref={provided.innerRef}\n            className={\n              snapshot.isDraggingOver\n                ? \"droppable-hovered\" + \" \" + className\n                : \"droppable\" + \" \" + className\n            }\n          >\n            <div\n              className={\n                snapshot.isDraggingOver\n                  ? \"droppable-overlay droppable-overlay-visible\"\n                  : \"droppable-overlay droppable-overlay-hidden\"\n              }\n            >\n              <Pulsar />\n            </div>\n            {children}\n            {provided.placeholder}\n          </div>\n        );\n      }}\n    </Droppable>\n  );\n};\n\nexport default IXDrop;\n","import \"../../css/clock.css\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * Simple clock widget for displaying the current time.\r\n * @component\r\n */\r\nconst Clock = (): JSX.Element => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const containerStyle = {\r\n    height: \"100%\",\r\n    padding: \".25em\",\r\n    width: \"100%\",\r\n    fontSize: \"4vw\",\r\n    fontWeight: 600,\r\n    color: \"white\",\r\n    boxSizing: \"border-box\",\r\n  } as React.CSSProperties;\r\n\r\n\r\n  useEffect(() => {\r\n    const timerID = setInterval(() => tick(), 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerID);\r\n    };\r\n  });\r\n\r\n  function tick(): void {\r\n    setDate(new Date());\r\n  }\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <div>Data Experience Lab</div>\r\n      <div>\r\n        {date.toLocaleTimeString(\"en-IT\", { hour12: true, timeStyle: \"short\" })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n","import React, { useState } from \"react\";\r\nimport CardData from \"../../../data_structs/CardData\";\r\nimport \"../../../css/cardInfo.css\"\r\n/**\r\n * Formats text from a CardData object, including it's title and source url.\r\n * @component\r\n */\r\nconst CardInfo = ({\r\n  data,\r\n  className,\r\n}: {\r\n  data: CardData;\r\n  className: string;\r\n}): JSX.Element => {\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const titleStyle = {\r\n    // fontSize: \"large\",\r\n  };\r\n  return (\r\n    <>\r\n      <div className={\"card-footer\"}>\r\n        <h2 style={titleStyle}>{data.title}</h2>\r\n        {/* <a>{data.src}</a> */}\r\n        <p>\r\n          Lorem Ipsum is simply dummy text of the printing and typesetting\r\n          industry. Lorem Ipsum has been the industry&apos standard dummy text\r\n          ever since the 1500s, when an unknown printer took a galley of type\r\n          and scrambled it to make a type specimen book{\" \"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardInfo;\r\n","import \"../../../css/deleteButton.css\";\n\nimport { DeleteIcon } from \"evergreen-ui\";\nimport React from \"react\";\n\ninterface DeleteButtonProperties {\n    action: ()=>void;\n    onClick: React.MouseEventHandler<HTMLDivElement>;\n  }\n  \n\nconst DeleteButton = ({ onClick, action }: DeleteButtonProperties): JSX.Element => {\n    return (\n      <div\n        className=\"delete-button-container\"\n        onMouseUp={onClick}\n        onClick={onClick}\n        onTouchEnd={(e)=>{action}}\n      >\n        <div\n          // onClick={onClick}\n        style={{display: \"flex\"}}\n        >\n          <DeleteIcon size={30} />\n        </div>\n      </div>\n    );\n  };\n  \n\n  export default DeleteButton","import React, { useRef } from \"react\";\nimport \"../../../css/card/settingsButton.css\";\nimport { CogIcon, Popover } from \"evergreen-ui\";\nimport SettingsMenu from \"./SettingsMenu\";\n\nconst SettingsButton = ({\n  onClick,\n}: {\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n}): JSX.Element => {\n  const target = useRef();\n  return (\n    <div className=\"settings-button-container\" onMouseUp={onClick}>\n      <div\n        //   onClick={onClick}\n        style={{ display: \"flex\" }}\n      >\n        <CogIcon size={15} />\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsButton;\n","import '../../../css/card/settingsMenu.css';\n\nimport { ActionCreator, Actions } from 'easy-peasy';\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"evergreen-ui\";\nimport React, { useRef } from 'react';\n\nimport {useOnClickOutside} from \"../../../hooks\"\nimport Button from '../../Shared/Button';\nimport SettingsButton from './SettingsButton';\nimport { CardModel } from './ViewCard';\n\ninterface SettingsMenuProperties extends Pick<Actions<CardModel>, \"setScale\" | \"setBackgroundColor\" | \"setShowMenu\"> {\n  isShown: boolean;\n  scale: number;\n}\n\nconst SettingsMenu = ({\n  isShown,\n  setScale,\n  setBackgroundColor,\n  setShowMenu,\n  scale,\n  \n}: SettingsMenuProperties): JSX.Element => {\n  const onOutside = () =>{console.log(\"got click outisde\");}\n  const menuReference = useRef(null)\n  const handleClickOutside = useOnClickOutside(menuReference, ()=>{setShowMenu(false)})\n  const menuStyle = {\n    display: isShown ? \"flex\" : \"none\",\n  } as React.CSSProperties;\n\n  return (\n    <div className =\"menu-container\" ref = {menuReference} style={menuStyle} {...handleClickOutside}>\n        <InputRow title = \"Background Color:\">\n       <input\n        className=\"nodrag\"\n        defaultValue=\"rbga(0,0,0,0)\"\n        onChange={(e)=>{setBackgroundColor(e.target.value)}}\n        type=\"color\"\n       />\n        </InputRow>\n        <InputRow title = \"Scale: \">\n        <ScaleControls scale={scale} setScale={setScale} />\n        </InputRow>\n    </div>\n  );\n};\n\nconst InputRow = ({title, children}:{title: string, children: JSX.Element | JSX.Element[]}): JSX.Element=>{\n    return (\n        <div className=\"menu-input-row\">\n            {title}\n            {children}\n        </div>\n    )\n}\n\nconst ScaleControls = ({\n  setScale,\n  scale,\n}: {\n  setScale: ActionCreator<number>;\n  scale: number;\n}): JSX.Element => {\n  return (\n    <div className=\"scale-controls-grid\">\n      <Button\n        containerClass=\"scale-controls-left\"\n        height = {20}\n        iconBefore={<ChevronLeftIcon size={30} />}\n        // className={\"scale-controls-left\"}\n        onClick={() => {\n          setScale(-0.1);\n        }}\n        width={20}\n        // style={{ width: \"fill-available\" }}\n      />\n\n      <input onChange = {(e)=>{setScale(parseInt(e.target.value))}} style ={{width: 30}} defaultValue = {0.5} type=\"text\" value = {scale.toString().slice(0, 3)}/>\n      <Button\n        containerClass=\"scale-controls-right\"\n        height = {20}\n        iconBefore={<ChevronRightIcon size={30} />}\n        // className={\"scale-controls-right\"}\n        onClick={() => {\n          setScale(0.1);\n        }}\n        // style={{ width: \"-webkit-fill-available\" }}\n        width={20}\n      />\n    </div>\n  );\n};\n\nexport default SettingsMenu;\n","import \"../../../css/viewCard.css\";\r\n\r\nimport classNames from \"classnames\";\r\nimport type { Action, Computed, Thunk } from \"easy-peasy\";\r\nimport { action, computed, thunk, useLocalStore } from \"easy-peasy\";\r\nimport { InlineAlert } from \"evergreen-ui\";\r\nimport React, {\r\n  FC,\r\n  MouseEventHandler,\r\n  PropsWithChildren,\r\n  ReactNode,\r\n  RefObject,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { Layouts } from \"react-grid-layout\";\r\nimport QRCode from \"react-qr-code\";\r\n\r\nimport CardData from \"../../../data_structs/CardData\";\r\nimport WidgetData from \"../../../data_structs/WidgetData\";\r\nimport { AppMode, CardView, DndTypes } from \"../../../enums\";\r\nimport {\r\n  useKeyboardShortcut,\r\n  useOnClickOutside,\r\n  useStoreActions,\r\n  useStoreState,\r\n  useToggle,\r\n} from \"../../../hooks\";\r\nimport appConfig from \"../../../static/appConfig\";\r\nimport Button from \"../../Shared/Button\";\r\nimport CardInfo from \"./CardInfo\";\r\nimport DeleteButton from \"./DeleteButton\";\r\nimport SettingsButton from \"./SettingsButton\";\r\nimport SettingsMenu from \"./SettingsMenu\";\r\n/**\r\n * Wraps each of the cards in the card layouts.\r\n * Click/Touch => Change the cards view mode\r\n * @component\r\n */\r\nexport interface CardModel {\r\n  cardBackgroundColor: string;\r\n  cardClass: Computed<CardModel, string>;\r\n  cardInfoClass: Computed<CardModel, string>;\r\n  cardType: DndTypes;\r\n  cardView: CardView;\r\n  handleCardPress: Thunk<CardModel>;\r\n  scale: number;\r\n  setBackgroundColor: Action<CardModel, string>;\r\n  setCardView: Action<CardModel, CardView>;\r\n  setScale: Action<CardModel, number>;\r\n  setShowMenu: Action<CardModel, boolean>;\r\n  showMenu: boolean;\r\n  toggleMenu: Action<CardModel>;\r\n  transform: Computed<CardModel, string>;\r\n}\r\n\r\ninterface ViewCardProperties {\r\n  activeKey?: React.MutableRefObject<string>;\r\n  cardId?: string;\r\n  cardType: DndTypes;\r\n  children?: (scale: number) => ReactNode;\r\n  data?: CardData | WidgetData;\r\n  dataGrid?: Layouts;\r\n  layoutRef?: React.MutableRefObject<Layouts | null>;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst ViewCard: FC<ViewCardProperties> = ({\r\n  cardType,\r\n  children,\r\n  activeKey,\r\n  cardId,\r\n  data,\r\n  onClick,\r\n}: ViewCardProperties) => {\r\n  const cardContainerReference = useRef<HTMLDivElement>(null);\r\n  const appModeState = useStoreState((state) => state.appModel.appMode);\r\n  const [oldCardView, setCardView] = useState(CardView.GRID);\r\n  const deleteCardAction = useStoreActions(\r\n    (actions) => actions.layoutsModel.deleteCard\r\n  );\r\n\r\n  const [state, actions] = useLocalStore<CardModel>(\r\n    () => ({\r\n      cardView: CardView.GRID,\r\n      setCardView: action((state, cardView) => {\r\n        state.cardView = cardView;\r\n      }),\r\n      scale:\r\n        data?.contentType === \"embed\"\r\n          ? appConfig.defaultEmbedScale\r\n          : appConfig.defaultIframeScale,\r\n      setScale: action((state, scale) => {\r\n        state.scale += scale;\r\n      }),\r\n      cardBackgroundColor: \"\",\r\n      setBackgroundColor: action((state, color) => {\r\n        state.cardBackgroundColor = color;\r\n      }),\r\n      transform: computed([(state) => state.cardView], (cardView) => {\r\n        if (cardView == CardView.PREVIEW) {\r\n          const boundingBox =\r\n            cardContainerReference.current?.getBoundingClientRect();\r\n          setGpZindex(cardContainerReference, 1);\r\n          if (boundingBox) {\r\n            return calculateTransform(boundingBox);\r\n          }\r\n        }\r\n        if (cardView === CardView.GRID) {\r\n          setGpZindex(cardContainerReference, 0);\r\n        }\r\n        return `translate(${0}px, ${0}px)`;\r\n      }),\r\n      setShowMenu: action((state, show) => {\r\n        state.showMenu = show;\r\n      }),\r\n      toggleMenu: action((state) => {\r\n        state.showMenu = !state.showMenu;\r\n      }),\r\n      showMenu: false,\r\n      cardType: cardType,\r\n      cardClass: computed([(state) => state.cardView], (cardView) => {\r\n        const test = classNames(\"card\", {\r\n          \"card-edit\": appModeState === AppMode.EDIT,\r\n          \"card-display\":\r\n            appModeState === AppMode.DISPLAY && cardView == CardView.GRID,\r\n          \"card-preview\": cardView === CardView.PREVIEW,\r\n          \"card-fullscreen\": cardView === CardView.FULL_SCREEN,\r\n          \"card-empty\": appModeState === AppMode.EDIT && !children,\r\n          \"card-empty-hidden\": !children && appModeState == AppMode.DISPLAY,\r\n          \"card-locked\":\r\n            state.cardType === DndTypes.CLOCK && appModeState === AppMode.EDIT,\r\n          // \"card-error\": data?.failed,\r\n        });\r\n        return test;\r\n      }),\r\n      cardInfoClass: computed((state) => {\r\n        return classNames(\"info\", {\r\n          \"info-hidden\": appModeState === AppMode.EDIT,\r\n          \"info-display\": appModeState === AppMode.DISPLAY,\r\n          \"info-preview\": state.cardView === CardView.PREVIEW,\r\n        });\r\n      }),\r\n      handleCardPress: thunk((actions, _, { getState }) => {\r\n        // console.log(\"HANDLED PRESS\");\r\n        console.log(getState().cardClass);\r\n        // console.log(appModeState);\r\n        if (appModeState === AppMode.DISPLAY && cardId != undefined) {\r\n          switch (getState().cardView) {\r\n            case CardView.GRID:\r\n              if (data?.contentType !== \"widget\") {\r\n                actions.setCardView(CardView.PREVIEW);\r\n                console.log(\"SETTING CARD VIEW TO PREVIEW\");\r\n              }\r\n              // console.log(data);\r\n\r\n              break;\r\n            case CardView.PREVIEW:\r\n              actions.setCardView(CardView.GRID);\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      }),\r\n    }),\r\n    [appModeState],\r\n    (s) => {\r\n      return { devTools: false };\r\n    }\r\n  );\r\n\r\n  const settingsMenuProperties = {\r\n    scale: state.scale,\r\n    setScale: actions.setScale,\r\n    setBackgroundColor: actions.setBackgroundColor,\r\n    setShowMenu: actions.setShowMenu,\r\n  };\r\n\r\n  const cardModalBackdrop = classNames(\"card-modal-backdrop\", {\r\n    \"card-modal-backdrop-active\":\r\n      oldCardView === CardView.PREVIEW || oldCardView === CardView.FULL_SCREEN,\r\n    \"card-modal-backdrop-inactive\": oldCardView === CardView.GRID,\r\n  });\r\n\r\n  const cardChildContainer = classNames(\"card-child-container\", {\r\n    \"card-child-container-preview\": state.cardView === CardView.PREVIEW,\r\n    \"card-child-container-fullscreen\": state.cardView === CardView.FULL_SCREEN,\r\n    \"card-child-container-grid\": state.cardView === CardView.GRID,\r\n  });\r\n\r\n  const { enable, disable } = useKeyboardShortcut({\r\n    keyCode: 27, //escape\r\n    action: () => {\r\n      if (\r\n        oldCardView === CardView.FULL_SCREEN ||\r\n        oldCardView === CardView.PREVIEW\r\n      ) {\r\n        setCardView(CardView.GRID);\r\n      }\r\n    },\r\n    disabled: false,\r\n  });\r\n\r\n  const showDeleteButton = (): JSX.Element | undefined => {\r\n    if (appModeState == AppMode.EDIT && data) {\r\n      return (\r\n        <>\r\n          <DeleteButton\r\n            onClick={() => {\r\n              console.log(\"got delete button click\");\r\n              deleteCardAction(data.id);\r\n            }}\r\n            action={() => {\r\n              deleteCardAction(data.id);\r\n            }}\r\n          />\r\n          <SettingsButton\r\n            onClick={(e) => {\r\n              actions.toggleMenu();\r\n            }}\r\n          />\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderCardInfo = (): JSX.Element | undefined => {\r\n    if (\r\n      oldCardView === CardView.PREVIEW &&\r\n      data &&\r\n      data.contentType !== \"widget\"\r\n    ) {\r\n      return (\r\n        <CardInfo className={state.cardInfoClass} data={data as CardData} />\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderInternals = () => {\r\n    if (data?.contentType !== \"widget\") {\r\n      return [showDeleteButton(), renderCardInfo()];\r\n    } else {\r\n      return [showDeleteButton()];\r\n    }\r\n  };\r\n\r\n  const renderReturnButton = (): JSX.Element | undefined => {\r\n    if (oldCardView === CardView.FULL_SCREEN) {\r\n      return (\r\n        <ReturnButton\r\n          onClick={() => {\r\n            setCardView(CardView.GRID);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  const containerReference = useRef(null);\r\n  useOnClickOutside(containerReference, (e) => {\r\n    e.preventDefault();\r\n    console.log(\"clicked outside\");\r\n    if (state.cardView == CardView.PREVIEW) {\r\n      actions.setCardView(CardView.GRID);\r\n    }\r\n  });\r\n\r\n  const qrContainerStyle = {\r\n    width: \"fit-content\",\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    zIndex: 1,\r\n    right: 0,\r\n    transform: \"translate(50%, 50%)\",\r\n  } as React.CSSProperties;\r\n\r\n  const renderQrCode = (): JSX.Element | undefined => {\r\n    if (state.cardView === CardView.PREVIEW && data?.contentType !== \"widget\") {\r\n      const cd = data as CardData;\r\n      return (\r\n        <div style={qrContainerStyle}>\r\n          <QRCode size={128} value={cd?.src ?? \"\"} />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    //receives a drag objects\r\n    <div\r\n      className={state.cardClass}\r\n      ref={cardContainerReference}\r\n      style={{\r\n        willChange: \"transform\",\r\n        height: \"100%\",\r\n        transform: state.transform,\r\n        backgroundColor: state.cardBackgroundColor,\r\n      }}\r\n    >\r\n      {children ? (\r\n        <div className={cardModalBackdrop}>\r\n          <div\r\n            className={cardChildContainer}\r\n            onMouseUp={() => {\r\n              actions.handleCardPress();\r\n              // onCardPress();\r\n              if (onClick) {\r\n                onClick();\r\n              }\r\n            }}\r\n            ref={containerReference}\r\n          >\r\n            {renderQrCode()}\r\n            {renderInternals()}\r\n            {children(state.scale)}\r\n            <SettingsMenu\r\n              {...settingsMenuProperties}\r\n              isShown={state.showMenu}\r\n            />\r\n          </div>\r\n          {renderReturnButton()}\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n// class App extends React.Component<{ message: string }, { count: number }> {\r\nconst calculateTransform = (boundingBox: DOMRect): string => {\r\n  const windowWidth = window.innerWidth;\r\n  const windowHeight = window.innerHeight;\r\n  const vw = window.innerWidth / 100;\r\n  const vh = window.innerWidth / 100;\r\n  const futureWidth = vw * 60;\r\n  const futureHeight = vh * 40;\r\n\r\n  const centeredX = windowWidth / 2 - futureWidth / 2;\r\n  const centeredY = windowHeight / 2 - futureHeight / 2;\r\n\r\n  const currentX = boundingBox.x;\r\n  const currentY = boundingBox.y;\r\n  let differenceX = centeredX - currentX;\r\n  let differenceY = centeredY - currentY;\r\n\r\n  if (centeredX < currentX) {\r\n    differenceX = currentX - centeredX;\r\n    differenceX *= -1;\r\n  }\r\n  if (centeredY < currentY) {\r\n    differenceY = currentY - centeredY;\r\n    differenceY *= -1;\r\n  }\r\n\r\n  return `translate(${differenceX}px, ${differenceY}px)`;\r\n};\r\n\r\nconst setGpZindex = (\r\n  refdiv: RefObject<HTMLDivElement> | null,\r\n  index: number\r\n): void => {\r\n  if (refdiv) {\r\n    const cardGrandParent = refdiv.current?.parentElement?.parentElement;\r\n    if (cardGrandParent) {\r\n      cardGrandParent.style.zIndex = index.toString();\r\n    }\r\n  }\r\n};\r\n//depending on the view state of the card, change its html output node\r\n\r\nconst FailureNotice = ({ errors }: { errors: string[] }): JSX.Element => {\r\n  return (\r\n    <div className=\"failure-notice-container\">\r\n      {errors.map((error, index) => (\r\n        <div className=\"failure-message\" key={index}>\r\n          <InlineAlert intent=\"danger\" key={index}>\r\n            {error}\r\n          </InlineAlert>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ReturnButton = ({\r\n  onClick,\r\n}: {\r\n  onClick: MouseEventHandler<HTMLDivElement>;\r\n}): JSX.Element => {\r\n  return (\r\n    <div className=\"return-button-container\">\r\n      <Button onClick={onClick} text=\"Return\" width={300} />\r\n    </div>\r\n  );\r\n};\r\nfunction propertiesAreEqual(\r\n  previousProperties: Readonly<PropsWithChildren<ViewCardProperties>>,\r\n  nextProperties: Readonly<PropsWithChildren<ViewCardProperties>>\r\n): boolean {\r\n  return true;\r\n}\r\n\r\nexport default React.memo(ViewCard);\r\n","import IXDrop from '../IXDrop';\nimport React, { useState } from 'react';\nimport ViewCard from './ViewCard/ViewCard';\nimport { DndTypes } from '../../enums';\nimport { Layout, Layouts, Responsive, WidthProvider } from 'react-grid-layout';\nimport '../../css/cardLayout.css';\nimport appConfig from '../../static/appConfig';\nimport { GridPosition } from '../../interfaces/GridPosition';\n\ntype GuideGridSettings = Partial<ReactGridLayout.ResponsiveProps>\n\nexport const GuideGrid = ({gridSettings}:{ gridSettings: GuideGridSettings}): JSX.Element => {\n  const ResponsiveGridLayout = WidthProvider(Responsive);\n  const guideCards = generateFilledLayout(appConfig.gridRows, appConfig.gridCols)\n  const justCardNames = guideCards.lg.map(c=>c.i)\n\n  return (\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          zIndex: 0,\n        }}\n      >\n          <ResponsiveGridLayout\n            {...gridSettings}\n            className=\"card-layout\"\n            layouts={guideCards}\n            resizeHandles={[]}\n            preventCollision={true}\n            isDraggable={false}\n            isResizable={false}\n          >\n            {justCardNames.map((p, index) => {\n              return (\n                <div key={p}>\n                  <IXDrop\n                    key={index}\n                    droppableId={p}\n                    cardType={DndTypes.PLACEHOLDER}\n                    className = {\"droppable-guide\"}\n                  >\n                    <ViewCard\n                      key={p}\n                      cardId={p}\n                      cardType={DndTypes.PLACEHOLDER}\n                    ></ViewCard>\n                  </IXDrop>\n                </div>\n              );\n            })}\n          </ResponsiveGridLayout>\n      </div>\n  );\n};\nexport default React.memo(GuideGrid);\n\n\nfunction generateFilledLayout(rows: number, cols: number): Layouts {\n  const allGridSpots: GridPosition[] = [];\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      allGridSpots.push({ x: x, y: y });\n    }\n  }\n\n  const emptyCards = allGridSpots.map((rr) => {\n    return {\n      x: rr.x,\n      y: rr.y,\n      w: 1,\n      h: 1,\n      i: `empty_card_[${rr.x}, ${rr.y}]`,\n      minW: 1,\n      maxW: 1,\n      minH: 1,\n      maxH: 1,\n      static: false,\n      // static: true,\n      isDraggable: false,\n      isResizable: false,\n      resizeHandles: [],\n    } as Layout;\n  });\n\n  //TODO: MORE FUNCTIONAL SOLUTION\n  // const filled = layout.concat(emptyCards);\n  //pop off the first two positions where the clock is\n  // emptyCards.shift();\n  // emptyCards.shift();\n  return {\n    lg: emptyCards,\n    md: emptyCards,\n    sm: emptyCards,\n    xs: emptyCards,\n    xxs: emptyCards,\n  };\n}","import \"../../css/cardLayout.css\";\nimport \"../../css/libs/reactDraggable.css\";\n\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Layouts, Responsive, WidthProvider } from \"react-grid-layout\";\n\nimport CardData from \"../../data_structs/CardData\";\nimport WidgetData from \"../../data_structs/WidgetData\";\nimport { AppMode, DndTypes } from \"../../enums\";\nimport { useStoreActions, useStoreState } from \"../../hooks\";\nimport appConfig from \"../../static/appConfig\";\nimport HowToUse from \"../HowToUse\";\nimport IFrameView from \"../IFrameView\";\nimport IXDrop from \"../IXDrop\";\nimport Clock from \"../Widgets/Clock\";\nimport GuideGrid from \"./GuideGrid\";\nimport ViewCard from \"./ViewCard/ViewCard\";\n\nexport const CardGrid = (): JSX.Element => {\n  const viewModeState = useStoreState((state) => state.appModel.appMode);\n  const setBufferLayoutAction = useStoreActions(\n    (actions) => actions.layoutsModel.setBufferLayout\n  );\n\n  const currentLayoutState = useStoreState(\n    (state) => state.layoutsModel.activeLayout\n  );\n  //use the size of the window in order to set the height of the cards\n  const [size, setSize] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight,\n  });\n\n  const isEditMode = useMemo(() => {\n    return viewModeState === AppMode.EDIT;\n  }, [viewModeState]);\n\n  const activeCards = useStoreState((state) => state.appModel.activeCards);\n  const activeWidgets = useStoreState((state) => state.appModel.activeWidgets);\n  const [realLayout, setRealLayout] = useState(currentLayoutState?.layout);\n  //keep a local mutable reference to a layout in order to avoid making excess calls to store and causing re-renders on each new edit\n  const localLayout = useRef<null | Layouts>(null);\n\n  //each card has a unique key. Clicking a card sets the current active key. If a card's key is equal to the active key\n  //then it will be rendered into the modal popup\n  const activeKeyReference = useRef(\"\");\n  const ResponsiveGridLayout = WidthProvider(Responsive);\n\n  useEffect(() => {\n    console.log(window.innerHeight / appConfig.gridRows);\n    setRealLayout(currentLayoutState?.layout);\n    if (currentLayoutState?.layout) {\n      localLayout.current = currentLayoutState?.layout;\n    }\n  }, [activeCards, currentLayoutState, activeWidgets]);\n\n  const sharedGridSettings = {\n    breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n    cols: {\n      lg: appConfig.gridCols,\n      md: appConfig.gridCols,\n      sm: appConfig.gridCols,\n      xs: appConfig.gridCols,\n      xxs: appConfig.gridCols,\n    },\n    rowHeight: size.y / appConfig.gridRows,\n    margin: [20, 20] as [number, number],\n    preventCollision: true,\n    compactType: null,\n  };\n\n  const renderWidget = (widgetData: WidgetData): JSX.Element | undefined => {\n    let widget = undefined;\n\n    switch (widgetData.id) {\n      case \"clock\":\n        widget = (\n          <ViewCard\n            cardType={DndTypes.CLOCK}\n            onClick={() => {\n              console.log(\"clock clicked\");\n            }}\n          >\n            {(scale) => {\n              return <Clock />;\n            }}\n          </ViewCard>\n        );\n\n        break;\n      case \"info\":\n        widget = (\n          <ViewCard cardType={DndTypes.CLOCK}>\n            {(scale) => {\n              return <HowToUse />;\n            }}\n          </ViewCard>\n        );\n        break;\n    }\n    console.log(widget);\n    return widget;\n  };\n\n  return (\n    <div>\n      <div className=\"card-grid-container\">\n        <ResponsiveGridLayout\n          {...sharedGridSettings}\n          className=\"card-layout\"\n          // isBounded\n          isDraggable={isEditMode}\n          isResizable={isEditMode}\n          layouts={realLayout}\n          onDragStart={(layout, oldItem, newItem, placeholder, e, element) => {\n            const previousStyle = element.style;\n            previousStyle.border = \"2px solid cyan\";\n            element.style.border = \"4px solid cyan\";\n          }}\n          onLayoutChange={(l) => {\n            console.log(\"CHANGED THE LAYOUT\");\n            const newLayout: Layouts = {\n              lg: l,\n              md: l,\n              sm: l,\n              xs: l,\n              xxs: l,\n            };\n            localLayout.current = newLayout;\n            setBufferLayoutAction(newLayout);\n            // setBufferLayoutAction(localLayout.current);\n          }}\n          preventCollision\n          resizeHandles={[\"se\"]}\n          verticalCompact\n        >\n          {/* {\n            activeWidgets.map((widget: WidgetData, index: number)=>{\n              return (\n              <div\n              draggable\n              key={widget.id}\n              >\n              {\n                renderWidget(widget)\n              }\n              Im a Widget\n              </div>)\n            })\n          } */}\n          {[...activeCards, ...activeWidgets].map(\n            (card: CardData | WidgetData, index: number) => {\n              return (\n                <div className=\"card-container\" draggable key={card.id}>\n                  <IXDrop\n                    cardType={DndTypes.IFRAME}\n                    className=\"droppable-card\"\n                    droppableId={card.id}\n                    key={index}\n                  >\n                    <ViewCard\n                      activeKey={activeKeyReference}\n                      cardId={index.toString()}\n                      cardType={DndTypes.IFRAME}\n                      data={card}\n                      key={index.toString()}\n                      onClick={() => {\n                        activeKeyReference.current = index.toString();\n                      }}\n                    >\n                      {card.contentType !== \"widget\"\n                        ? (scale) => {\n                            const contentCard = card as CardData;\n                            return (\n                              <IFrameView card={contentCard} scale={scale} />\n                            );\n                          }\n                        : (scale) => {\n                            return renderWidget(card as WidgetData);\n                          }}\n                      {}\n                    </ViewCard>\n                  </IXDrop>\n                </div>\n              );\n            }\n          )}\n        </ResponsiveGridLayout>\n      </div>\n      <GuideGrid gridSettings={sharedGridSettings} />\n    </div>\n  );\n};\nexport default React.memo(CardGrid);\n\nconst cardContainerClass = (card: CardData, appMode: AppMode): string => {\n  const isFailed = card.failed;\n  if (isFailed && appMode === AppMode.DISPLAY) {\n    return \"card-container-hidden\";\n  } else if (isFailed && appMode === AppMode.EDIT) {\n    return \"card-container-error\";\n  } else {\n    return \"card-container\";\n  }\n};\n\n//\n","const TestShader1 = {\n    uniforms: {\n      time: { value: 0.0 }\n    },\n    vertexShader: `\n    vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n  \n    float snoise(vec2 v) {\n        const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                            -0.577350269189626,  // -1.0 + 2.0 * C.x\n                            0.024390243902439); // 1.0 / 41.0\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n        vec2 i1;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n            + i.x + vec3(0.0, i1.x, 1.0 ));\n  \n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n  \n  \n    \n  \n    uniform float u_time;\n    uniform vec2 u_randomisePosition;\n  \n    varying float vDistortion;\n    varying float xDistortion;\n    varying vec2 vUv;\n  \n    void main() {\n        vUv = uv;\n        vDistortion = snoise(vUv.xx * 3. - u_randomisePosition * 0.15);\n        xDistortion = snoise(vUv.yy * 1. - u_randomisePosition * 0.05);\n        vec3 pos = position;\n        pos.z += (vDistortion * 35.);\n        pos.x += (xDistortion * 25.);\n  \n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n    }\n    `,\n    fragmentShader: `\n    vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n  \n    float snoise(vec2 v) {\n        const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                            -0.577350269189626,  // -1.0 + 2.0 * C.x\n                            0.024390243902439); // 1.0 / 41.0\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n        vec2 i1;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n            + i.x + vec3(0.0, i1.x, 1.0 ));\n  \n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n  \n  \n  \n  \n  \n    vec3 rgb(float r, float g, float b) {\n      return vec3(r / 255., g / 255., b / 255.);\n  }\n  \n  vec3 rgb(float c) {\n      return vec3(c / 255., c / 255., c / 255.);\n  }\n  \n  uniform vec3 u_bg;\n  uniform vec3 u_bgMain;\n  uniform vec3 u_color1;\n  uniform vec3 u_color2;\n  uniform float u_time;\n  \n  varying vec2 vUv;\n  varying float vDistortion;\n  \n  void main() {\n      vec3 bg = rgb(u_bg.r, u_bg.g, u_bg.b);\n      vec3 c1 = rgb(u_color1.r, u_color1.g, u_color1.b);\n      vec3 c2 = rgb(u_color2.r, u_color2.g, u_color2.b);\n      vec3 bgMain = rgb(u_bgMain.r, u_bgMain.g, u_bgMain.b);\n  \n      float noise1 = snoise(vUv + u_time * 0.08);\n      float noise2 = snoise(vUv * 2. + u_time * 0.1);\n  \n      vec3 color = bg;\n      color = mix(color, c1, noise1 * 0.6);\n      color = mix(color, c2, noise2 * .4);\n  \n      color = mix(color, mix(c1, c2, vUv.x), vDistortion);\n  \n      float border = smoothstep(0.1, 0.6, vUv.x);\n  \n      color = mix(color, bgMain, 1. -border);\n  \n      gl_FragColor = vec4(color, 1.0);\n  }\n    `\n  }\n  \n  export default TestShader1","import type GoogleSheet from \"./interfaces/GoogleSheet\";\nimport type SheetId from \"./interfaces/SheetId\";\n\n// export function getSheet<T>(sheetId: SheetId): Promise<GoogleSheet<T>> {\n//   return new Promise<GoogleSheet<T>>(function (resolve, reject) {\n//     fetch(\n//       \"https://spreadsheets.google.com/feeds/list/1wQ1TGqnCTmaqqDak1rTRxPMSGSGLMilwrecf7TuqDGc/1/public/values?alt=json\"\n//     ).then((res) => {\n//       console.log(res);\n//       res.json();\n//     });\n//     // labeledCols(sheetId.key, sheetId.sheet_number)\n//     GetSheetDone.labeledCols(sheetId.key, sheetId.sheet_number)\n//       .then((sheet: GoogleSheet<T>) => {\n//         console.log(sheet);\n//         resolve(sheet);\n//       })\n//       .catch((error: unknown) => {\n//         console.error(\n//           `Error: ${error} fetching DOC_KEY ${sheetId.key}, sheet number ${sheetId.sheet_number}`\n//         );\n//       });\n//   });\n// }\n\nexport function formatDate(date: Date | undefined): string {\n  if (date) {\n    const d = new Date(date);\n    let month = \"\" + (d.getMonth() + 1);\n    let day = \"\" + d.getDate();\n    const year = d.getFullYear();\n\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n\n    return [year, month, day].join(\"-\");\n  } else {\n    return \"faulty date\";\n  }\n}\n\n// String.prototype.toTitleCase = function () { return this.valueOf().toLowerCase().replace(this.valueOf()[0], this.valueOf()[0].toUpperCase()); }\nexport function toTitleCase(str: string) {\n  const words = str.split(\" \");\n  const title = words.map((w) => titleCapitilization(w)).join(\" \");\n  return title;\n}\nfunction titleCapitilization(str: string) {\n  const regex = /^[a-z]{0,1}|\\s\\w/gi;\n\n  str = str.toLowerCase();\n\n  str.match(regex)?.forEach((char) => {\n    str = str.replace(char, char.toUpperCase());\n  });\n\n  return str;\n}\n\nexport function randomIntFromInterval(min: number, max: number) { // min and max included \n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n\n// function\n\n// const toTitleCase = (str: string) => {\n//   const articles = ['a', 'an', 'the'];\n//   const conjunctions = ['for', 'and', 'nor', 'but', 'or', 'yet', 'so'];\n//   const prepositions = [\n//     'with', 'at', 'from', 'into','upon', 'of', 'to', 'in', 'for',\n//     'on', 'by', 'like', 'over', 'plus', 'but', 'up', 'down', 'off', 'near'\n//   ];\n\n//   // The list of spacial characters can be tweaked here\n//   const replaceCharsWithSpace = (str) => str.replace(/[^0-9a-z&/\\\\]/gi, ' ').replace(/(\\s\\s+)/gi, ' ');\n//   const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.substr(1);\n//   const normalizeStr = (str) => str.toLowerCase().trim();\n//   const shouldCapitalize = (word, fullWordList, posWithinStr) => {\n//     if ((posWithinStr == 0) || (posWithinStr == fullWordList.length - 1)) {\n//       return true;\n//     }\n\n//     return !(articles.includes(word) || conjunctions.includes(word) || prepositions.includes(word));\n//   }\n\n//   str = replaceCharsWithSpace(str);\n//   str = normalizeStr(str);\n\n//   let words = str.split(' ');\n//   if (words.length <= 2) { // Strings less than 3 words long should always have first words capitalized\n//     words = words.map(w => capitalizeFirstLetter(w));\n//   }\n//   else {\n//     for (let i = 0; i < words.length; i++) {\n//       words[i] = (shouldCapitalize(words[i], words, i) ? capitalizeFirstLetter(words[i], words, i) : words[i]);\n//     }\n//   }\n\n//   return words.join(' ');\n// }\n","import React, { useRef } from 'react'\nimport { Canvas, useFrame, } from '@react-three/fiber'\n\nimport TestShader1 from './TestShader1'\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei'\nimport * as THREE from 'three'\nimport {randomIntFromInterval} from \"../../utils\"\nvar randomisePosition = new THREE.Vector2(1, 2)\n\nfunction rgb(r, g, b) {\n  return new THREE.Vector3(r, g, b)\n}\n\nconst segmentsResolution = 45\n\nconst baseColors = {\n  pink: rgb(182, 9, 76),\n  brightPink: rgb(241, 3, 66),\n  darkPurple: rgb(42, 8, 56),\n  orange: rgb(244, 93, 31),\n  darkgrey: rgb(50,50,50),\n  lightgrey: rgb(150,150,150),\n  red: rgb(204, 0, 0)\n}\n\nconst uniforms = {\n  u_bg: { type: 'v3', value: baseColors.lightgrey },\n  u_bgMain: { type: 'v3', value: baseColors.lightgrey },\n  u_color1: { type: 'v3', value: baseColors.lightgrey },\n  u_color2: { type: 'v3', value: baseColors.lightgrey },\n  u_time: { type: 'f', value: 0 },\n  u_randomisePosition: { type: 'v2', value: randomisePosition }\n}\nconst R = function (x, y, t) {\n  return Math.floor(192 + 64 * Math.cos((x * x - y * y) / 300 + t))\n}\n\nconst G = function (x, y, t) {\n  return Math.floor(192 + 64 * Math.sin((x * x * Math.cos(t / 4) + y * y * Math.sin(t / 3)) / 300))\n}\n\nconst B = function (x, y, t) {\n  return Math.floor(192 + 64 * Math.sin(5 * Math.sin(t / 9) + ((x - 100) * (x - 100) + (y - 100) * (y - 100)) / 1100))\n}\n\nconst ShadedGeometry1 = ({ position }) => {\n  const shaderMaterialRef = useRef()\n  let t = 0\n  let j = 0\n  \n  let x = randomIntFromInterval(0,32)\n  let y = randomIntFromInterval(0, 32)\n  let vCheck = false\n\n  useFrame(({ clock }) => {\n    shaderMaterialRef.current.uniforms.u_randomisePosition.value = new THREE.Vector2(j, j)\n    shaderMaterialRef.current.uniforms.u_color1.value = new THREE.Vector3(R(x, y, t / 2), G(x, y, t / 2), B(x, y, t / 2))\n\n    shaderMaterialRef.current.uniforms.u_time.value = t\n    if (t % 0.1 === 0) {\n      if (vCheck === false) {\n        x -= 1\n        if (x <= 0) {\n          vCheck = true\n        }\n      } else {\n        x += 1\n        if (x >= 32) {\n          vCheck = false\n        }\n      }\n    }\n    // Increase t by a certain value every frame\n    j = j + 0.01\n    t = t + 0.01\n  })\n\n  return (\n    <mesh position={position} rotation={[THREE.MathUtils.degToRad(0), THREE.MathUtils.degToRad(0), THREE.MathUtils.degToRad(90)]}>\n      <planeGeometry attach=\"geometry\" args={[400, window.innerWidth / 2, segmentsResolution, segmentsResolution]} />\n      <shaderMaterial\n        attach=\"material\"\n        vertexShader={TestShader1.vertexShader}\n        fragmentShader={TestShader1.fragmentShader}\n        uniforms={uniforms}\n        ref={shaderMaterialRef}\n      />\n    </mesh>\n  )\n}\n\nconst BackgroundShader = () => {\n  const cam = useRef()\n  return (\n    <Canvas gl={{ antialias: false, alpha: false }}>\n      <PerspectiveCamera ref={cam} position={[0, 0, 0]} fov={75} aspect={window.innerWidth / window.innerHeight} near={0.1} far={1000} />\n      <ShadedGeometry1 position={[0, 0, -100]} faceResolution={100} />\n      <OrbitControls />\n    </Canvas>\n  )\n}\n\nexport default BackgroundShader\n","import React, { useEffect, useState } from 'react';\nimport { AppMode } from '../enums';\nimport { useStoreState } from '../hooks';\nimport '../css/background.css';\nimport classNames from 'classnames';\nimport BackgroundShader from \"./Background/BackgroundShader\"\nimport ReactDOM from 'react-dom';\n\n\nconst Background = (): JSX.Element => {\n  const viewMode = useStoreState((state) => state.appModel.appMode);\n  const [size, setSize] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight,\n  });\n\n  const [backgroundStyle, setBackgroundStyle] = useState({\n    backgroundColor: \"gray\",\n  } as React.CSSProperties);\n  useEffect(() => {\n    const isEditMode = viewMode == AppMode.EDIT;\n\n    const style = {\n      position: \"absolute\",\n      height: \"100vh\",\n      width: \"100vw\",\n      top: 0,\n      left: 0,\n      backgroundColor: isEditMode ? \"white\" : \"gray\",\n      transition: \"background-color 0.5s ease\",\n    } as React.CSSProperties;\n    setBackgroundStyle(style);\n  }, [viewMode]);\n\n  const backgroundClass = classNames(\"background-container\",{\n    \"background-container-display-mode\": viewMode == AppMode.DISPLAY,\n    \"background-container-edit-mode\": viewMode == AppMode.EDIT,\n  })\n\n\n  const bgFillSolid = {\n    position: \"absolute\",\n    height: \"100vh\",\n    width: \"100vw\",\n    top: 0,\n    left: 0,\n    backgroundColor: \"lightgrey\",\n    transition: \"background-color 0.5s ease\",\n  } as React.CSSProperties;\n\n\n  return ReactDOM.createPortal(\n    <div style={backgroundStyle} className = {backgroundClass} >\n      {viewMode === AppMode.EDIT ? (\n        <div style={bgFillSolid}></div>\n      ) : (\n        <div className = \"background-container\">\n        <div className = \"shader-container\">\n        <BackgroundShader/>\n        </div>\n        <div className = \"particle-container\">\n        </div>\n        </div>\n      )}\n    </div>,     document.querySelector(\"#background\") as HTMLElement\n  );\n};\n\nexport default Background;\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst FlexRow = ({\r\n  children,\r\n  padding,\r\n}: {\r\n  children: JSX.Element | JSX.Element[];\r\n  padding?: string;\r\n}): JSX.Element => {\r\n  return (\r\n    <div style={{ display: \"flex\", flexDirection: \"row\", padding: padding }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlexRow;\r\n","import React, { FC, ReactNode } from \"react\";\nimport { Draggable, DraggableProps } from \"react-beautiful-dnd\";\nimport { DndTypes } from \"../enums\";\n\ninterface DraggableRowProperties  extends Omit<DraggableProps, \"children\"> {\n  dndType: DndTypes;\n  className?: string;\n  children: ReactNode;\n  dragAll?: boolean;\n}\n\n/**\n * A draggable table row.\n * @param param0\n * @returns\n */\nconst DraggableRow = ({\n  dndType,\n  className,\n  children,\n  dragAll,\n  ...properties\n}:DraggableRowProperties ) => {\n  // console.log(React.isValidElement(children));\n  // console.log(props);\n  if (!React.isValidElement(children)) return <div />;\n  // const child = React.memo(children, []);\n  return (\n    <Draggable {...properties}>\n      {(provided, snapshot) => {\n        const dragHandleProperties = dragAll ? provided.dragHandleProps : {};\n\n        return (\n          <>\n            <tr\n              className={className}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...dragHandleProperties}\n            >\n              {React.cloneElement(children, { provided })}\n            </tr>\n            <tr\n              style={{\n                display: snapshot.isDragging ? \"table-row\" : \"none\",\n                backgroundColor: snapshot.isDragging ? \"green\" : \"none\",\n              }}\n            >\n              {React.cloneElement(children, { provided })}\n            </tr>\n          </>\n        );\n      }}\n    </Draggable>\n  );\n};\n\nDraggableRow.defaultProps = {\n  dragAll: true,\n};\n\nexport default React.memo(DraggableRow);\n","enum IFrameLoadError {\n  CROSS_ORIGIN = \"CROSS_ORIGIN\",\n}\n\nenum IFrameLoadWarning {\n  MALFORMED_URL = \"MALFORMED_URL\",\n}\n\nclass IFrameValidator {\n  url!: string;\n  errors!: IFrameLoadError[];\n  warnings!: IFrameLoadWarning[];\n  constructor(url: string) {\n    this.errors = [];\n    this.warnings = [];\n    this.url = url;\n  }\n  validate(event: React.SyntheticEvent<HTMLIFrameElement, Event>): void {\n    console.log(this.errors);\n    const malformedUrlCheckArray = validURL(this.url);\n    this.warnings.push(...malformedUrlCheckArray);\n    console.log(malformedUrlCheckArray);\n  }\n  isValid(): boolean {\n    return this.errors.length == 0;\n  }\n  errorMessages(): string[] {\n    let errors: string[] = [];\n    this.errors.map((e) => {\n      switch (e) {\n        case IFrameLoadError.CROSS_ORIGIN:\n          errors.push(\n            `Blocked a frame with origin ${this.url}; from accessing a cross-origin frame.`\n          );\n          break;\n        default:\n          console.log(\"error did not match an error enum\");\n      }\n    });\n    return errors;\n  }\n}\n\nexport default IFrameValidator;\n\n\n\nfunction validURL(str: string): IFrameLoadWarning[] {\n  let warningsArray = [];\n  const pattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n      \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n      \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n      \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  if (!pattern.test(str)) {\n    warningsArray.push(IFrameLoadWarning.MALFORMED_URL);\n  }\n  return warningsArray;\n}\n","import React, { useState } from \"react\";\nimport { toTitleCase } from \"../../utils\";\n/**\n * <th> component with a arrow indicating the filter direction\n */\nconst TableHeader = ({\n  headerTitle,\n  setFilter,\n  setFilterDirection,\n  className,\n  activeFilter,\n}: {\n  headerTitle: string;\n  setFilterDirection: (direction: boolean) => void;\n  setFilter: (filter: string) => void;\n  className?: string;\n  activeFilter: string | undefined;\n}): JSX.Element => {\n\n  const [sortDirection, setSortDirection] = useState(true);\n\n  const showSortArrow =  headerTitle === activeFilter\n\n  return (\n    <th\n      className={className ?? \"editor-panel-table-header\"}\n      onClick={() => {\n        setFilter(headerTitle);\n        setSortDirection(!sortDirection);\n        setFilterDirection(sortDirection);\n      }}\n    >\n      {toTitleCase(headerTitle)}\n      {showSortArrow && sortDirection\n        ? \"▲\"\n        : showSortArrow && !sortDirection\n        ? \"▼\"\n        : \"\"}\n    </th>\n  );\n};\n\nexport default TableHeader;\n\n","import \"../../../../css/table.css\";\n\nimport { SearchInput } from \"evergreen-ui\";\nimport fuzzysort from \"fuzzysort\";\nimport React, { useEffect, useState } from \"react\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\n\nimport CardData from \"../../../../data_structs/CardData\";\nimport { DndTypes, DragSource } from \"../../../../enums\";\nimport { useStoreActions, useStoreState } from \"../../../../hooks\";\nimport { formatDate } from \"../../../../utils\";\nimport IXDrop from \"../../../IXDrop\";\nimport Button from \"../../../Shared/Button\";\nimport FlexRow from \"../../../Shared/FlexRow\";\nimport XDrag from \"../../../DraggableRow\";\nimport TableHeader from \"../../TableHeader\";\n/**\n * Content tab display a list of the availalbe cards, and search bar for quickly finding cards by their title.\n */\n\n//TODO: REFACTOR\n\nconst ContentsTab = (): JSX.Element => {\n  const availableCards = useStoreState(\n    (state) => state.appModel.availableCards\n  );\n  const clearCardsAction = useStoreActions(\n    (actions) => actions.layoutsModel.clearCards\n  );\n  const resetLayoutAction = useStoreActions(\n    (actions) => actions.layoutsModel.resetLayout\n  );\n\n  const [filterKey, setFilterKey] = useState<string | undefined>();\n  const [filterDirection, setFilterDirection] = useState(true);\n  const [cardItems, setCardItems] = useState(availableCards);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filteredCards, setFilteredCards] =\n    useState<CardData[]>(availableCards);\n\n  //use search input to filter cards\n  useEffect(() => {\n    if (0 < searchTerm.length) {\n      const sortResult = fuzzysort.go(\n        searchTerm,\n        cardItems.map((c) => c.title)\n      );\n      const aboveThreshholdCardTitles: string[] = sortResult.map(\n        (s) => s.target\n      );\n      const filtered = cardItems.filter((c) =>\n        aboveThreshholdCardTitles.includes(c.title)\n      );\n      setFilteredCards(filtered);\n    } else {\n      setFilteredCards(cardItems);\n    }\n  }, [searchTerm, cardItems]);\n\n  //sort values by column attribute, if filterDirection is true, sort descending, else sort ascending\n  useEffect(() => {\n    const key = filterKey as keyof CardData;\n    const clone = [...availableCards];\n\n    const sortedItems = clone.sort((a, b) => {\n      const aText = a[key];\n      const bText = b[key];\n      if (aText && bText) {\n        if (aText < bText) {\n          return -1;\n        }\n        if (bText < aText) {\n          return 1;\n        }\n      }\n      return 0;\n    });\n    !filterDirection ? sortedItems.reverse() : null;\n    setCardItems(sortedItems);\n  }, [filterKey, availableCards, filterDirection]);\n\n  const contentTabHeader = \"contents-table-header\";\n  return (\n    <div className=\"contents-tab-container\">\n      <FlexRow padding=\"0.5em\">\n        <SearchInput\n          onChange={(event: React.FormEvent<HTMLInputElement>) =>\n            setSearchTerm(event.currentTarget.value)\n          }\n          placeholder=\"search title\"\n          width=\"80%\"\n        />\n        <Button\n          appearance=\"default\"\n          intent=\"danger\"\n          onClick={(event) => {\n            resetLayoutAction();\n          }}\n          text=\"Reset Layout\"\n        />\n        <Button\n          appearance=\"minimal\"\n          intent=\"danger\"\n          onClick={(event) => {\n            clearCardsAction();\n          }}\n          // width={\"10%\"}\n          text=\"Clear All\"\n        />\n      </FlexRow>\n      <IXDrop\n        cardType={DndTypes.CLOCK}\n        className=\"table-container\"\n        droppableId={DragSource.CARD_TABLE}\n        isDropDisabled\n      >\n        <table className=\"contents-tab-table\">\n          <tbody>\n            <tr>\n              {[\"title\", \"added\", \"sourceId\", \"author\", \"interaction\"].map(\n                (s, index) => {\n                  return (\n                    <TableHeader\n                      activeFilter={filterKey}\n                      className={contentTabHeader}\n                      headerTitle={s}\n                      key={index}\n                      setFilter={setFilterKey}\n                      setFilterDirection={setFilterDirection}\n                    ></TableHeader>\n                  );\n                }\n              )}\n            </tr>\n          </tbody>\n        </table>\n        <Scrollbars\n          autoHeight\n          autoHeightMax={319}\n          autoHeightMin={100}\n          onScrollFrame={(v) => console.log(v)}\n        >\n          <table style={{ padding: \"2em\" }}>\n            <tbody>\n              {filteredCards.map((card, index) => {\n                const { added, src, author, interaction, sourceId, isActive } =\n                  card;\n                return (\n                  <XDrag\n                    className={\n                      isActive ? \"content-row-active\" : \"content-row-inactive\"\n                    }\n                    dndType={DndTypes.CARD_ROW}\n                    draggableId={sourceId}\n                    index={index}\n                    isDragDisabled={isActive}\n                    key={index.toString()}\n                  >\n                    <>\n                      <td>\n                        <TitleWithIcon card={card} />\n                      </td>\n                      <td>{formatDate(added)}</td>\n                      <td>{src}</td>\n                      <td>{author}</td>\n                      <td>{interaction}</td>\n                    </>\n                  </XDrag>\n                );\n              })}\n            </tbody>\n          </table>\n        </Scrollbars>\n      </IXDrop>\n    </div>\n  );\n};\n\n/**\n * Fetches a favicon for a card and displays the cards title\n */\nconst TitleWithIcon = ({ card }: { card: CardData }): JSX.Element => {\n  return (\n    <div style={{ display: \"flex\" }}>\n      <img\n        className={\n          card.isActive ? \"row-favicon-active\" : \"row-favicon-inactive\"\n        }\n        src={`https://s2.googleusercontent.com/s2/favicons?domain_url=${card.src}`}\n      ></img>\n      <div\n        style={{\n          marginTop: \"auto\",\n          marginBottom: \"auto\",\n          textAlign: \"left\",\n        }}\n      >\n        {card.src}\n      </div>\n    </div>\n  );\n};\n\nexport default ContentsTab;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"../../../../css/googleFormPopup.css\";\nimport { Pane, Dialog } from \"evergreen-ui\";\nimport Modal from \"../../../Shared/Modal\";\nimport formEmbedUrl from \"../../../../static/formEmbedUrl\";\nimport { useStoreState } from \"../../../../hooks\";\nimport classNames from \"classnames\";\nimport Button from \"../../../Shared/Button\";\nimport { ClipboardIcon, InlineAlert, CrossIcon, Heading } from \"evergreen-ui\";\nimport \"../../../../css/copyField.css\";\nimport Scrollbars from \"react-custom-scrollbars\";\n\n/**\n * Modal popup for displaying cards when in preview mode. Displays on top of the CardLayout, and renders\n * to <div id=\"google-form-popup\"></div> in index.html.\n * @component\n */\n\ninterface GoogleFormPopupProperties {\n  visible: boolean;\n  onCloseComplete: () => void;\n}\n\nconst GoogleFormPopup = ({\n  visible,\n  onCloseComplete,\n}: GoogleFormPopupProperties): JSX.Element => {\n  const layoutState = useStoreState((state) => state.layoutsModel.activeLayout);\n  // console.log(layoutState?.extendedLayout);\n  // console.log(layoutState?.extendedLayout.layoutSettings);\n\n  const [isShown, setIsShown] = useState(visible);\n  const [isCopiedJSON, setIsCopiedJson] = useState(false);\n  console.log(\"HELLO IM HERE\");\n  // const [layoutString, setLayoutString] = useState(\n  //   JSON.stringify(layoutState?.layout)\n  // );\n\n  // const [layoutString, setLayoutString] = useState(\n  //   JSON.stringify(layoutState?.extendedLayout)\n  // );\n\n  const layoutString = useStoreState((state) =>\n    JSON.stringify(state.layoutsModel.activeLayout)\n  );\n  console.log(layoutString);\n  const copyFieldContainerClass = classNames(\"copy-field-container\", {\n    \"copy-field-container-closed\": isCopiedJSON,\n  });\n\n  return ReactDom.createPortal(\n    <Modal\n      onClose={onCloseComplete}\n      active={isShown}\n      containerClassName=\"google-form-popup\"\n      backdropOpacity={0.5}\n    >\n      <div className={\"google-form-popup-inner-container\"}>\n        <Heading color={isCopiedJSON ? \"green\" : \"\"}>\n          1. Press the Copy Button\n        </Heading>\n        <Heading>\n          {isCopiedJSON\n            ? \"2. Fill out the form, and paste the copied text into the Content field, then submit\"\n            : \"\"}\n        </Heading>\n        <div className={copyFieldContainerClass}>\n          <CopyField\n            onCopy={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n              setIsCopiedJson(true);\n            }}\n            onCloseComplete={onCloseComplete}\n            text={layoutString}\n          />\n        </div>\n      </div>\n      {isCopiedJSON ? <GoogleFormIframe src={formEmbedUrl} /> : <></>}\n    </Modal>,\n    document.querySelector(\"#google-form-popup\") as HTMLElement\n  );\n};\nexport default GoogleFormPopup;\n//TODO: IMPROVE INHERITANCE OF BUTTONS\nconst CopyField = ({\n  text,\n  onCloseComplete,\n  onCopy,\n  isCurrentClipBoardContent,\n}: {\n  text: string;\n  isCurrentClipBoardContent?: boolean;\n  onCloseComplete: () => void;\n  onCopy: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}): JSX.Element => {\n  const [isClipBoardCorrect, setIsClipBoardCorrect] = useState(false);\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyFieldClass = classNames(\"copy-field\", {\n    \"copy-field-success\": isCopied && isClipBoardCorrect,\n    \"copy-field-failure\": !isCopied && !isClipBoardCorrect,\n  });\n\n  useEffect(() => {\n    navigator.clipboard\n      .readText()\n      .then((clipboardText) => {\n        if (text === clipboardText) {\n          setIsClipBoardCorrect(true);\n          setIsCopied(true);\n        } else {\n          setIsCopied(false);\n          setIsClipBoardCorrect(false);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Failed to read clipboard contents:\", error);\n      });\n  }, [text]);\n  return (\n    <div>\n      <Button\n        iconBefore={<ClipboardIcon />}\n        text={\"Copy Layout To Clip Board\"}\n        onClick={(e) => {\n          navigator.clipboard.writeText(text);\n          setIsCopied(true);\n          onCopy(e);\n        }}\n        width={\"100%\"}\n        intent={\"success\"}\n        appearance={\"primary\"}\n      />\n      {!isClipBoardCorrect ? (\n        <InlineAlert intent=\"warning\">\n          Current clipboard content is out of sync with current layout, copy the\n          layout to clipboard again.\n        </InlineAlert>\n      ) : (\n        <InlineAlert intent=\"success\">Clipboard is current</InlineAlert>\n      )}\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          paddingTop: \"1em\",\n        }}\n      >\n        <Button\n          iconBefore={<CrossIcon />}\n          text={\"Return\"}\n          onClick={onCloseComplete}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst GoogleFormIframe = ({ src }: { src: string }): JSX.Element => {\n  return (\n    <iframe\n      src={src}\n      className={\"google-form-iframe\"}\n      width={\"100%\"}\n      frameBorder={0}\n      marginHeight={0}\n      marginWidth={0}\n      // style={{ height: \"60em\" }}\n    ></iframe>\n  );\n};\n","const formEmbedUrl =\n  \"https://docs.google.com/forms/d/e/1FAIpQLSeKP2imQv_UCj4qrGNk7mT6Rzz83F30IvEl8ZFdERIdzSnvig/viewform?usp=sf_link\";\n\nexport default formEmbedUrl;\n","import React, { useState, useEffect } from \"react\";\nimport { useStoreState, useStoreActions } from \"../../../../hooks\";\nimport IXDrop from \"../../../IXDrop\";\nimport XDrag from \"../../../DraggableRow\";\nimport { DndTypes, DragSource } from \"../../../../enums\";\nimport { StatusIndicator } from \"evergreen-ui\";\nimport { formatDate } from \"../../../../utils\";\nimport \"../../../../css/table.css\";\n/**\n * Table for displaying the available card layouts\n * @returns\n */\n\nconst LayoutTable = (): JSX.Element => {\n  const externalLayoutsState = useStoreState(\n    (state) => state.layoutsModel.externalLayouts\n  );\n  const activeLayoutState = useStoreState(\n    (state) => state.layoutsModel.activeLayout\n  );\n\n  const setActiveLayoutAction = useStoreActions((actions)=>actions.layoutsModel.setActiveLayout)\n  return (\n    <div>\n      <IXDrop\n        className={\"table-container\"}\n        droppableId={DragSource.LAYOUT_TABLE}\n        isDropDisabled={false}\n        cardType={DndTypes.CLOCK}\n      >\n        <table>\n          <tbody>\n            <tr>\n              <th>Title</th>\n              <th>Date Added</th>\n              <th>Author</th>\n            </tr>\n          </tbody>\n        </table>\n        <table>\n          <tbody>\n            {externalLayoutsState.map((l, index) => {\n              const { id, title, author, added } = l;\n              return (\n                <tr key={index} onClick={(e)=>setActiveLayoutAction(l)}>\n                  <td key={index} >\n                    {id === activeLayoutState?.id ? (\n                      <StatusIndicator color=\"success\" />\n                    ) : (\n                      <></>\n                    )}\n                    {title}\n                  </td>\n                  <td>{formatDate(added)}</td>\n                  <td>{author}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </IXDrop>\n    </div>\n  );\n};\n\nexport default LayoutTable;\n","import {\n  AddIcon,\n} from \"evergreen-ui\";\nimport React, { FC,useEffect, useState } from \"react\";\n\nimport { useStoreActions,useStoreState } from \"../../../../hooks\";\nimport formEmbedUrl from \"../../../../static/formEmbedUrl\";\nimport Button from \"../../../Shared/Button\";\nimport Panel from \"../../../Shared/Panel\"; \nimport GoogleFormPopup from \"./GoogleFormPopup\";\nimport LayoutTable from \"./LayoutTable\";\n\nconst LayoutTab = (): JSX.Element => {\n  const layoutState = useStoreState((state) => state.layoutsModel.activeLayout);\n  const bufferState = useStoreState((state) => state.layoutsModel.bufferLayout);\n  const [showNewLayoutPopup, setShowNewLayoutPopup] = useState(false);\n  const fetchCardDataGoogleSheetThunk = useStoreActions(\n    (actions) => actions.googleSheetsModel.fetchAppGoogleSheet\n  );\n  const [layoutString, setLayoutString] = useState(JSON.stringify(layoutState));\n  useEffect(() => {\n    setLayoutString(JSON.stringify(bufferState));\n  }, [layoutState, bufferState]);\n\n\n  const newLayoutPopup = (): JSX.Element =>{\n    return showNewLayoutPopup ? <GoogleFormPopup\n      onCloseComplete={() => {\n        //reload the layouts after closing the add layout dialog\n        fetchCardDataGoogleSheetThunk()\n        setShowNewLayoutPopup(false);\n      }}\n      visible={showNewLayoutPopup}\n                                /> : <></>;\n  }\n  return (\n      <Panel>\n      <div style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\", padding:\".5em\" }}>\n        <Button\n          iconBefore={<AddIcon />}\n          onClick={(e) => {\n            setShowNewLayoutPopup(true);\n          }}\n          text=\"Add New Layout\"\n          width=\"90%\"\n          intent=\"success\"\n          appearance=\"primary\"\n        />\n      </div>\n      {\n        newLayoutPopup()\n      }\n      <div>\n        <LayoutTable />\n      </div>\n      </Panel>\n  );\n};\n\nexport default LayoutTab;\n","import React, { ReactNode, useEffect } from \"react\";\nimport { Draggable, DraggableProps } from \"react-beautiful-dnd\";\n\nimport { DndTypes } from \"../enums\";\nimport { useStoreState } from \"../hooks\";\n\ninterface DraggableDiv  extends Omit<DraggableProps, \"children\"> {\n  dndType: DndTypes;\n  className?: string;\n  children: ReactNode;\n  dragAll?: boolean;\n}\n\n/**\n * A draggable div for wrapping draggable widgets in the editor panel.\n */\nconst DraggableWidget = ({\n  dndType,\n  className,\n  children,\n  dragAll,\n  draggableId,\n  index, \n}:DraggableDiv ): JSX.Element => {\n  const currentLayoutState = useStoreState(\n    (state) => state.layoutsModel.activeLayout\n  );\n  \n  let isInLayout = currentLayoutState?.layout.lg.map(l=>l.i).includes(draggableId)\n\n  useEffect(()=>{\n    isInLayout = currentLayoutState?.layout.lg.map(l=>l.i).includes(draggableId)\n\n  },[currentLayoutState])\n  const getItemStyle = () => ({\n    display:isInLayout?\"none\":\"block\"\n\n  });\n\n  if (!React.isValidElement(children)) return <div />;\n  return (\n    <div style = {{display:isInLayout?\"none\":\"block\"}}>\n    <Draggable draggableId= {draggableId} index = {index}>\n      {(provided, snapshot) => {\n        console.log(isInLayout);\n        return (\n            <div\n              className={className}\n              ref={provided.innerRef}\n              style = {getItemStyle()}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n            >\n              {React.cloneElement(children, { provided })}\n            </div>\n        );\n      }}\n    </Draggable>\n    </div>\n  );\n};\n\n\nexport default DraggableWidget;\n","import \"../../../../css/table.css\";\n\nimport React, { useEffect } from \"react\";\n\nimport { DndTypes, DragSource } from \"../../../../enums\";\nimport DraggableDiv from \"../../../DraggableWidget\";\nimport IXDrop from \"../../../IXDrop\";\nimport Clock from \"../../../Widgets/Clock\";\nimport { useStoreState } from \"../../../../hooks\";\n/**\n * Table for displaying the available card layouts\n */\n\nconst WidgetsTab = (): JSX.Element => {\n  const currentLayoutState = useStoreState(\n    (state) => state.layoutsModel.activeLayout\n  );\n  \n\n\n  // console.log(\"ADDING WIDGET AT LAYOUT DATA\", toAdd);\n  // console.log(this.layout);\n  // const lg = Object.entries(this.layout)[0][1];\n  // if (lg.map(l=>l.i).includes(toAdd.id)){\n  //   console.log(\"ADDING A WIDGET THAT'S ALREADY PRESENT\");\n  // }\n  // for (const [k, v] of Object.entries(this.layout)) {\n  //   const newItem: Layout = {\n  //     x: pos.x,\n  //     y: pos.y,\n  //     w: 1,\n  //     h: 1,\n  //     i: toAdd.id,\n  //   };\n  //   this.layout[k].push(newItem);\n  // }\n  \n  \n  return (\n    <div>\n      <IXDrop\n        cardType={DndTypes.CLOCK}\n        className=\"table-container\"\n        droppableId={DragSource.WIDGETS_TABLE}\n        isDropDisabled={false}\n      >\n        <DraggableDiv \n        className=\"draggable-widget\"\n        dndType = {DndTypes.WIDGET}\n        draggableId=\"clock\"\n        index = {0}\n        isDragDisabled = {false}\n        >\n          <Clock />\n        </DraggableDiv>\n        <DraggableDiv \n        className=\"draggable-widget\"\n        dndType = {DndTypes.WIDGET}\n        draggableId=\"info\"\n        index = {1}\n        isDragDisabled = {false}\n        >\n          <button>HELLO</button>\n        </DraggableDiv>\n      </IXDrop>\n    </div>\n  );\n};\n\nexport default WidgetsTab;\n","import React from \"react\";\nimport { Heading } from \"evergreen-ui\";\nimport \"../../css/editorPanel.css\";\nimport ContentTab from \"./EditorTabs/ContentsTab/ContentsTab\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport LayoutTab from \"./EditorTabs/LayoutTab/LayoutTab\";\nimport WidgetsTab from \"./EditorTabs/WidgetsTab/WidgetsTab\";\n// https://github.com/goodoldneon/react-drag-and-dock#api\n\nconst Editor = (): JSX.Element => {\n  return (\n      <Tabs>\n        <TabList>\n          <Tab>Content</Tab>\n          <Tab>Widgets</Tab>\n          <Tab>Layouts</Tab>\n        </TabList>\n        <TabPanel>\n          <ContentTab />\n        </TabPanel>\n        <TabPanel>\n          <WidgetsTab />\n        </TabPanel>\n        <TabPanel>\n          <LayoutTab />\n        </TabPanel>\n      </Tabs>\n  );\n};\n\nexport default Editor;\n","import \"../../css/editorPanel.css\";\n\nimport classNames from \"classnames\";\nimport { MinusIcon,PlusIcon } from \"evergreen-ui\";\nimport React, { useState } from \"react\";\nimport ReactDom from \"react-dom\";\nimport Draggable from \"react-draggable\";\n\nimport { AppMode } from \"../../enums\";\nimport { useStoreState } from \"../../hooks\";\nimport Editor from \"./Editor\";\n\n/**Draggable panel which contains the editor body, as well as a header bar with a min/max button for resizing the panel. Renders to \"editor-panel-container\" div in index.html*/\n\nconst EditorPanel = (): JSX.Element => {\n  const viewModeState = useStoreState((state) => state.appModel.appMode);\n\n  const [minimized, setMinimized] = useState(false);\n\n  const editorPanelClass = classNames(\"editor-panel\", {\n    \"editor-panel-full\": !minimized,\n    hidden: viewModeState === AppMode.DISPLAY,\n    \"editor-panel-minimized\": minimized,\n  });\n  const editorClass = classNames(\"editor\", {\n    \"editor-visible\": viewModeState === AppMode.EDIT,\n  });\n\n  return ReactDom.createPortal(\n      <Draggable\n        bounds = {{left: 0, top: 0, right: window.innerWidth-50, bottom: window.innerHeight-50}}\n        defaultClassName={editorPanelClass}\n        defaultPosition={{ x: 100, y: 100 }}\n        handle=\".editor-panel-handle\"\n      >\n        <div className={editorClass}>\n          <PanelHeader>\n            <BarButton\n              icon={<PlusIcon />}\n              onMouseUp={() => {\n                setMinimized(false);\n              }}\n            />\n            <BarButton\n              icon={<MinusIcon />}\n              onMouseUp={() => {\n                setMinimized(true);\n              }}\n            />\n          </PanelHeader>\n          <Editor />\n        </div>\n      </Draggable>,\n    document.querySelector(\"#editor-panel-container\") as HTMLDivElement\n  );\n};\n\nexport default EditorPanel;\n\ninterface PanelHeaderProperties {\n  children: JSX.Element | JSX.Element[];\n}\nconst PanelHeader = ({ children }: PanelHeaderProperties): JSX.Element => {\n  return <div className=\"editor-panel-handle panel-header\">{children}</div>;\n};\n\nconst BarButton = ({\n  icon,\n  onMouseUp,\n}: {\n  icon: JSX.Element;\n  onMouseUp: React.MouseEventHandler<HTMLDivElement>;\n}): JSX.Element => {\n  return (\n    <div className=\"window-button\" onMouseUp={onMouseUp}>\n      {icon}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\n\nconst Screen = ({\n  children,\n  padding,\n}: {\n  children: JSX.Element | JSX.Element[];\n  padding?: string;\n}): JSX.Element => {\n  return (\n    <div style={{width: \"100vw\", height: \"100vh\"}}>\n      {children}\n    </div>\n  );\n};\n\nexport default Screen;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useStoreActions } from \"../hooks\";\nimport {useLongPress} from \"react-use\"\nimport appConfig from \"../static/appConfig\";\n\n/**Invisible button in the bottom left corner of the screen. Hold touch/click to toggle app mode */\nconst ModeChangeButton = (): JSX.Element => {\n  const toggleModeAction = useStoreActions((actions)=>actions.appModel.toggleAppMode)\n\n  const longPressEvent = useLongPress(()=>{toggleModeAction()})\n\n  const modeChangeButtonStyle = {\n      position: \"absolute\",\n      width: 50, \n      height: 50, \n      border: appConfig.showModeSwitchButton?\"1px solid red\":\"none\",\n      bottom: 0,\n      left: 0, \n  } as React.CSSProperties\n  return ReactDOM.createPortal(\n    <div style ={modeChangeButtonStyle} {...longPressEvent}>\n    </div>, document.querySelector(\"#mode-change-button\") as HTMLElement\n  );\n};\n\nexport default ModeChangeButton;\n\n\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.global.css\";\nimport \"./css/global.css\"\nimport { useStoreActions, useStoreState, useKeyboardShortcut} from \"./hooks\";\nimport CardGrid from \"./components/CardLayout/CardLayout\";\nimport Background from \"./components/Background\";\nimport { DropResult, DragDropContext } from \"react-beautiful-dnd\";\nimport { DndContext } from \"@dnd-kit/core\";\nimport EditorPanel from \"./components/EditorPanel/EditorPanel\";\nimport { CardAddEvent, CardSwapEvent } from \"./interfaces/CardEvents\";\nimport { GridPosition } from \"./interfaces/GridPosition\";\nimport HowToUse from \"./components/HowToUse\";\nimport { AppMode, DragSource } from \"./enums\";\nimport Screen from \"./components/Shared/Screen\";\nimport ModeChangeButton from \"./components/ModeChangeButton\";\nimport { useIdle } from \"react-use\";\nimport appConfig from \"./static/appConfig\";\n\n/**\n * High level container, the root component. Initial fetch requests to spreadsheets are made here via a useEffect hook.\n */\n\nconst App = (): JSX.Element => {\n  const isIdle = useIdle(appConfig.idleTime, false);\n\n  const toggleAppModeThunk = useStoreActions(\n    (actions) => actions.appModel.toggleAppMode\n  );\n  const fetchTopLevelSheetThunk = useStoreActions(\n    (actions) => actions.googleSheetsModel.fetchTopLevelSheet\n  );\n  const swapCardDataAction = useStoreActions(\n    (actions) => actions.layoutsModel.swapCardContent\n  );\n  const cardAddAction = useStoreActions(\n    (actions) => actions.layoutsModel.addCard\n  );\n  const widgetAddAction = useStoreActions(\n    (actions) => actions.layoutsModel.addWidget\n  );\n  const setActiveLayoutAction = useStoreActions(\n    (actions) => actions.layoutsModel.setActiveLayout\n  );\n  const externalLayoutsState = useStoreState(\n    (state) => state.layoutsModel.externalLayouts\n  );\n  const appModeState = useStoreState(\n    (state) => state.appModel.appMode\n  );\n\n  useEffect(()=>{\n    if (appModeState === AppMode.EDIT){\n      toggleAppModeThunk()\n    }\n  },[isIdle])\n\n  /**On app start make one-time fetch requests */\n  useEffect(() => {\n    fetchTopLevelSheetThunk()\n  }, []);\n\n\n  const cardIsEmpty = (cardId: string): boolean => {\n    return cardId.startsWith(\"empty\");\n  };\n\n  const stringToGridPos = (cardId: string): GridPosition => {\n    //card id's of empty cards is of \"empty_card_[x, y]\" format\n    const posString = cardId.split(\"[\")[1];\n    //x,y]\n    const x = Number.parseInt(posString.charAt(0));\n    //x\n    const y = Number.parseInt(posString.charAt(3));\n    //y\n    return {\n      x: x,\n      y: y,\n    } as GridPosition;\n  };\n\n  const onDragEnd = (response: DropResult) => {\n    console.log(\"processing drag end\");\n    if (response.destination?.droppableId == response.source?.droppableId)\n      return;\n    console.log(response);\n    const { source, destination, draggableId } = response;\n    console.log(source, destination, draggableId);\n    console.log(\n      `dragged from ${draggableId} to ${\n        destination?.droppableId\n      } current title: ${\"yes\"}`\n    );\n\n    if (!destination) return;\n    switch (source.droppableId) {\n      case DragSource.CARD_TABLE:\n        if (destination.droppableId) {\n          if (cardIsEmpty(destination.droppableId)) {\n            const cardPos = stringToGridPos(destination.droppableId);\n            const addEvent = {\n              sourceId: draggableId,\n              targetPosition: cardPos,\n            } as CardAddEvent;\n            cardAddAction(addEvent);\n            console.log(\"dropped onto an empty card, adding card\");\n          } else {\n            swapCardDataAction({\n              sourceId: draggableId,\n              targetId: destination.droppableId,\n            } as CardSwapEvent);\n          }\n        }\n        break;\n      case DragSource.WIDGETS_TABLE:\n        \n        console.log(draggableId);\n        console.log(destination.droppableId);\n        console.log(\"DRAGGING FROM WIDGETS TABLE\");\n        const cardPos = stringToGridPos(destination.droppableId);\n        const addEvent = {\n          sourceId: draggableId,\n          targetPosition: cardPos,\n        } as CardAddEvent;\n        widgetAddAction(addEvent)\n        break;\n      case DragSource.LAYOUT_TABLE:\n        const newLayout = externalLayoutsState.filter((l) => l.id === draggableId)[0];\n        setActiveLayoutAction(newLayout);\n        break;\n      default:\n        console.log(\"got unkown drag source\");\n    }\n  };\n\n  return (\n    <>\n        <HowToUse />\n        <Background />\n        <ModeChangeButton/>\n        <DragDropContext\n          onDragEnd={onDragEnd}\n        >\n          <EditorPanel />\n          <Screen>\n            <DndContext>\n              <CardGrid />\n            </DndContext>\n          </Screen>\n        </DragDropContext>\n    </>\n  );\n};\n\nexport default App;\n\n// i = \"Clock_Widget\"\n\n// {\"lg\":[{\"w\":2,\"h\":1,\"x\":0,\"y\":0,\"i\":\"clock\",\"moved\":false,\"static\":true},{\"w\":1,\"h\":1,\"x\":2,\"y\":1,\"i\":\"https://codepen.io/rcyou/embed/QEObEk?height=265&theme-id","import { InteractionType } from \"../enums\";\nimport IFrameValidator from \"../IFrameValidator\";\nimport type RawCardRow from \"../interfaces/RawCardRow\";\nimport { WidgetType } from \"./WidgetData\";\n\n\nexport type ContentType = \"video\"|\"image\"|\"website\"|\"embed\"|\"widget\"\n\ninterface ContentCardData{\n  src: string;\n  title: string;\n  added: Date;\n  sourceId: string;\n  author: string;\n}\n\ninterface WidgetCardData{\n  widgetType: WidgetType;\n}\n/**Contains all the information needed to create a display card */\nexport default class CardData {\n  readonly id: string;\n  readonly src: string;\n  readonly title: string;\n  readonly added?: Date;\n  readonly sourceId: string;\n  readonly author: string;\n  readonly interaction: InteractionType;\n  readonly contentType: ContentType;\n  readonly metaData: ContentCardData | WidgetCardData;\n  validator!: IFrameValidator;\n  isActive!: boolean;\n  failed!: boolean;\n\n  constructor(row: RawCardRow) {\n    // console.log(`GOT IMAGE CARD ROW: ${isImgLink(row.src)}`);\n    this.id = row.src\n    this.src = row.src;\n    this.title = row.title;\n    this.added = new Date(row.added);\n    this.sourceId = row.src;\n    this.author = row.author;\n    this.interaction =\n      InteractionType[row.interaction as keyof typeof InteractionType];\n    this.contentType = getContentType(this.src)\n    if (this.contentType === \"widget\" && row.widgetType){\n      this.metaData = {\n        widgetType: row.widgetType\n      }\n      this.id = row.widgetType\n    } else {\n      this.metaData = {\n        src: row.src,\n        title: row.title,\n        added: new Date(row.added),\n        sourceId: row.src,\n        author: row.author,\n      }\n      this.id = row.src\n    }\n\n    this.isActive = false;\n    this.validator = new IFrameValidator(this.src);\n    this.failed = false;\n\n    // if ()\n  }\n  setActive(b: boolean): void {\n    this.isActive = b;\n  }\n\n  fail(): void {\n    console.log(this.validator.errors);\n    this.failed = true;\n    // this.error =\n  }\n}\n \n\nfunction getContentType(url: string): ContentType{\n  if (isImgLink(url) ) return \"image\"\n  if (isVideo(url) ) return \"video\"\n  if (isEmbed(url) ) return \"embed\" \n  if (isWebsite(url)) return \"website\"\n  return \"widget\"\n\n}\n\nfunction isImgLink(url: string) {\n  if (typeof url !== \"string\") return false;\n  const imageReg = /[./](gif|jpg|jpeg|tiff|png)$/i;\n  return (\n    imageReg.test(url)\n  );\n}\n\nfunction isVideo(url: string){\n  if (typeof url !== \"string\") return false;\n  const videoReg = /[./](mp4|webm|mov)$/i;\n  return (\n    videoReg.test(url)\n    // url.match(/^http[^\\?]*.(jpg|jpeg|gif|png|tiff|bmp)(\\?(.*))?$/gim) != null\n  );\n}\n\nfunction isEmbed(url: string){\n  if (typeof url !== \"string\") return false;\n  return url.includes(\"embed\")\n}\n\nfunction isWebsite(url: string){\n  if (typeof url !== \"string\") return false;\n  return url.includes(\"https\")\n}","import { ContentType } from \"./CardData\";\n\nexport type WidgetType = \"clock\"|\"group label\"|\"info\"\n\ninterface WidgetCardData{\n  widgetType: WidgetType;\n}\n/**Contains all the information needed to create a display card */\nexport default class WidgetData {\n  readonly id: string;\n  readonly contentType: ContentType\n  isActive: boolean;\n\n\n  constructor(name: WidgetType) {\n    this.id = name as string\n    this.isActive = false;\n    this.contentType = \"widget\"\n  }\n  setActive(b: boolean): void {\n    this.isActive = b;\n  }\n\n}\n \n","import {\r\n  Action,\r\n  action,\r\n  debug,\r\n  Thunk,\r\n  thunk,\r\n  ThunkOn,\r\n  thunkOn,\r\n} from \"easy-peasy\";\r\n// import type {Action, Thunk, ThunkOn} from \"easy-peasy/types\"\r\nimport { Layouts } from \"react-grid-layout\";\r\n\r\nimport CardData from \"../data_structs/CardData\";\r\nimport WidgetData, { WidgetType } from \"../data_structs/WidgetData\";\r\nimport type {SheetNames} from \"../enums\";\r\nimport { AppMode } from \"../enums\";\r\nimport type RawCardRow from \"../interfaces/RawCardRow\";\r\nimport appConfig from \"../static/appConfig\";\r\nimport defaultGridLayout from \"../static/defaultStaticLayout\";\r\nimport { StoreModel } from \"./index\";\r\n/**\r\n * Core app model\r\n * @param\r\n */\r\nexport interface AppDataModel {\r\n  //state\r\n  availableCards: CardData[];\r\n  availableWidgets: WidgetData[];\r\n  activeWidgets: WidgetData[];\r\n  activeCards: CardData[];\r\n  // currentLayout: Layouts;\r\n  appMode: AppMode;\r\n\r\n  //listeners\r\n  onCardSheetLoadSuccess: ThunkOn<AppDataModel, never, StoreModel>;\r\n  onSwapCardContent: ThunkOn<AppDataModel, never, StoreModel>;\r\n  onSetActiveLayout: ThunkOn<AppDataModel, never, StoreModel>;\r\n  //managers\r\n  manageViewModeChange: Thunk<AppDataModel, AppMode>;\r\n  toggleAppMode: Thunk<AppDataModel, never>;\r\n  //simple setters\r\n  setAppMode: Action<AppDataModel, AppMode>;\r\n  // setCurrentLayout: Action<AppDataModel, Layouts>;\r\n  setActiveCards: Action<AppDataModel, CardData[]>;\r\n  setActiveWidgets: Action<AppDataModel, WidgetData[]>;\r\n  setAvailableCards: Action<AppDataModel, CardData[]>;\r\n  registerCardLoadFailure: Thunk<AppDataModel, CardData, never, StoreModel>;\r\n}\r\n\r\nconst availableWidgets = appConfig.widgetIds.map(n=>new WidgetData(n as WidgetType))\r\n\r\nconst appModel: AppDataModel = {\r\n  //state\r\n  availableCards: [],\r\n  availableWidgets: availableWidgets,\r\n  activeWidgets: [],\r\n  activeCards: [],\r\n  // currentLayout: defaultGridLayout.layout,\r\n  appMode: AppMode.DISPLAY,\r\n  // localStorageLayouts: [],\r\n\r\n  //managers\r\n  /**Control side effects for altering the view state of the app, and dispatch a setter for the state */\r\n  manageViewModeChange: thunk((actions, viewModeEnum) => {\r\n    console.log(viewModeEnum);\r\n    actions.setAppMode(viewModeEnum);\r\n    switch (viewModeEnum) { \r\n      case AppMode.EDIT:\r\n        break;\r\n      case AppMode.DISPLAY:\r\n        break;\r\n      case AppMode.CYCLE:\r\n        break;\r\n      default:\r\n        console.log(\"reached default in set view mode thunk\");\r\n    }\r\n  }),\r\n  toggleAppMode: thunk((actions, _, { getState }) => {\r\n    console.log(\"toggling view mod \");\r\n\r\n    switch (getState().appMode) {\r\n      case AppMode.EDIT:\r\n        actions.setAppMode(AppMode.DISPLAY);\r\n        break;\r\n      case AppMode.DISPLAY:\r\n        actions.setAppMode(AppMode.EDIT);\r\n        break;\r\n      case AppMode.CYCLE:\r\n        break;\r\n      default:\r\n        console.log(\"reached default in set view mode thunk\");\r\n    }\r\n    console.log(getState().appMode);\r\n  }),\r\n  setAvailableCards: action((state, cardDataArray) => {\r\n    console.log(\"setting available cards\");\r\n    state.availableCards = cardDataArray;\r\n  }),\r\n  setActiveCards: action((state, cardDataArray) => {\r\n    console.log(cardDataArray);\r\n    state.activeCards = cardDataArray;\r\n  }),\r\n  setActiveWidgets: action((state, widgetDataArray) => {\r\n    console.log(widgetDataArray);\r\n    state.activeWidgets = widgetDataArray;\r\n  }),\r\n  setAppMode: action((state, viewModeEnum) => {\r\n    console.log(\"setting view mode\");\r\n    state.appMode = viewModeEnum;\r\n  }),\r\n\r\n  //listeners\r\n  onCardSheetLoadSuccess: thunkOn(\r\n    // targetResolver:\r\n    (actions, storeActions) =>\r\n      storeActions.googleSheetsModel.setAppGoogleSheetData,\r\n    // handler:\r\n    async (actions, target) => {\r\n      console.log(\"TRIGGERD\");\r\n      // console.log(\"got on card sheet load success\");\r\n      console.log(target.payload);\r\n      target.payload.getSheetRows<RawCardRow>(\"CARDS\").then((rows) => {\r\n        console.log(rows);\r\n        const rawCardRowsArray = rows.map((row) => {\r\n          return {\r\n            src: row.src,\r\n            title: row.title,\r\n            added: row.added,\r\n            sourceid: row.sourceid,\r\n            author: row.author,\r\n            interaction: row.interaction,\r\n          } as RawCardRow;\r\n        });\r\n\r\n        const cards = rawCardRowsArray.map((c: RawCardRow) => new CardData(c));\r\n        console.log(cards);\r\n        // actions.setActiveCards(cards)\r\n        actions.setAvailableCards(cards);\r\n      });\r\n    }\r\n  ),\r\n  onSetActiveLayout: thunkOn(\r\n    (actions, storeActions) => storeActions.layoutsModel.setActiveLayout,\r\n    async (actions, layout, { getState }) => {\r\n      // console.log(layout.);\r\n      console.log(\"SETTING ACTIVE LAYOUT\");\r\n      const activeSourceIds = new Set(\r\n        layout.payload.sources()\r\n      );\r\n      console.log(layout.payload);\r\n      console.log(layout.payload.layoutWidgets);\r\n      const activeWidgetIds = new Set(layout.payload.layoutWidgets.map(w=>w.id)??[])\r\n      console.log(\"ACTIVE WIDGET IDS\", activeWidgetIds);\r\n\r\n\r\n      const availableCardsUpdated = getState().availableCards.map((card) => {\r\n        if (activeSourceIds.has(card.sourceId)) {\r\n          card.setActive(true);\r\n        } else {\r\n          card.setActive(false);\r\n        }\r\n        return card;\r\n      });\r\n      const activeCards = getState().availableCards.filter((card) => {\r\n        return activeSourceIds.has(card.sourceId);\r\n      });\r\n      // console.log(object);\r\n      // availableWidgets = layout.payload.layout.\r\n      const activeWidgets = availableWidgets.filter((card) => {\r\n        return activeWidgetIds.has(card.id);\r\n      });\r\n      actions.setAvailableCards(availableCardsUpdated);\r\n      actions.setActiveCards(activeCards);\r\n      console.log(activeWidgets);\r\n      actions.setActiveWidgets(activeWidgets)\r\n    }\r\n  ),\r\n  registerCardLoadFailure: thunk(\r\n    (actions, failedCard, { getState, getStoreState }) => {\r\n      console.log(\"Got card Register Load Failure at Layouts Model\");\r\n      console.log(failedCard);\r\n      const { activeCards } = getState();\r\n      const failedId = failedCard.sourceId;\r\n      const newCards = activeCards.map((c) => {\r\n        if (c.sourceId === failedId) {\r\n          console.log(\"found failed\");\r\n          c.fail();\r\n        }\r\n        return c;\r\n      });\r\n      actions.setActiveCards(newCards);\r\n    }\r\n  ),\r\n  onSwapCardContent: thunkOn(\r\n    (actions, storeActions) => storeActions.layoutsModel.swapCardContent,\r\n    async (actions, payload, { getState }) => {\r\n      console.log(\"got swap card content\");\r\n      console.log(payload.payload);\r\n      console.log(getState().activeCards);\r\n      const newCards = getState().activeCards.map((c) => {\r\n        if (c.sourceId === payload.payload.targetId) {\r\n          const newSource = getState().availableCards.find(\r\n            (c) => c.sourceId === payload.payload.sourceId\r\n          );\r\n          console.log(newSource);\r\n          return newSource;\r\n        } else {\r\n          return c;\r\n        }\r\n      });\r\n      if (newCards) {\r\n        actions.setActiveCards(newCards as CardData[]);\r\n      }\r\n      console.log(debug(payload));\r\n    }\r\n  ),\r\n};\r\n\r\nexport default appModel;\r\n","import { ExtendedLayout, GridSettings, LayoutSettings } from \"../data_structs/LayoutData\"\n\nconst layout = { \"lg\": [{ \"w\": 2, \"h\": 1, \"x\": 0, \"y\": 0, \"i\": \"clock\", \"moved\": false, \"static\": true }, { \"w\": 2, \"h\": 2, \"x\": 2, \"y\": 0, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/DuBois_Racism.png\", \"moved\": false, \"static\": false }, { \"w\": 1, \"h\": 2, \"x\": 0, \"y\": 1, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/VideoGames.jpeg\", \"moved\": false, \"static\": false }], \"md\": [{ \"w\": 2, \"h\": 1, \"x\": 0, \"y\": 0, \"i\": \"clock\", \"moved\": false, \"static\": true }, { \"w\": 2, \"h\": 2, \"x\": 2, \"y\": 0, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/DuBois_Racism.png\", \"moved\": false, \"static\": false }, { \"w\": 1, \"h\": 2, \"x\": 0, \"y\": 1, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/VideoGames.jpeg\", \"moved\": false, \"static\": false }], \"sm\": [{ \"w\": 2, \"h\": 1, \"x\": 0, \"y\": 0, \"i\": \"clock\", \"moved\": false, \"static\": true }, { \"w\": 2, \"h\": 2, \"x\": 2, \"y\": 0, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/DuBois_Racism.png\", \"moved\": false, \"static\": false }, { \"w\": 1, \"h\": 2, \"x\": 0, \"y\": 1, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/VideoGames.jpeg\", \"moved\": false, \"static\": false }], \"xs\": [{ \"w\": 2, \"h\": 1, \"x\": 0, \"y\": 0, \"i\": \"clock\", \"moved\": false, \"static\": true }, { \"w\": 2, \"h\": 2, \"x\": 2, \"y\": 0, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/DuBois_Racism.png\", \"moved\": false, \"static\": false }, { \"w\": 1, \"h\": 2, \"x\": 0, \"y\": 1, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/VideoGames.jpeg\", \"moved\": false, \"static\": false }], \"xxs\": [{ \"w\": 2, \"h\": 1, \"x\": 0, \"y\": 0, \"i\": \"clock\", \"moved\": false, \"static\": true }, { \"w\": 2, \"h\": 2, \"x\": 2, \"y\": 0, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/DuBois_Racism.png\", \"moved\": false, \"static\": false }, { \"w\": 1, \"h\": 2, \"x\": 0, \"y\": 1, \"i\": \"https://raw.githubusercontent.com/wyhinton/dxl_content/master/images/VideoGames.jpeg\", \"moved\": false, \"static\": false }] }\n\nconst gridSettings: GridSettings = {\n    defaultBackgroundColor: \"red\"\n}\nconst layoutSettings: LayoutSettings  = {\n    gridSettings: gridSettings,\n    cardSettings: [],\n}\n\nconst extendedLayoutTest: ExtendedLayout = {\n    layout: layout,\n    layoutSettings: layoutSettings,\n    widgets: [],\n}\n\nexport default extendedLayoutTest","import { Layout, Layouts } from \"react-grid-layout\";\n\nimport type { CardSwapEvent } from \"../interfaces/CardEvents\";\nimport type { GridPosition } from \"../interfaces/GridPosition\";\nimport type RawLayoutRow from \"../interfaces/RawLayoutRow\";\nimport appConfig from \"../static/appConfig\";\nimport extendedLayoutTest from \"../static/extendedLayoutTest\";\nimport CardData from \"./CardData\";\nimport WidgetData from \"./WidgetData\";\n\nexport interface CardOptions {\n  id: string;\n  scale: number;\n  backgroundColor: string;\n  objectPosition: string;\n}\n\nexport interface GridSettings {\n  defaultBackgroundColor: string;\n}\nexport interface LayoutSettings {\n  cardSettings: CardOptions[];\n  gridSettings: GridSettings;\n}\n\nexport interface ExtendedLayout {\n  layout: Layouts;\n  layoutSettings: LayoutSettings;\n  widgets: WidgetData[]\n}\n\n//TODO: Google form columns and layoutData fields should have the same capitilization\nexport default class LayoutData {\n  readonly title: string;\n  readonly author: string;\n  readonly added: Date;\n  readonly id: string;\n  readonly sourceLayout: ExtendedLayout;\n  layout: Layouts;\n  layoutWidgets: WidgetData[];\n\n  constructor(row: RawLayoutRow) {\n    const {widgets, layout, layoutSettings} = testGetLayout(row);\n    this.id = row.title + \"_\" + row.timestamp;\n    this.title = row.title;\n    this.author = row.author;\n    this.added = new Date(row.timestamp.split(\" \")[0]);\n    // this.sourceLayout = testGetLayout(row);\n    this.sourceLayout  = JSON.parse(row.layout).sourceLayout\n    console.log(JSON.parse(row.layout));\n    if (JSON.parse(row.layout).layoutWidgets){\n      this.layoutWidgets = JSON.parse(row.layout).layoutWidgets\n    } else {\n      this.layoutWidgets = []\n    }\n    // this.layoutWidgets = []\n    // this.extendedLayout = testGetLayout(row);\n    this.layout = layout\n    // this.layoutWidgets = widgets\n\n  }\n\n  swapCard(swapInfo: CardSwapEvent): void {\n    for (const [k, v] of Object.entries(this.layout)) {\n      for (const [index, layoutValue] of v.entries()) {\n        if (layoutValue.i == swapInfo.targetId) {\n          v[index].i = swapInfo.sourceId;\n        }\n      }\n      this.layout[k] = v;\n    }\n  }\n\n  removeCard(toRemoveId: string): void {\n    console.log(this.layout);\n    for (const [k, v] of Object.entries(this.layout)) {\n      for (const [index, layoutValue] of v.entries()) {\n        this.layout[k] = v.filter((l) => l.i !== toRemoveId);\n      }\n    }\n  }\n\n  clearCards(): void {\n    console.log(this.layout);\n    for (const [k, v] of Object.entries(this.layout)) {\n      for (const [index, layoutValue] of v.entries()) {\n        this.layout[k] = [];\n      }\n    }\n  }\n\n  addCard(toAdd: CardData, pos: GridPosition): void {\n    console.log(\"ADDING CARD AT LAYOUT DATA\");\n    console.log(this.layout);\n    const lg = Object.entries(this.layout)[0][1];\n    if (lg.map(l=>l.i).includes(toAdd.sourceId)){\n      console.log(\"ADDING SOMETHING THAT'S ALREADY PRESENT\");\n    }\n    for (const [k, v] of Object.entries(this.layout)) {\n      const newItem: Layout = {\n        x: pos.x,\n        y: pos.y,\n        w: 1,\n        h: 1,\n        i: toAdd.sourceId,\n      };\n      this.layout[k].push(newItem);\n    }\n  }\n  addWidget(toAdd: WidgetData, pos: GridPosition): void {\n    // console.log(\"ADDING WIDGET AT LAYOUT DATA\", toAdd);\n    // console.log(this.layout);\n    const lg = Object.entries(this.layout)[0][1];\n    if (lg.map(l=>l.i).includes(toAdd.id)){\n      console.log(\"ADDING A WIDGET THAT'S ALREADY PRESENT\");\n    }\n    this.layoutWidgets.push(toAdd)\n    for (const [k, v] of Object.entries(this.layout)) {\n      const newItem: Layout = {\n        x: pos.x,\n        y: pos.y,\n        w: 1,\n        h: 1,\n        i: toAdd.id,\n      };\n      this.layout[k].push(newItem);\n    }\n  }\n  resetLayout(): void {\n    // this.layout = { ...this.sourceLayout };\n    this.layout = { ...this.sourceLayout.layout };\n  }\n  failCard(toFail: CardData) {\n    console.log(\"FAILING CARD AT LAYOUT DATA\");\n    // console.log()\n  }\n  setGridLayout(newGridLayout: Layouts): void {\n    console.log(newGridLayout);\n    this.layout = newGridLayout;\n  }\n  sources(): string[] {\n    const lg = Object.entries(this.layout)[0][1];\n    return lg.map((l: any) => l.i);\n  }\n  widgets(): string[]{\n    console.log(\"GETTING WIDGETS AT WIDGET LAYOUTDATA\");\n    const lg = Object.entries(this.layout)[0][1];\n    console.log(lg);\n    const  justWidgets = lg.filter((l: any) => appConfig.widgetIds.includes(l.i));\n    console.log(\"just widgets\", justWidgets);\n    return justWidgets.map((l: any) => l.i);\n  }\n}\n//TODO: TEMPORRARY!!!!!\nfunction testGetLayout(row: RawLayoutRow): ExtendedLayout {\n  const test = JSON.parse(row.layout);\n  // console.log(row);\n  // const test = JSON.parse(row.layout).layt=\n  return test.layout ? test : extendedLayoutTest;\n}\n","import { Layout, Layouts } from \"react-grid-layout\";\nimport LayoutData, { ExtendedLayout } from \"../data_structs/LayoutData\";\nimport RawLayoutRow from \"../interfaces/RawLayoutRow\";\n// const availableHandles: ResizeHandle[] = [\n//   \"s\",\n//   \"w\",\n//   \"e\",\n//   \"n\",\n//   \"sw\",\n//   \"nw\",\n//   \"se\",\n//   \"ne\",\n// ];\nconst defaultGridLayoutArray: Layout[] = [\n  {\n    i: \"https://codepen.io/rcyou/embed/QEObEk?height=265&theme-id=light&default-tab=css,result\",\n    x: 2,\n    y: 2,\n    w: 1,\n    h: 1,\n    static: false,\n  },\n  {\n    i: \"https://sketchfab.com/models/e55956fee6444011b574bad021a03eae/embed?autostart=1\",\n    x: 3,\n    y: 0,\n    w: 1,\n    h: 1,\n    minW: 1,\n  },\n  {\n    i: \"https://www.lib.ncsu.edu/huntlibrary\",\n    x: 3,\n    y: 1,\n    w: 1,\n    h: 1,\n    minW: 1,\n  },\n];\n\n\nconst defaultStaticLayout: ExtendedLayout = {\n  layout: {\n    lg: defaultGridLayoutArray,\n    md: defaultGridLayoutArray,\n    sm: defaultGridLayoutArray,\n    xs: defaultGridLayoutArray,\n    xxs: defaultGridLayoutArray,\n  },\n  layoutSettings: {\n    cardSettings: [],\n    gridSettings: {\n      defaultBackgroundColor: \"red\"\n    }\n  },\n  widgets: [],\n};\n\nconst fakeLayoutRow: RawLayoutRow = {\n  title: \"default static layout\",\n  author: \"webb\",\n  timestamp: \"1/1/2021\",\n  layout: JSON.stringify(defaultStaticLayout),\n  interaction: \"active\",\n}\n\nconst defaultLayoutData = new LayoutData(fakeLayoutRow)\n\n// console.log(JSON.stringify(defaultLayouts));\nexport default defaultLayoutData;\n\n\n// const defaultLayoutData =\" f\"\n// export default defaultLayoutData;","import { Action, action, Thunk, thunk, ThunkOn,thunkOn } from \"easy-peasy\";\r\nimport { Layouts } from \"react-grid-layout\";\r\n\r\nimport CardData from \"../data_structs/CardData\";\r\nimport LayoutData from \"../data_structs/LayoutData\";\r\nimport type {SheetNames } from \"../enums\";\r\nimport { AppMode } from \"../enums\";\r\nimport { CardAddEvent, CardSwapEvent } from \"../interfaces/CardEvents\";\r\nimport RawLayoutRow from \"../interfaces/RawLayoutRow\";\r\nimport appConfig from \"../static/appConfig\";\r\nimport defaultStaticLayout from \"../static/defaultStaticLayout\";\r\nimport { StoreModel } from \"./index\";\r\n\r\nexport interface LayoutsModel {\r\n  //state\r\n  activeLayout: LayoutData | undefined;\r\n  externalLayouts: LayoutData[];\r\n  bufferLayout: Layouts;\r\n  tempLayout: Layouts;\r\n\r\n  //listeners \r\n  onSetAppGoogleSheetData: ThunkOn<LayoutsModel, never, StoreModel>;\r\n  onToggleViewMode: ThunkOn<LayoutsModel, never, StoreModel>;\r\n\r\n  //simple setters\r\n  setActiveLayout: Action<LayoutsModel, LayoutData>;\r\n  setExternalLayouts: Action<LayoutsModel, LayoutData[]>;\r\n  setBufferLayout: Action<LayoutsModel, Layouts>;\r\n  setTempLayout: Action<LayoutsModel, Layouts>;\r\n  updateLayout: Action<LayoutsModel, CardSwapEvent>;\r\n\r\n  //update\r\n  swapCardContent: Thunk<LayoutsModel, CardSwapEvent, StoreModel>;\r\n  deleteCard: Thunk<LayoutsModel, string, StoreModel>;\r\n  clearCards: Thunk<LayoutsModel, never, StoreModel>;\r\n  addCard: Thunk<LayoutsModel, CardAddEvent, never, StoreModel>;\r\n  addWidget: Thunk<LayoutsModel, CardAddEvent, never, StoreModel>;\r\n  registerCardLoadFailure: Thunk<LayoutsModel, CardData, never, StoreModel>;\r\n  resetLayout: Thunk<LayoutsModel, never, StoreModel>\r\n}\r\n\r\n//TODO: Get feedback the whole buffer layout approach\r\nconst layoutsModel: LayoutsModel = {\r\n  //state\r\n  activeLayout: undefined,\r\n  externalLayouts: [],\r\n  bufferLayout: defaultStaticLayout.layout,\r\n  tempLayout: defaultStaticLayout.layout,\r\n\r\n  //listeners\r\n  /**On setAppGoogleSheetData, create an array of LayoutData objects from the provided rows */\r\n  onSetAppGoogleSheetData: thunkOn(\r\n    (actions, storeActions) =>\r\n      storeActions.googleSheetsModel.setAppGoogleSheetData,\r\n    (actions, target) => {\r\n      //TODO: ERROR HANDLING FOR LAYOUTS\r\n      target.payload\r\n        .getSheetRows<RawLayoutRow>(\"LAYOUTS\")\r\n        .then((rows) => {\r\n          const rawLayoutRows = rows;\r\n          const layouts = rawLayoutRows.map((l) => new LayoutData(l));\r\n          let defaultLayout: LayoutData;\r\n          if (appConfig.useStaticLayout){\r\n             defaultLayout = defaultStaticLayout\r\n             actions.setActiveLayout(defaultLayout);\r\n             actions.setBufferLayout(defaultLayout.layout)\r\n          } else {\r\n            const defaultLayout = layouts.filter(\r\n              (layout) => layout.title === appConfig.defaultLayoutName\r\n            )[0];\r\n            if (defaultLayout) {\r\n              console.log(defaultLayout);\r\n              actions.setActiveLayout(defaultLayout);\r\n              actions.setBufferLayout(defaultLayout.layout)\r\n            }\r\n          }\r\n          actions.setExternalLayouts(layouts);\r\n        });\r\n    }\r\n  ),\r\n  onToggleViewMode: thunkOn(\r\n    // targetResolver:toggleAppMode\r\n    (actions, storeActions) => storeActions.appModel.toggleAppMode,\r\n    // handler:\r\n    (actions, target, { getState, getStoreState }) => {\r\n      const { activeLayout } = getState();\r\n      const buf = getState().bufferLayout;\r\n      if (getStoreState().appModel.appMode === AppMode.DISPLAY) {\r\n        console.log(\"IT WAS IN DISPLAY MODE\");\r\n        if (activeLayout?.layout) {\r\n          activeLayout.layout = buf;\r\n          actions.setActiveLayout(activeLayout);\r\n        }\r\n      }\r\n    }\r\n  ),\r\n  //simple setters\r\n  setActiveLayout: action((state, newActiveLayout) => {\r\n    state.activeLayout = newActiveLayout;\r\n  }),\r\n  setExternalLayouts: action((state, newLayoutArray) => {\r\n    console.log(\"setting external layouts\");\r\n    state.externalLayouts = newLayoutArray;\r\n  }),\r\n  //mutators\r\n  swapCardContent: thunk(\r\n    (actions, swapInfo, { getState}) => {\r\n      const { activeLayout } = getState();\r\n      if (activeLayout) {\r\n        const buf = getState().bufferLayout;\r\n        activeLayout.layout = buf;\r\n        activeLayout.swapCard(swapInfo);\r\n        actions.setActiveLayout(activeLayout);\r\n      }\r\n    }\r\n  ),\r\n  deleteCard: thunk(\r\n    (actions, cardToDelete, { getState}) => {\r\n      const { activeLayout } = getState();\r\n      if (activeLayout) {\r\n        const buf = getState().bufferLayout;\r\n        activeLayout.layout = buf;\r\n        activeLayout.removeCard(cardToDelete);\r\n        actions.setActiveLayout(activeLayout);\r\n      }\r\n    }\r\n  ),\r\n  clearCards: thunk(\r\n    (actions, _, { getState}) => {\r\n      const { activeLayout } = getState();\r\n      if (activeLayout) {\r\n        const buf = getState().bufferLayout;\r\n        activeLayout.layout = buf;\r\n        activeLayout.clearCards();\r\n        actions.setActiveLayout(activeLayout);\r\n      }\r\n    }\r\n  ),\r\n  addCard: thunk((actions, cardAddEvent, { getState, getStoreState }) => {\r\n    const { availableCards } = getStoreState().appModel;\r\n    const { sourceId, targetPosition } = cardAddEvent;\r\n    const cardToAdd = availableCards.find((c) => c.sourceId == sourceId);\r\n    const { activeLayout } = getState();\r\n    if (activeLayout && cardToAdd) {\r\n      const buf = getState().bufferLayout;\r\n      activeLayout.setGridLayout(buf);\r\n      activeLayout?.addCard(cardToAdd, targetPosition);\r\n      actions.setActiveLayout(activeLayout);\r\n    }\r\n  }),\r\n  addWidget: thunk((actions, cardAddEvent, { getState, getStoreState }) => {\r\n    console.log(\"ADDING NEW WIDGET!!!\");\r\n    const { availableWidgets } = getStoreState().appModel;\r\n    const { sourceId, targetPosition } = cardAddEvent;\r\n    const widgetToAdd = availableWidgets.find((c) => c.id == sourceId);\r\n    const { activeLayout } = getState();\r\n    if (activeLayout && widgetToAdd) {\r\n      const buf = getState().bufferLayout;\r\n      activeLayout.setGridLayout(buf);\r\n      activeLayout?.addWidget(widgetToAdd, targetPosition);\r\n      actions.setActiveLayout(activeLayout);\r\n    }\r\n  }),\r\n  registerCardLoadFailure: thunk(\r\n    (actions, failedCard, { getState, getStoreState }) => {\r\n      const { activeLayout } = getState();\r\n      if (activeLayout) {\r\n        activeLayout.failCard(failedCard);\r\n      }\r\n    }\r\n  ),\r\n  resetLayout: thunk((actions, _, { getState }) => {\r\n    const { activeLayout } = getState();\r\n    if (activeLayout) {\r\n      const buf = getState().activeLayout;\r\n      buf?.resetLayout();\r\n      if (buf) {\r\n        actions.setActiveLayout(buf);\r\n      }\r\n    }\r\n  }),\r\n  setBufferLayout: action((state, layouts) => {\r\n    state.bufferLayout = layouts;\r\n  }),\r\n  setTempLayout: action((state, layouts) => {\r\n    state.tempLayout = layouts;\r\n  }),\r\n  updateLayout: action((state, swap) => {\r\n    const old = state.activeLayout;\r\n    if (old) {\r\n      old.swapCard(swap);\r\n      state.activeLayout = old;\r\n    }\r\n  }),\r\n};\r\n\r\nexport default layoutsModel;\r\n","import type SheetId from \"../interfaces/SheetId\";\n\nconst cardDataSheetKey: SheetId = {\n  key: \"181P-SDszUOj_xn1HJ1DRrO8pG-LXyXNmINcznHeoK8k\",\n  gid: 0,\n};\nexport default cardDataSheetKey;\n\n\n\n// 1o-R04VC8cIbcmqM68q4ESguaaNYb-0jhoPNgEuKa0i4\n// key: \"181P-SDszUOj_xn1HJ1DRrO8pG-LXyXNmINcznHeoK8k\",\n","import { SheetNames } from \"../enums\";\r\n\r\nexport default class GoogleSheetData {\r\n  title!: string;\r\n  sheetId!: string;\r\n  sheets!: Map<SheetNames, unknown[]>;\r\n  constructor(\r\n    title: string,\r\n    sheetId: string,\r\n  ) {\r\n    this.title = title;\r\n    this.sheetId = sheetId;\r\n    this.sheets = new Map();\r\n  }\r\n  getSheetRows<P>(title: SheetNames): Promise<P[]>{\r\n    // const typedArr = this.rows.map(r=>r as P)\r\n    return new Promise<P[]>((resolve, reject)=>{\r\n      const rowArray = this.sheets.get(title);\r\n      if (rowArray){\r\n        resolve(rowArray.map(r=>r as P))\r\n      } else {\r\n        reject(`sheet with title ${title} did not exist`)\r\n      }\r\n    })\r\n  }\r\n  addSheet(title: SheetNames, rows: unknown[]){\r\n    this.sheets.set(title, rows);\r\n  }\r\n}\r\n","import { action, Action, thunk, Thunk } from \"easy-peasy\";\r\nimport type GoogleSheet from \"../interfaces/GoogleSheet\";\r\nimport type RawCardRow from \"../interfaces/RawCardRow\";\r\nimport type RawLayoutRow from \"../interfaces/RawLayoutRow\";\r\nimport cardDataSheetKey from \"../static/cardDataSheetKey\";\r\nimport layoutsGoogleSheetKey from \"../static/layoutsGoogleSheetKey\";\r\nimport GoogleSheetData from \"../data_structs/GoogleSheetData\";\r\nimport Papa from \"papaparse\";\r\nimport { SheetNames } from \"../enums\";\r\nimport SheetId from \"../interfaces/SheetId\";\r\nimport RawTopSheetRow from \"../interfaces/PrincipleSheetRow\";\r\nimport PrincipleSheetRow from \"../interfaces/PrincipleSheetRow\";\r\n\r\nexport interface GoogleSheetsModel {\r\n  //state\r\n  appGoogleSheet: GoogleSheetData | undefined;\r\n  cardDataGoogleSheet: RawCardRow[] | null;\r\n  layoutDataGoogleSheet: RawLayoutRow[] | null;\r\n  formUrl: string | undefined;\r\n  layoutSheetUrl: string | undefined;\r\n  cardSheetUrl: string | undefined;\r\n  //requests\r\n  fetchTopLevelSheet: Thunk<GoogleSheetsModel>;\r\n  fetchAppGoogleSheet: Thunk<GoogleSheetsModel>;\r\n  fetchSheet: Thunk<GoogleSheetsModel, { url: string; name: SheetNames }[]>;\r\n  //setters\r\n  setFormUrl: Action<GoogleSheetsModel, string>;\r\n  setCardSheetUrl: Action<GoogleSheetsModel, string>;\r\n  setLayoutsSheetUrl: Action<GoogleSheetsModel, string>;\r\n  setAppGoogleSheetData: Action<GoogleSheetsModel, GoogleSheetData>;\r\n  setCardDataGoogleSheet: Action<GoogleSheetsModel, RawCardRow[]>;\r\n  setLayoutDataGoogleSheet: Action<GoogleSheetsModel, RawLayoutRow[]>;\r\n}\r\n/**\r\n * Responsible for making requestst to google sheets. Other models must listen this model to intercept the sheet payload.\r\n * Also stores the fetch data purely for debugging purposes.\r\n */\r\n\r\ninterface LoadSheetResult {\r\n  rows: unknown[];\r\n  sheetTitle: SheetNames;\r\n}\r\n\r\nconst googleSheetsModel: GoogleSheetsModel = {\r\n  //state\r\n  layoutDataGoogleSheet: null,\r\n  cardDataGoogleSheet: null,\r\n  appGoogleSheet: undefined,\r\n  formUrl: undefined,\r\n  layoutSheetUrl: undefined,\r\n  cardSheetUrl: undefined,\r\n  //requests\r\n  fetchTopLevelSheet: thunk((actions) => {\r\n    console.log(process.env.REACT_APP_SHEET_URL);\r\n    console.log(process.env.REACT_APP_SHEET_URL);\r\n    getData(\"TOP_LEVEL\", process.env.REACT_APP_SHEET_URL as string).then(\r\n      (r) => {\r\n        console.log(r);\r\n        let sheetRow = r.rows[0] as PrincipleSheetRow;\r\n        actions.setFormUrl(sheetRow.googleForm);\r\n        actions.setLayoutsSheetUrl(urlToCsvUrl(sheetRow.layoutsSheet));\r\n        actions.setCardSheetUrl(urlToCsvUrl(sheetRow.cardsSheet));\r\n        actions.fetchSheet([\r\n          { name: \"LAYOUTS\", url: urlToCsvUrl(sheetRow.layoutsSheet) },\r\n          { name: \"CARDS\", url: urlToCsvUrl(sheetRow.cardsSheet) },\r\n        ]);\r\n      }\r\n    );\r\n    console.log(\"GOT HERE\");\r\n  }),\r\n  fetchSheet: thunk(async (actions, sheets, { getState }) => {\r\n    console.log(getState().cardSheetUrl, getState().layoutSheetUrl);\r\n    // const getCardDataResponse = getData(\"CARDS\", getState().cardSheetUrl as string)\r\n    // const getLayoutDataResponse = getData( \"LAYOUTS\", getState().layoutSheetUrl as string)\r\n    const sheetResponses = sheets.map((s) => getData(s.name, s.url));\r\n    // Promise.allSettled([getCardDataResponse, getLayoutDataResponse]).then(results=>{\r\n    Promise.allSettled(sheetResponses).then((results) => {\r\n      const sheetData = new GoogleSheetData(\"DSC App\", cardDataSheetKey.key);\r\n      const goodValues: PromiseFulfilledResult<LoadSheetResult>[] = [];\r\n\r\n      results.forEach((result, num) => {\r\n        console.log(result);\r\n        if (result.status == \"fulfilled\") {\r\n          goodValues.push(result);\r\n          sheetData.addSheet(result.value.sheetTitle, result.value.rows);\r\n        }\r\n        if (result.status == \"rejected\") {\r\n          console.error(\"failed \");\r\n        }\r\n      });\r\n      actions.setAppGoogleSheetData(sheetData);\r\n      sheetData.getSheetRows(\"CARDS\").then((r) => {\r\n        actions.setCardDataGoogleSheet(r as RawCardRow[]);\r\n      });\r\n      sheetData.getSheetRows(\"LAYOUTS\").then((r) => {\r\n        actions.setLayoutDataGoogleSheet(r as RawLayoutRow[]);\r\n      });\r\n    });\r\n  }),\r\n\r\n  fetchAppGoogleSheet: thunk(async (actions, _, { getState }) => {\r\n    // const getCardDataResponse = parseData(\"CARDS\", cardDataSheetKey)\r\n    // const getLayoutDataResponse = parseData( \"LAYOUTS\", layoutsGoogleSheetKey)\r\n\r\n    console.log(getState().cardSheetUrl, getState().layoutSheetUrl);\r\n    const getCardDataResponse = getData(\r\n      \"CARDS\",\r\n      getState().cardSheetUrl as string\r\n    );\r\n    const getLayoutDataResponse = getData(\r\n      \"LAYOUTS\",\r\n      getState().layoutSheetUrl as string\r\n    );\r\n\r\n    Promise.allSettled([getCardDataResponse, getLayoutDataResponse]).then(\r\n      (results) => {\r\n        const sheetData = new GoogleSheetData(\"DSC App\", cardDataSheetKey.key);\r\n        const goodValues: PromiseFulfilledResult<LoadSheetResult>[] = [];\r\n\r\n        results.forEach((result, num) => {\r\n          console.log(result);\r\n          if (result.status == \"fulfilled\") {\r\n            goodValues.push(result);\r\n            sheetData.addSheet(result.value.sheetTitle, result.value.rows);\r\n          }\r\n          if (result.status == \"rejected\") {\r\n            console.error(\"failed \");\r\n          }\r\n        });\r\n        actions.setAppGoogleSheetData(sheetData);\r\n        sheetData.getSheetRows(\"CARDS\").then((r) => {\r\n          actions.setCardDataGoogleSheet(r as RawCardRow[]);\r\n        });\r\n        sheetData.getSheetRows(\"LAYOUTS\").then((r) => {\r\n          actions.setLayoutDataGoogleSheet(r as RawLayoutRow[]);\r\n        });\r\n      }\r\n    );\r\n  }),\r\n  setAppGoogleSheetData: action((state, googleSheet) => {\r\n    state.appGoogleSheet = googleSheet;\r\n  }),\r\n  setCardDataGoogleSheet: action((state, sheet) => {\r\n    state.cardDataGoogleSheet = sheet;\r\n  }),\r\n  setLayoutDataGoogleSheet: action((state, sheet) => {\r\n    state.layoutDataGoogleSheet = sheet;\r\n  }),\r\n  setFormUrl: action((state, formUrl) => {\r\n    state.formUrl = formUrl;\r\n  }),\r\n  setCardSheetUrl: action((state, cardSheetUrl) => {\r\n    state.formUrl = cardSheetUrl;\r\n  }),\r\n  setLayoutsSheetUrl: action((state, layoutSheetUrl) => {\r\n    state.formUrl = layoutSheetUrl;\r\n  }),\r\n};\r\n\r\nexport default googleSheetsModel;\r\n\r\nfunction urlToCsvUrl(url: string) {\r\n  console.log(url);\r\n  // https://docs.google.com/spreadsheets/d/1zwPZV75EhBLseFpcpQhHXEjLTV6JDrwfIGNhaI2GCXI/edit#gid=1913514186\r\n  let sections = url.split(\"/\");\r\n  const sheetKey = sections[5];\r\n  let sectionsGid = url.split(\"gid=\");\r\n  const gid = sectionsGid[1];\r\n  const csvUrl = `https://docs.google.com/spreadsheets/d/${sheetKey}/export?format=csv&gid=${gid}`;\r\n  return csvUrl;\r\n}\r\n\r\nfunction parseData(\r\n  sheetTitle: SheetNames,\r\n  sheetId: SheetId\r\n): Promise<LoadSheetResult> {\r\n  let data;\r\n  const csvUrl = `https://docs.google.com/spreadsheets/d/${sheetId.key}/export?format=csv&gid=${sheetId.gid}`;\r\n\r\n  return new Promise<LoadSheetResult>((resolve) => {\r\n    Papa.parse(csvUrl, {\r\n      download: true,\r\n      header: true,\r\n      delimiter: \",\",\r\n      dynamicTyping: true,\r\n      complete: (results) => {\r\n        data = results.data;\r\n        resolve({ rows: data, sheetTitle: sheetTitle });\r\n      },\r\n    });\r\n  });\r\n}\r\n// https://docs.google.com/spreadsheets/d/e/2PACX-1vRalMG47cvXmCbEqeIJWn5qwd9bPhHUV16_VN7LuKsv5\r\n\r\nfunction getData(\r\n  sheetTitle: SheetNames,\r\n  sheetUrl: string\r\n): Promise<LoadSheetResult> {\r\n  let data;\r\n  return new Promise<LoadSheetResult>((resolve) => {\r\n    console.log(sheetUrl);\r\n    Papa.parse(sheetUrl, {\r\n      download: true,\r\n      header: true,\r\n      delimiter: \",\",\r\n      dynamicTyping: true,\r\n      complete: (results) => {\r\n        data = results.data;\r\n        console.log(data);\r\n        resolve({ rows: data, sheetTitle: sheetTitle });\r\n      },\r\n    });\r\n  });\r\n}\r\n","import appData, { AppDataModel } from \"./appModel\";\r\nimport layoutsModel, { LayoutsModel } from \"./layoutsModel\";\r\nimport googleSheetsModel, { GoogleSheetsModel } from \"./googleSheetsModel\";\r\n// https://codesandbox.io/s/easy-peasy-typescript-v3-riqbl?file=/src/model/todos.ts\r\n\r\nexport interface StoreModel {\r\n  appModel: AppDataModel;\r\n  layoutsModel: LayoutsModel;\r\n  googleSheetsModel: GoogleSheetsModel;\r\n}\r\n\r\nconst model: StoreModel = {\r\n  appModel: appData,\r\n  layoutsModel: layoutsModel,\r\n  googleSheetsModel: googleSheetsModel,\r\n};\r\n\r\nexport default model;\r\n\r\n\r\n\r\n//testin","import { createStore, action } from \"easy-peasy\";\nimport model from \"./model\";\n\nconst store = createStore(model, { name: \"Cuboard App Store\" });\n\nexport default store;\n","import React from \"react\";\nimport App from \"./App\";\nimport { StoreProvider } from \"easy-peasy\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}